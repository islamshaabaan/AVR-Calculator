
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00003158  000031cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002acc  00000000  00000000  00003244  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000110b  00000000  00000000  00005d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000710a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000914f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000a250  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000b1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000b354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 81 14 	call	0x2902	; 0x2902 <main>
      7a:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
      82:	00 c0       	rjmp	.+0      	; 0x84 <Loop>

00000084 <Loop>:
      84:	ff cf       	rjmp	.-2      	; 0x84 <Loop>

00000086 <__fixunssfsi>:
      86:	ef 92       	push	r14
      88:	ff 92       	push	r15
      8a:	0f 93       	push	r16
      8c:	1f 93       	push	r17
      8e:	7b 01       	movw	r14, r22
      90:	8c 01       	movw	r16, r24
      92:	20 e0       	ldi	r18, 0x00	; 0
      94:	30 e0       	ldi	r19, 0x00	; 0
      96:	40 e0       	ldi	r20, 0x00	; 0
      98:	5f e4       	ldi	r21, 0x4F	; 79
      9a:	0e 94 ef 03 	call	0x7de	; 0x7de <__gesf2>
      9e:	88 23       	and	r24, r24
      a0:	8c f0       	brlt	.+34     	; 0xc4 <__fixunssfsi+0x3e>
      a2:	c8 01       	movw	r24, r16
      a4:	b7 01       	movw	r22, r14
      a6:	20 e0       	ldi	r18, 0x00	; 0
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	40 e0       	ldi	r20, 0x00	; 0
      ac:	5f e4       	ldi	r21, 0x4F	; 79
      ae:	0e 94 bb 01 	call	0x376	; 0x376 <__subsf3>
      b2:	0e 94 4f 04 	call	0x89e	; 0x89e <__fixsfsi>
      b6:	9b 01       	movw	r18, r22
      b8:	ac 01       	movw	r20, r24
      ba:	20 50       	subi	r18, 0x00	; 0
      bc:	30 40       	sbci	r19, 0x00	; 0
      be:	40 40       	sbci	r20, 0x00	; 0
      c0:	50 48       	sbci	r21, 0x80	; 128
      c2:	06 c0       	rjmp	.+12     	; 0xd0 <__fixunssfsi+0x4a>
      c4:	c8 01       	movw	r24, r16
      c6:	b7 01       	movw	r22, r14
      c8:	0e 94 4f 04 	call	0x89e	; 0x89e <__fixsfsi>
      cc:	9b 01       	movw	r18, r22
      ce:	ac 01       	movw	r20, r24
      d0:	b9 01       	movw	r22, r18
      d2:	ca 01       	movw	r24, r20
      d4:	1f 91       	pop	r17
      d6:	0f 91       	pop	r16
      d8:	ff 90       	pop	r15
      da:	ef 90       	pop	r14
      dc:	08 95       	ret

000000de <_fpadd_parts>:
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e5 e7       	ldi	r30, 0x75	; 117
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__>
      ea:	dc 01       	movw	r26, r24
      ec:	2b 01       	movw	r4, r22
      ee:	fa 01       	movw	r30, r20
      f0:	9c 91       	ld	r25, X
      f2:	92 30       	cpi	r25, 0x02	; 2
      f4:	08 f4       	brcc	.+2      	; 0xf8 <_fpadd_parts+0x1a>
      f6:	39 c1       	rjmp	.+626    	; 0x36a <_fpadd_parts+0x28c>
      f8:	eb 01       	movw	r28, r22
      fa:	88 81       	ld	r24, Y
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	08 f4       	brcc	.+2      	; 0x102 <_fpadd_parts+0x24>
     100:	33 c1       	rjmp	.+614    	; 0x368 <_fpadd_parts+0x28a>
     102:	94 30       	cpi	r25, 0x04	; 4
     104:	69 f4       	brne	.+26     	; 0x120 <_fpadd_parts+0x42>
     106:	84 30       	cpi	r24, 0x04	; 4
     108:	09 f0       	breq	.+2      	; 0x10c <_fpadd_parts+0x2e>
     10a:	2f c1       	rjmp	.+606    	; 0x36a <_fpadd_parts+0x28c>
     10c:	11 96       	adiw	r26, 0x01	; 1
     10e:	9c 91       	ld	r25, X
     110:	11 97       	sbiw	r26, 0x01	; 1
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	98 17       	cp	r25, r24
     116:	09 f4       	brne	.+2      	; 0x11a <_fpadd_parts+0x3c>
     118:	28 c1       	rjmp	.+592    	; 0x36a <_fpadd_parts+0x28c>
     11a:	aa ea       	ldi	r26, 0xAA	; 170
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	25 c1       	rjmp	.+586    	; 0x36a <_fpadd_parts+0x28c>
     120:	84 30       	cpi	r24, 0x04	; 4
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x48>
     124:	21 c1       	rjmp	.+578    	; 0x368 <_fpadd_parts+0x28a>
     126:	82 30       	cpi	r24, 0x02	; 2
     128:	a9 f4       	brne	.+42     	; 0x154 <_fpadd_parts+0x76>
     12a:	92 30       	cpi	r25, 0x02	; 2
     12c:	09 f0       	breq	.+2      	; 0x130 <_fpadd_parts+0x52>
     12e:	1d c1       	rjmp	.+570    	; 0x36a <_fpadd_parts+0x28c>
     130:	9a 01       	movw	r18, r20
     132:	ad 01       	movw	r20, r26
     134:	88 e0       	ldi	r24, 0x08	; 8
     136:	ea 01       	movw	r28, r20
     138:	09 90       	ld	r0, Y+
     13a:	ae 01       	movw	r20, r28
     13c:	e9 01       	movw	r28, r18
     13e:	09 92       	st	Y+, r0
     140:	9e 01       	movw	r18, r28
     142:	81 50       	subi	r24, 0x01	; 1
     144:	c1 f7       	brne	.-16     	; 0x136 <_fpadd_parts+0x58>
     146:	e2 01       	movw	r28, r4
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	11 96       	adiw	r26, 0x01	; 1
     14c:	9c 91       	ld	r25, X
     14e:	89 23       	and	r24, r25
     150:	81 83       	std	Z+1, r24	; 0x01
     152:	08 c1       	rjmp	.+528    	; 0x364 <_fpadd_parts+0x286>
     154:	92 30       	cpi	r25, 0x02	; 2
     156:	09 f4       	brne	.+2      	; 0x15a <_fpadd_parts+0x7c>
     158:	07 c1       	rjmp	.+526    	; 0x368 <_fpadd_parts+0x28a>
     15a:	12 96       	adiw	r26, 0x02	; 2
     15c:	2d 90       	ld	r2, X+
     15e:	3c 90       	ld	r3, X
     160:	13 97       	sbiw	r26, 0x03	; 3
     162:	eb 01       	movw	r28, r22
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	14 96       	adiw	r26, 0x04	; 4
     16a:	ad 90       	ld	r10, X+
     16c:	bd 90       	ld	r11, X+
     16e:	cd 90       	ld	r12, X+
     170:	dc 90       	ld	r13, X
     172:	17 97       	sbiw	r26, 0x07	; 7
     174:	ec 80       	ldd	r14, Y+4	; 0x04
     176:	fd 80       	ldd	r15, Y+5	; 0x05
     178:	0e 81       	ldd	r16, Y+6	; 0x06
     17a:	1f 81       	ldd	r17, Y+7	; 0x07
     17c:	91 01       	movw	r18, r2
     17e:	28 1b       	sub	r18, r24
     180:	39 0b       	sbc	r19, r25
     182:	b9 01       	movw	r22, r18
     184:	37 ff       	sbrs	r19, 7
     186:	04 c0       	rjmp	.+8      	; 0x190 <_fpadd_parts+0xb2>
     188:	66 27       	eor	r22, r22
     18a:	77 27       	eor	r23, r23
     18c:	62 1b       	sub	r22, r18
     18e:	73 0b       	sbc	r23, r19
     190:	60 32       	cpi	r22, 0x20	; 32
     192:	71 05       	cpc	r23, r1
     194:	0c f0       	brlt	.+2      	; 0x198 <_fpadd_parts+0xba>
     196:	61 c0       	rjmp	.+194    	; 0x25a <_fpadd_parts+0x17c>
     198:	12 16       	cp	r1, r18
     19a:	13 06       	cpc	r1, r19
     19c:	6c f5       	brge	.+90     	; 0x1f8 <_fpadd_parts+0x11a>
     19e:	37 01       	movw	r6, r14
     1a0:	48 01       	movw	r8, r16
     1a2:	06 2e       	mov	r0, r22
     1a4:	04 c0       	rjmp	.+8      	; 0x1ae <_fpadd_parts+0xd0>
     1a6:	96 94       	lsr	r9
     1a8:	87 94       	ror	r8
     1aa:	77 94       	ror	r7
     1ac:	67 94       	ror	r6
     1ae:	0a 94       	dec	r0
     1b0:	d2 f7       	brpl	.-12     	; 0x1a6 <_fpadd_parts+0xc8>
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0xe6>
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	44 1f       	adc	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	6a 95       	dec	r22
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0xde>
     1c8:	21 50       	subi	r18, 0x01	; 1
     1ca:	30 40       	sbci	r19, 0x00	; 0
     1cc:	40 40       	sbci	r20, 0x00	; 0
     1ce:	50 40       	sbci	r21, 0x00	; 0
     1d0:	2e 21       	and	r18, r14
     1d2:	3f 21       	and	r19, r15
     1d4:	40 23       	and	r20, r16
     1d6:	51 23       	and	r21, r17
     1d8:	21 15       	cp	r18, r1
     1da:	31 05       	cpc	r19, r1
     1dc:	41 05       	cpc	r20, r1
     1de:	51 05       	cpc	r21, r1
     1e0:	21 f0       	breq	.+8      	; 0x1ea <_fpadd_parts+0x10c>
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	79 01       	movw	r14, r18
     1ec:	8a 01       	movw	r16, r20
     1ee:	e6 28       	or	r14, r6
     1f0:	f7 28       	or	r15, r7
     1f2:	08 29       	or	r16, r8
     1f4:	19 29       	or	r17, r9
     1f6:	3c c0       	rjmp	.+120    	; 0x270 <_fpadd_parts+0x192>
     1f8:	23 2b       	or	r18, r19
     1fa:	d1 f1       	breq	.+116    	; 0x270 <_fpadd_parts+0x192>
     1fc:	26 0e       	add	r2, r22
     1fe:	37 1e       	adc	r3, r23
     200:	35 01       	movw	r6, r10
     202:	46 01       	movw	r8, r12
     204:	06 2e       	mov	r0, r22
     206:	04 c0       	rjmp	.+8      	; 0x210 <_fpadd_parts+0x132>
     208:	96 94       	lsr	r9
     20a:	87 94       	ror	r8
     20c:	77 94       	ror	r7
     20e:	67 94       	ror	r6
     210:	0a 94       	dec	r0
     212:	d2 f7       	brpl	.-12     	; 0x208 <_fpadd_parts+0x12a>
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	04 c0       	rjmp	.+8      	; 0x226 <_fpadd_parts+0x148>
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	44 1f       	adc	r20, r20
     224:	55 1f       	adc	r21, r21
     226:	6a 95       	dec	r22
     228:	d2 f7       	brpl	.-12     	; 0x21e <_fpadd_parts+0x140>
     22a:	21 50       	subi	r18, 0x01	; 1
     22c:	30 40       	sbci	r19, 0x00	; 0
     22e:	40 40       	sbci	r20, 0x00	; 0
     230:	50 40       	sbci	r21, 0x00	; 0
     232:	2a 21       	and	r18, r10
     234:	3b 21       	and	r19, r11
     236:	4c 21       	and	r20, r12
     238:	5d 21       	and	r21, r13
     23a:	21 15       	cp	r18, r1
     23c:	31 05       	cpc	r19, r1
     23e:	41 05       	cpc	r20, r1
     240:	51 05       	cpc	r21, r1
     242:	21 f0       	breq	.+8      	; 0x24c <_fpadd_parts+0x16e>
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	59 01       	movw	r10, r18
     24e:	6a 01       	movw	r12, r20
     250:	a6 28       	or	r10, r6
     252:	b7 28       	or	r11, r7
     254:	c8 28       	or	r12, r8
     256:	d9 28       	or	r13, r9
     258:	0b c0       	rjmp	.+22     	; 0x270 <_fpadd_parts+0x192>
     25a:	82 15       	cp	r24, r2
     25c:	93 05       	cpc	r25, r3
     25e:	2c f0       	brlt	.+10     	; 0x26a <_fpadd_parts+0x18c>
     260:	1c 01       	movw	r2, r24
     262:	aa 24       	eor	r10, r10
     264:	bb 24       	eor	r11, r11
     266:	65 01       	movw	r12, r10
     268:	03 c0       	rjmp	.+6      	; 0x270 <_fpadd_parts+0x192>
     26a:	ee 24       	eor	r14, r14
     26c:	ff 24       	eor	r15, r15
     26e:	87 01       	movw	r16, r14
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 91       	ld	r25, X
     274:	d2 01       	movw	r26, r4
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	8c 91       	ld	r24, X
     27a:	98 17       	cp	r25, r24
     27c:	09 f4       	brne	.+2      	; 0x280 <_fpadd_parts+0x1a2>
     27e:	45 c0       	rjmp	.+138    	; 0x30a <_fpadd_parts+0x22c>
     280:	99 23       	and	r25, r25
     282:	39 f0       	breq	.+14     	; 0x292 <_fpadd_parts+0x1b4>
     284:	a8 01       	movw	r20, r16
     286:	97 01       	movw	r18, r14
     288:	2a 19       	sub	r18, r10
     28a:	3b 09       	sbc	r19, r11
     28c:	4c 09       	sbc	r20, r12
     28e:	5d 09       	sbc	r21, r13
     290:	06 c0       	rjmp	.+12     	; 0x29e <_fpadd_parts+0x1c0>
     292:	a6 01       	movw	r20, r12
     294:	95 01       	movw	r18, r10
     296:	2e 19       	sub	r18, r14
     298:	3f 09       	sbc	r19, r15
     29a:	40 0b       	sbc	r20, r16
     29c:	51 0b       	sbc	r21, r17
     29e:	57 fd       	sbrc	r21, 7
     2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <_fpadd_parts+0x1d4>
     2a2:	11 82       	std	Z+1, r1	; 0x01
     2a4:	33 82       	std	Z+3, r3	; 0x03
     2a6:	22 82       	std	Z+2, r2	; 0x02
     2a8:	24 83       	std	Z+4, r18	; 0x04
     2aa:	35 83       	std	Z+5, r19	; 0x05
     2ac:	46 83       	std	Z+6, r20	; 0x06
     2ae:	57 83       	std	Z+7, r21	; 0x07
     2b0:	1d c0       	rjmp	.+58     	; 0x2ec <_fpadd_parts+0x20e>
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	81 83       	std	Z+1, r24	; 0x01
     2b6:	33 82       	std	Z+3, r3	; 0x03
     2b8:	22 82       	std	Z+2, r2	; 0x02
     2ba:	88 27       	eor	r24, r24
     2bc:	99 27       	eor	r25, r25
     2be:	dc 01       	movw	r26, r24
     2c0:	82 1b       	sub	r24, r18
     2c2:	93 0b       	sbc	r25, r19
     2c4:	a4 0b       	sbc	r26, r20
     2c6:	b5 0b       	sbc	r27, r21
     2c8:	84 83       	std	Z+4, r24	; 0x04
     2ca:	95 83       	std	Z+5, r25	; 0x05
     2cc:	a6 83       	std	Z+6, r26	; 0x06
     2ce:	b7 83       	std	Z+7, r27	; 0x07
     2d0:	0d c0       	rjmp	.+26     	; 0x2ec <_fpadd_parts+0x20e>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	24 83       	std	Z+4, r18	; 0x04
     2dc:	35 83       	std	Z+5, r19	; 0x05
     2de:	46 83       	std	Z+6, r20	; 0x06
     2e0:	57 83       	std	Z+7, r21	; 0x07
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	93 81       	ldd	r25, Z+3	; 0x03
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	93 83       	std	Z+3, r25	; 0x03
     2ea:	82 83       	std	Z+2, r24	; 0x02
     2ec:	24 81       	ldd	r18, Z+4	; 0x04
     2ee:	35 81       	ldd	r19, Z+5	; 0x05
     2f0:	46 81       	ldd	r20, Z+6	; 0x06
     2f2:	57 81       	ldd	r21, Z+7	; 0x07
     2f4:	da 01       	movw	r26, r20
     2f6:	c9 01       	movw	r24, r18
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	a1 09       	sbc	r26, r1
     2fc:	b1 09       	sbc	r27, r1
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	9f 4f       	sbci	r25, 0xFF	; 255
     302:	af 4f       	sbci	r26, 0xFF	; 255
     304:	bf 43       	sbci	r27, 0x3F	; 63
     306:	28 f3       	brcs	.-54     	; 0x2d2 <_fpadd_parts+0x1f4>
     308:	0b c0       	rjmp	.+22     	; 0x320 <_fpadd_parts+0x242>
     30a:	91 83       	std	Z+1, r25	; 0x01
     30c:	33 82       	std	Z+3, r3	; 0x03
     30e:	22 82       	std	Z+2, r2	; 0x02
     310:	ea 0c       	add	r14, r10
     312:	fb 1c       	adc	r15, r11
     314:	0c 1d       	adc	r16, r12
     316:	1d 1d       	adc	r17, r13
     318:	e4 82       	std	Z+4, r14	; 0x04
     31a:	f5 82       	std	Z+5, r15	; 0x05
     31c:	06 83       	std	Z+6, r16	; 0x06
     31e:	17 83       	std	Z+7, r17	; 0x07
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	80 83       	st	Z, r24
     324:	24 81       	ldd	r18, Z+4	; 0x04
     326:	35 81       	ldd	r19, Z+5	; 0x05
     328:	46 81       	ldd	r20, Z+6	; 0x06
     32a:	57 81       	ldd	r21, Z+7	; 0x07
     32c:	57 ff       	sbrs	r21, 7
     32e:	1a c0       	rjmp	.+52     	; 0x364 <_fpadd_parts+0x286>
     330:	c9 01       	movw	r24, r18
     332:	aa 27       	eor	r26, r26
     334:	97 fd       	sbrc	r25, 7
     336:	a0 95       	com	r26
     338:	ba 2f       	mov	r27, r26
     33a:	81 70       	andi	r24, 0x01	; 1
     33c:	90 70       	andi	r25, 0x00	; 0
     33e:	a0 70       	andi	r26, 0x00	; 0
     340:	b0 70       	andi	r27, 0x00	; 0
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	37 95       	ror	r19
     348:	27 95       	ror	r18
     34a:	82 2b       	or	r24, r18
     34c:	93 2b       	or	r25, r19
     34e:	a4 2b       	or	r26, r20
     350:	b5 2b       	or	r27, r21
     352:	84 83       	std	Z+4, r24	; 0x04
     354:	95 83       	std	Z+5, r25	; 0x05
     356:	a6 83       	std	Z+6, r26	; 0x06
     358:	b7 83       	std	Z+7, r27	; 0x07
     35a:	82 81       	ldd	r24, Z+2	; 0x02
     35c:	93 81       	ldd	r25, Z+3	; 0x03
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	93 83       	std	Z+3, r25	; 0x03
     362:	82 83       	std	Z+2, r24	; 0x02
     364:	df 01       	movw	r26, r30
     366:	01 c0       	rjmp	.+2      	; 0x36a <_fpadd_parts+0x28c>
     368:	d2 01       	movw	r26, r4
     36a:	cd 01       	movw	r24, r26
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	e2 e1       	ldi	r30, 0x12	; 18
     372:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__>

00000376 <__subsf3>:
     376:	a0 e2       	ldi	r26, 0x20	; 32
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e1 ec       	ldi	r30, 0xC1	; 193
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__+0x18>
     382:	69 83       	std	Y+1, r22	; 0x01
     384:	7a 83       	std	Y+2, r23	; 0x02
     386:	8b 83       	std	Y+3, r24	; 0x03
     388:	9c 83       	std	Y+4, r25	; 0x04
     38a:	2d 83       	std	Y+5, r18	; 0x05
     38c:	3e 83       	std	Y+6, r19	; 0x06
     38e:	4f 83       	std	Y+7, r20	; 0x07
     390:	58 87       	std	Y+8, r21	; 0x08
     392:	e9 e0       	ldi	r30, 0x09	; 9
     394:	ee 2e       	mov	r14, r30
     396:	f1 2c       	mov	r15, r1
     398:	ec 0e       	add	r14, r28
     39a:	fd 1e       	adc	r15, r29
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	b7 01       	movw	r22, r14
     3a2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     3a6:	8e 01       	movw	r16, r28
     3a8:	0f 5e       	subi	r16, 0xEF	; 239
     3aa:	1f 4f       	sbci	r17, 0xFF	; 255
     3ac:	ce 01       	movw	r24, r28
     3ae:	05 96       	adiw	r24, 0x05	; 5
     3b0:	b8 01       	movw	r22, r16
     3b2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     3b6:	8a 89       	ldd	r24, Y+18	; 0x12
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	89 27       	eor	r24, r25
     3bc:	8a 8b       	std	Y+18, r24	; 0x12
     3be:	c7 01       	movw	r24, r14
     3c0:	b8 01       	movw	r22, r16
     3c2:	ae 01       	movw	r20, r28
     3c4:	47 5e       	subi	r20, 0xE7	; 231
     3c6:	5f 4f       	sbci	r21, 0xFF	; 255
     3c8:	0e 94 6f 00 	call	0xde	; 0xde <_fpadd_parts>
     3cc:	0e 94 a3 04 	call	0x946	; 0x946 <__pack_f>
     3d0:	a0 96       	adiw	r28, 0x20	; 32
     3d2:	e6 e0       	ldi	r30, 0x06	; 6
     3d4:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__+0x18>

000003d8 <__addsf3>:
     3d8:	a0 e2       	ldi	r26, 0x20	; 32
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	e2 ef       	ldi	r30, 0xF2	; 242
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__+0x18>
     3e4:	69 83       	std	Y+1, r22	; 0x01
     3e6:	7a 83       	std	Y+2, r23	; 0x02
     3e8:	8b 83       	std	Y+3, r24	; 0x03
     3ea:	9c 83       	std	Y+4, r25	; 0x04
     3ec:	2d 83       	std	Y+5, r18	; 0x05
     3ee:	3e 83       	std	Y+6, r19	; 0x06
     3f0:	4f 83       	std	Y+7, r20	; 0x07
     3f2:	58 87       	std	Y+8, r21	; 0x08
     3f4:	f9 e0       	ldi	r31, 0x09	; 9
     3f6:	ef 2e       	mov	r14, r31
     3f8:	f1 2c       	mov	r15, r1
     3fa:	ec 0e       	add	r14, r28
     3fc:	fd 1e       	adc	r15, r29
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	b7 01       	movw	r22, r14
     404:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     408:	8e 01       	movw	r16, r28
     40a:	0f 5e       	subi	r16, 0xEF	; 239
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
     40e:	ce 01       	movw	r24, r28
     410:	05 96       	adiw	r24, 0x05	; 5
     412:	b8 01       	movw	r22, r16
     414:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     418:	c7 01       	movw	r24, r14
     41a:	b8 01       	movw	r22, r16
     41c:	ae 01       	movw	r20, r28
     41e:	47 5e       	subi	r20, 0xE7	; 231
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	0e 94 6f 00 	call	0xde	; 0xde <_fpadd_parts>
     426:	0e 94 a3 04 	call	0x946	; 0x946 <__pack_f>
     42a:	a0 96       	adiw	r28, 0x20	; 32
     42c:	e6 e0       	ldi	r30, 0x06	; 6
     42e:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__+0x18>

00000432 <__mulsf3>:
     432:	a0 e2       	ldi	r26, 0x20	; 32
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	ef e1       	ldi	r30, 0x1F	; 31
     438:	f2 e0       	ldi	r31, 0x02	; 2
     43a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__>
     43e:	69 83       	std	Y+1, r22	; 0x01
     440:	7a 83       	std	Y+2, r23	; 0x02
     442:	8b 83       	std	Y+3, r24	; 0x03
     444:	9c 83       	std	Y+4, r25	; 0x04
     446:	2d 83       	std	Y+5, r18	; 0x05
     448:	3e 83       	std	Y+6, r19	; 0x06
     44a:	4f 83       	std	Y+7, r20	; 0x07
     44c:	58 87       	std	Y+8, r21	; 0x08
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	be 01       	movw	r22, r28
     454:	67 5f       	subi	r22, 0xF7	; 247
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     45c:	ce 01       	movw	r24, r28
     45e:	05 96       	adiw	r24, 0x05	; 5
     460:	be 01       	movw	r22, r28
     462:	6f 5e       	subi	r22, 0xEF	; 239
     464:	7f 4f       	sbci	r23, 0xFF	; 255
     466:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     46a:	99 85       	ldd	r25, Y+9	; 0x09
     46c:	92 30       	cpi	r25, 0x02	; 2
     46e:	88 f0       	brcs	.+34     	; 0x492 <__mulsf3+0x60>
     470:	89 89       	ldd	r24, Y+17	; 0x11
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	c8 f0       	brcs	.+50     	; 0x4a8 <__mulsf3+0x76>
     476:	94 30       	cpi	r25, 0x04	; 4
     478:	19 f4       	brne	.+6      	; 0x480 <__mulsf3+0x4e>
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	51 f4       	brne	.+20     	; 0x492 <__mulsf3+0x60>
     47e:	04 c0       	rjmp	.+8      	; 0x488 <__mulsf3+0x56>
     480:	84 30       	cpi	r24, 0x04	; 4
     482:	29 f4       	brne	.+10     	; 0x48e <__mulsf3+0x5c>
     484:	92 30       	cpi	r25, 0x02	; 2
     486:	81 f4       	brne	.+32     	; 0x4a8 <__mulsf3+0x76>
     488:	8a ea       	ldi	r24, 0xAA	; 170
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	c6 c0       	rjmp	.+396    	; 0x61a <__mulsf3+0x1e8>
     48e:	92 30       	cpi	r25, 0x02	; 2
     490:	49 f4       	brne	.+18     	; 0x4a4 <__mulsf3+0x72>
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	9a 85       	ldd	r25, Y+10	; 0x0a
     496:	8a 89       	ldd	r24, Y+18	; 0x12
     498:	98 13       	cpse	r25, r24
     49a:	21 e0       	ldi	r18, 0x01	; 1
     49c:	2a 87       	std	Y+10, r18	; 0x0a
     49e:	ce 01       	movw	r24, r28
     4a0:	09 96       	adiw	r24, 0x09	; 9
     4a2:	bb c0       	rjmp	.+374    	; 0x61a <__mulsf3+0x1e8>
     4a4:	82 30       	cpi	r24, 0x02	; 2
     4a6:	49 f4       	brne	.+18     	; 0x4ba <__mulsf3+0x88>
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ac:	8a 89       	ldd	r24, Y+18	; 0x12
     4ae:	98 13       	cpse	r25, r24
     4b0:	21 e0       	ldi	r18, 0x01	; 1
     4b2:	2a 8b       	std	Y+18, r18	; 0x12
     4b4:	ce 01       	movw	r24, r28
     4b6:	41 96       	adiw	r24, 0x11	; 17
     4b8:	b0 c0       	rjmp	.+352    	; 0x61a <__mulsf3+0x1e8>
     4ba:	2d 84       	ldd	r2, Y+13	; 0x0d
     4bc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4be:	4f 84       	ldd	r4, Y+15	; 0x0f
     4c0:	58 88       	ldd	r5, Y+16	; 0x10
     4c2:	6d 88       	ldd	r6, Y+21	; 0x15
     4c4:	7e 88       	ldd	r7, Y+22	; 0x16
     4c6:	8f 88       	ldd	r8, Y+23	; 0x17
     4c8:	98 8c       	ldd	r9, Y+24	; 0x18
     4ca:	ee 24       	eor	r14, r14
     4cc:	ff 24       	eor	r15, r15
     4ce:	87 01       	movw	r16, r14
     4d0:	aa 24       	eor	r10, r10
     4d2:	bb 24       	eor	r11, r11
     4d4:	65 01       	movw	r12, r10
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	e0 e0       	ldi	r30, 0x00	; 0
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	c1 01       	movw	r24, r2
     4e4:	81 70       	andi	r24, 0x01	; 1
     4e6:	90 70       	andi	r25, 0x00	; 0
     4e8:	89 2b       	or	r24, r25
     4ea:	e9 f0       	breq	.+58     	; 0x526 <__mulsf3+0xf4>
     4ec:	e6 0c       	add	r14, r6
     4ee:	f7 1c       	adc	r15, r7
     4f0:	08 1d       	adc	r16, r8
     4f2:	19 1d       	adc	r17, r9
     4f4:	9a 01       	movw	r18, r20
     4f6:	ab 01       	movw	r20, r22
     4f8:	2a 0d       	add	r18, r10
     4fa:	3b 1d       	adc	r19, r11
     4fc:	4c 1d       	adc	r20, r12
     4fe:	5d 1d       	adc	r21, r13
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a0 e0       	ldi	r26, 0x00	; 0
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	e6 14       	cp	r14, r6
     50a:	f7 04       	cpc	r15, r7
     50c:	08 05       	cpc	r16, r8
     50e:	19 05       	cpc	r17, r9
     510:	20 f4       	brcc	.+8      	; 0x51a <__mulsf3+0xe8>
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	a0 e0       	ldi	r26, 0x00	; 0
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	ba 01       	movw	r22, r20
     51c:	a9 01       	movw	r20, r18
     51e:	48 0f       	add	r20, r24
     520:	59 1f       	adc	r21, r25
     522:	6a 1f       	adc	r22, r26
     524:	7b 1f       	adc	r23, r27
     526:	aa 0c       	add	r10, r10
     528:	bb 1c       	adc	r11, r11
     52a:	cc 1c       	adc	r12, r12
     52c:	dd 1c       	adc	r13, r13
     52e:	97 fe       	sbrs	r9, 7
     530:	08 c0       	rjmp	.+16     	; 0x542 <__mulsf3+0x110>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	a8 2a       	or	r10, r24
     53c:	b9 2a       	or	r11, r25
     53e:	ca 2a       	or	r12, r26
     540:	db 2a       	or	r13, r27
     542:	31 96       	adiw	r30, 0x01	; 1
     544:	e0 32       	cpi	r30, 0x20	; 32
     546:	f1 05       	cpc	r31, r1
     548:	49 f0       	breq	.+18     	; 0x55c <__mulsf3+0x12a>
     54a:	66 0c       	add	r6, r6
     54c:	77 1c       	adc	r7, r7
     54e:	88 1c       	adc	r8, r8
     550:	99 1c       	adc	r9, r9
     552:	56 94       	lsr	r5
     554:	47 94       	ror	r4
     556:	37 94       	ror	r3
     558:	27 94       	ror	r2
     55a:	c3 cf       	rjmp	.-122    	; 0x4e2 <__mulsf3+0xb0>
     55c:	fa 85       	ldd	r31, Y+10	; 0x0a
     55e:	ea 89       	ldd	r30, Y+18	; 0x12
     560:	2b 89       	ldd	r18, Y+19	; 0x13
     562:	3c 89       	ldd	r19, Y+20	; 0x14
     564:	8b 85       	ldd	r24, Y+11	; 0x0b
     566:	9c 85       	ldd	r25, Y+12	; 0x0c
     568:	28 0f       	add	r18, r24
     56a:	39 1f       	adc	r19, r25
     56c:	2e 5f       	subi	r18, 0xFE	; 254
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	17 c0       	rjmp	.+46     	; 0x5a0 <__mulsf3+0x16e>
     572:	ca 01       	movw	r24, r20
     574:	81 70       	andi	r24, 0x01	; 1
     576:	90 70       	andi	r25, 0x00	; 0
     578:	89 2b       	or	r24, r25
     57a:	61 f0       	breq	.+24     	; 0x594 <__mulsf3+0x162>
     57c:	16 95       	lsr	r17
     57e:	07 95       	ror	r16
     580:	f7 94       	ror	r15
     582:	e7 94       	ror	r14
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	a0 e0       	ldi	r26, 0x00	; 0
     58a:	b0 e8       	ldi	r27, 0x80	; 128
     58c:	e8 2a       	or	r14, r24
     58e:	f9 2a       	or	r15, r25
     590:	0a 2b       	or	r16, r26
     592:	1b 2b       	or	r17, r27
     594:	76 95       	lsr	r23
     596:	67 95       	ror	r22
     598:	57 95       	ror	r21
     59a:	47 95       	ror	r20
     59c:	2f 5f       	subi	r18, 0xFF	; 255
     59e:	3f 4f       	sbci	r19, 0xFF	; 255
     5a0:	77 fd       	sbrc	r23, 7
     5a2:	e7 cf       	rjmp	.-50     	; 0x572 <__mulsf3+0x140>
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <__mulsf3+0x18c>
     5a6:	44 0f       	add	r20, r20
     5a8:	55 1f       	adc	r21, r21
     5aa:	66 1f       	adc	r22, r22
     5ac:	77 1f       	adc	r23, r23
     5ae:	17 fd       	sbrc	r17, 7
     5b0:	41 60       	ori	r20, 0x01	; 1
     5b2:	ee 0c       	add	r14, r14
     5b4:	ff 1c       	adc	r15, r15
     5b6:	00 1f       	adc	r16, r16
     5b8:	11 1f       	adc	r17, r17
     5ba:	21 50       	subi	r18, 0x01	; 1
     5bc:	30 40       	sbci	r19, 0x00	; 0
     5be:	40 30       	cpi	r20, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	59 07       	cpc	r21, r25
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	69 07       	cpc	r22, r25
     5c8:	90 e4       	ldi	r25, 0x40	; 64
     5ca:	79 07       	cpc	r23, r25
     5cc:	60 f3       	brcs	.-40     	; 0x5a6 <__mulsf3+0x174>
     5ce:	2b 8f       	std	Y+27, r18	; 0x1b
     5d0:	3c 8f       	std	Y+28, r19	; 0x1c
     5d2:	db 01       	movw	r26, r22
     5d4:	ca 01       	movw	r24, r20
     5d6:	8f 77       	andi	r24, 0x7F	; 127
     5d8:	90 70       	andi	r25, 0x00	; 0
     5da:	a0 70       	andi	r26, 0x00	; 0
     5dc:	b0 70       	andi	r27, 0x00	; 0
     5de:	80 34       	cpi	r24, 0x40	; 64
     5e0:	91 05       	cpc	r25, r1
     5e2:	a1 05       	cpc	r26, r1
     5e4:	b1 05       	cpc	r27, r1
     5e6:	61 f4       	brne	.+24     	; 0x600 <__mulsf3+0x1ce>
     5e8:	47 fd       	sbrc	r20, 7
     5ea:	0a c0       	rjmp	.+20     	; 0x600 <__mulsf3+0x1ce>
     5ec:	e1 14       	cp	r14, r1
     5ee:	f1 04       	cpc	r15, r1
     5f0:	01 05       	cpc	r16, r1
     5f2:	11 05       	cpc	r17, r1
     5f4:	29 f0       	breq	.+10     	; 0x600 <__mulsf3+0x1ce>
     5f6:	40 5c       	subi	r20, 0xC0	; 192
     5f8:	5f 4f       	sbci	r21, 0xFF	; 255
     5fa:	6f 4f       	sbci	r22, 0xFF	; 255
     5fc:	7f 4f       	sbci	r23, 0xFF	; 255
     5fe:	40 78       	andi	r20, 0x80	; 128
     600:	1a 8e       	std	Y+26, r1	; 0x1a
     602:	fe 17       	cp	r31, r30
     604:	11 f0       	breq	.+4      	; 0x60a <__mulsf3+0x1d8>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	8a 8f       	std	Y+26, r24	; 0x1a
     60a:	4d 8f       	std	Y+29, r20	; 0x1d
     60c:	5e 8f       	std	Y+30, r21	; 0x1e
     60e:	6f 8f       	std	Y+31, r22	; 0x1f
     610:	78 a3       	std	Y+32, r23	; 0x20
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	89 8f       	std	Y+25, r24	; 0x19
     616:	ce 01       	movw	r24, r28
     618:	49 96       	adiw	r24, 0x19	; 25
     61a:	0e 94 a3 04 	call	0x946	; 0x946 <__pack_f>
     61e:	a0 96       	adiw	r28, 0x20	; 32
     620:	e2 e1       	ldi	r30, 0x12	; 18
     622:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__>

00000626 <__divsf3>:
     626:	a8 e1       	ldi	r26, 0x18	; 24
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	e9 e1       	ldi	r30, 0x19	; 25
     62c:	f3 e0       	ldi	r31, 0x03	; 3
     62e:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__prologue_saves__+0x10>
     632:	69 83       	std	Y+1, r22	; 0x01
     634:	7a 83       	std	Y+2, r23	; 0x02
     636:	8b 83       	std	Y+3, r24	; 0x03
     638:	9c 83       	std	Y+4, r25	; 0x04
     63a:	2d 83       	std	Y+5, r18	; 0x05
     63c:	3e 83       	std	Y+6, r19	; 0x06
     63e:	4f 83       	std	Y+7, r20	; 0x07
     640:	58 87       	std	Y+8, r21	; 0x08
     642:	b9 e0       	ldi	r27, 0x09	; 9
     644:	eb 2e       	mov	r14, r27
     646:	f1 2c       	mov	r15, r1
     648:	ec 0e       	add	r14, r28
     64a:	fd 1e       	adc	r15, r29
     64c:	ce 01       	movw	r24, r28
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	b7 01       	movw	r22, r14
     652:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     656:	8e 01       	movw	r16, r28
     658:	0f 5e       	subi	r16, 0xEF	; 239
     65a:	1f 4f       	sbci	r17, 0xFF	; 255
     65c:	ce 01       	movw	r24, r28
     65e:	05 96       	adiw	r24, 0x05	; 5
     660:	b8 01       	movw	r22, r16
     662:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     666:	29 85       	ldd	r18, Y+9	; 0x09
     668:	22 30       	cpi	r18, 0x02	; 2
     66a:	08 f4       	brcc	.+2      	; 0x66e <__divsf3+0x48>
     66c:	7e c0       	rjmp	.+252    	; 0x76a <__divsf3+0x144>
     66e:	39 89       	ldd	r19, Y+17	; 0x11
     670:	32 30       	cpi	r19, 0x02	; 2
     672:	10 f4       	brcc	.+4      	; 0x678 <__divsf3+0x52>
     674:	b8 01       	movw	r22, r16
     676:	7c c0       	rjmp	.+248    	; 0x770 <__divsf3+0x14a>
     678:	8a 85       	ldd	r24, Y+10	; 0x0a
     67a:	9a 89       	ldd	r25, Y+18	; 0x12
     67c:	89 27       	eor	r24, r25
     67e:	8a 87       	std	Y+10, r24	; 0x0a
     680:	24 30       	cpi	r18, 0x04	; 4
     682:	11 f0       	breq	.+4      	; 0x688 <__divsf3+0x62>
     684:	22 30       	cpi	r18, 0x02	; 2
     686:	31 f4       	brne	.+12     	; 0x694 <__divsf3+0x6e>
     688:	23 17       	cp	r18, r19
     68a:	09 f0       	breq	.+2      	; 0x68e <__divsf3+0x68>
     68c:	6e c0       	rjmp	.+220    	; 0x76a <__divsf3+0x144>
     68e:	6a ea       	ldi	r22, 0xAA	; 170
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	6e c0       	rjmp	.+220    	; 0x770 <__divsf3+0x14a>
     694:	34 30       	cpi	r19, 0x04	; 4
     696:	39 f4       	brne	.+14     	; 0x6a6 <__divsf3+0x80>
     698:	1d 86       	std	Y+13, r1	; 0x0d
     69a:	1e 86       	std	Y+14, r1	; 0x0e
     69c:	1f 86       	std	Y+15, r1	; 0x0f
     69e:	18 8a       	std	Y+16, r1	; 0x10
     6a0:	1c 86       	std	Y+12, r1	; 0x0c
     6a2:	1b 86       	std	Y+11, r1	; 0x0b
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <__divsf3+0x88>
     6a6:	32 30       	cpi	r19, 0x02	; 2
     6a8:	21 f4       	brne	.+8      	; 0x6b2 <__divsf3+0x8c>
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	89 87       	std	Y+9, r24	; 0x09
     6ae:	b7 01       	movw	r22, r14
     6b0:	5f c0       	rjmp	.+190    	; 0x770 <__divsf3+0x14a>
     6b2:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b4:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b6:	8b 89       	ldd	r24, Y+19	; 0x13
     6b8:	9c 89       	ldd	r25, Y+20	; 0x14
     6ba:	28 1b       	sub	r18, r24
     6bc:	39 0b       	sbc	r19, r25
     6be:	3c 87       	std	Y+12, r19	; 0x0c
     6c0:	2b 87       	std	Y+11, r18	; 0x0b
     6c2:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c4:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c6:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c8:	18 89       	ldd	r17, Y+16	; 0x10
     6ca:	ad 88       	ldd	r10, Y+21	; 0x15
     6cc:	be 88       	ldd	r11, Y+22	; 0x16
     6ce:	cf 88       	ldd	r12, Y+23	; 0x17
     6d0:	d8 8c       	ldd	r13, Y+24	; 0x18
     6d2:	ea 14       	cp	r14, r10
     6d4:	fb 04       	cpc	r15, r11
     6d6:	0c 05       	cpc	r16, r12
     6d8:	1d 05       	cpc	r17, r13
     6da:	40 f4       	brcc	.+16     	; 0x6ec <__divsf3+0xc6>
     6dc:	ee 0c       	add	r14, r14
     6de:	ff 1c       	adc	r15, r15
     6e0:	00 1f       	adc	r16, r16
     6e2:	11 1f       	adc	r17, r17
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	30 40       	sbci	r19, 0x00	; 0
     6e8:	3c 87       	std	Y+12, r19	; 0x0c
     6ea:	2b 87       	std	Y+11, r18	; 0x0b
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	50 e0       	ldi	r21, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	b0 e4       	ldi	r27, 0x40	; 64
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	ea 14       	cp	r14, r10
     702:	fb 04       	cpc	r15, r11
     704:	0c 05       	cpc	r16, r12
     706:	1d 05       	cpc	r17, r13
     708:	40 f0       	brcs	.+16     	; 0x71a <__divsf3+0xf4>
     70a:	28 2b       	or	r18, r24
     70c:	39 2b       	or	r19, r25
     70e:	4a 2b       	or	r20, r26
     710:	5b 2b       	or	r21, r27
     712:	ea 18       	sub	r14, r10
     714:	fb 08       	sbc	r15, r11
     716:	0c 09       	sbc	r16, r12
     718:	1d 09       	sbc	r17, r13
     71a:	b6 95       	lsr	r27
     71c:	a7 95       	ror	r26
     71e:	97 95       	ror	r25
     720:	87 95       	ror	r24
     722:	ee 0c       	add	r14, r14
     724:	ff 1c       	adc	r15, r15
     726:	00 1f       	adc	r16, r16
     728:	11 1f       	adc	r17, r17
     72a:	6f 5f       	subi	r22, 0xFF	; 255
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	6f 31       	cpi	r22, 0x1F	; 31
     730:	71 05       	cpc	r23, r1
     732:	31 f7       	brne	.-52     	; 0x700 <__divsf3+0xda>
     734:	da 01       	movw	r26, r20
     736:	c9 01       	movw	r24, r18
     738:	8f 77       	andi	r24, 0x7F	; 127
     73a:	90 70       	andi	r25, 0x00	; 0
     73c:	a0 70       	andi	r26, 0x00	; 0
     73e:	b0 70       	andi	r27, 0x00	; 0
     740:	80 34       	cpi	r24, 0x40	; 64
     742:	91 05       	cpc	r25, r1
     744:	a1 05       	cpc	r26, r1
     746:	b1 05       	cpc	r27, r1
     748:	61 f4       	brne	.+24     	; 0x762 <__divsf3+0x13c>
     74a:	27 fd       	sbrc	r18, 7
     74c:	0a c0       	rjmp	.+20     	; 0x762 <__divsf3+0x13c>
     74e:	e1 14       	cp	r14, r1
     750:	f1 04       	cpc	r15, r1
     752:	01 05       	cpc	r16, r1
     754:	11 05       	cpc	r17, r1
     756:	29 f0       	breq	.+10     	; 0x762 <__divsf3+0x13c>
     758:	20 5c       	subi	r18, 0xC0	; 192
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
     75c:	4f 4f       	sbci	r20, 0xFF	; 255
     75e:	5f 4f       	sbci	r21, 0xFF	; 255
     760:	20 78       	andi	r18, 0x80	; 128
     762:	2d 87       	std	Y+13, r18	; 0x0d
     764:	3e 87       	std	Y+14, r19	; 0x0e
     766:	4f 87       	std	Y+15, r20	; 0x0f
     768:	58 8b       	std	Y+16, r21	; 0x10
     76a:	be 01       	movw	r22, r28
     76c:	67 5f       	subi	r22, 0xF7	; 247
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	cb 01       	movw	r24, r22
     772:	0e 94 a3 04 	call	0x946	; 0x946 <__pack_f>
     776:	68 96       	adiw	r28, 0x18	; 24
     778:	ea e0       	ldi	r30, 0x0A	; 10
     77a:	0c 94 97 18 	jmp	0x312e	; 0x312e <__epilogue_restores__+0x10>

0000077e <__gtsf2>:
     77e:	a8 e1       	ldi	r26, 0x18	; 24
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	e5 ec       	ldi	r30, 0xC5	; 197
     784:	f3 e0       	ldi	r31, 0x03	; 3
     786:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__+0x18>
     78a:	69 83       	std	Y+1, r22	; 0x01
     78c:	7a 83       	std	Y+2, r23	; 0x02
     78e:	8b 83       	std	Y+3, r24	; 0x03
     790:	9c 83       	std	Y+4, r25	; 0x04
     792:	2d 83       	std	Y+5, r18	; 0x05
     794:	3e 83       	std	Y+6, r19	; 0x06
     796:	4f 83       	std	Y+7, r20	; 0x07
     798:	58 87       	std	Y+8, r21	; 0x08
     79a:	89 e0       	ldi	r24, 0x09	; 9
     79c:	e8 2e       	mov	r14, r24
     79e:	f1 2c       	mov	r15, r1
     7a0:	ec 0e       	add	r14, r28
     7a2:	fd 1e       	adc	r15, r29
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	b7 01       	movw	r22, r14
     7aa:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     7ae:	8e 01       	movw	r16, r28
     7b0:	0f 5e       	subi	r16, 0xEF	; 239
     7b2:	1f 4f       	sbci	r17, 0xFF	; 255
     7b4:	ce 01       	movw	r24, r28
     7b6:	05 96       	adiw	r24, 0x05	; 5
     7b8:	b8 01       	movw	r22, r16
     7ba:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     7be:	89 85       	ldd	r24, Y+9	; 0x09
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	40 f0       	brcs	.+16     	; 0x7d4 <__gtsf2+0x56>
     7c4:	89 89       	ldd	r24, Y+17	; 0x11
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	28 f0       	brcs	.+10     	; 0x7d4 <__gtsf2+0x56>
     7ca:	c7 01       	movw	r24, r14
     7cc:	b8 01       	movw	r22, r16
     7ce:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fpcmp_parts_f>
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <__gtsf2+0x58>
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	68 96       	adiw	r28, 0x18	; 24
     7d8:	e6 e0       	ldi	r30, 0x06	; 6
     7da:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__+0x18>

000007de <__gesf2>:
     7de:	a8 e1       	ldi	r26, 0x18	; 24
     7e0:	b0 e0       	ldi	r27, 0x00	; 0
     7e2:	e5 ef       	ldi	r30, 0xF5	; 245
     7e4:	f3 e0       	ldi	r31, 0x03	; 3
     7e6:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__+0x18>
     7ea:	69 83       	std	Y+1, r22	; 0x01
     7ec:	7a 83       	std	Y+2, r23	; 0x02
     7ee:	8b 83       	std	Y+3, r24	; 0x03
     7f0:	9c 83       	std	Y+4, r25	; 0x04
     7f2:	2d 83       	std	Y+5, r18	; 0x05
     7f4:	3e 83       	std	Y+6, r19	; 0x06
     7f6:	4f 83       	std	Y+7, r20	; 0x07
     7f8:	58 87       	std	Y+8, r21	; 0x08
     7fa:	89 e0       	ldi	r24, 0x09	; 9
     7fc:	e8 2e       	mov	r14, r24
     7fe:	f1 2c       	mov	r15, r1
     800:	ec 0e       	add	r14, r28
     802:	fd 1e       	adc	r15, r29
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	b7 01       	movw	r22, r14
     80a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     80e:	8e 01       	movw	r16, r28
     810:	0f 5e       	subi	r16, 0xEF	; 239
     812:	1f 4f       	sbci	r17, 0xFF	; 255
     814:	ce 01       	movw	r24, r28
     816:	05 96       	adiw	r24, 0x05	; 5
     818:	b8 01       	movw	r22, r16
     81a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     81e:	89 85       	ldd	r24, Y+9	; 0x09
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	40 f0       	brcs	.+16     	; 0x834 <__gesf2+0x56>
     824:	89 89       	ldd	r24, Y+17	; 0x11
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	28 f0       	brcs	.+10     	; 0x834 <__gesf2+0x56>
     82a:	c7 01       	movw	r24, r14
     82c:	b8 01       	movw	r22, r16
     82e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fpcmp_parts_f>
     832:	01 c0       	rjmp	.+2      	; 0x836 <__gesf2+0x58>
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	68 96       	adiw	r28, 0x18	; 24
     838:	e6 e0       	ldi	r30, 0x06	; 6
     83a:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__+0x18>

0000083e <__ltsf2>:
     83e:	a8 e1       	ldi	r26, 0x18	; 24
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	e5 e2       	ldi	r30, 0x25	; 37
     844:	f4 e0       	ldi	r31, 0x04	; 4
     846:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__+0x18>
     84a:	69 83       	std	Y+1, r22	; 0x01
     84c:	7a 83       	std	Y+2, r23	; 0x02
     84e:	8b 83       	std	Y+3, r24	; 0x03
     850:	9c 83       	std	Y+4, r25	; 0x04
     852:	2d 83       	std	Y+5, r18	; 0x05
     854:	3e 83       	std	Y+6, r19	; 0x06
     856:	4f 83       	std	Y+7, r20	; 0x07
     858:	58 87       	std	Y+8, r21	; 0x08
     85a:	89 e0       	ldi	r24, 0x09	; 9
     85c:	e8 2e       	mov	r14, r24
     85e:	f1 2c       	mov	r15, r1
     860:	ec 0e       	add	r14, r28
     862:	fd 1e       	adc	r15, r29
     864:	ce 01       	movw	r24, r28
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	b7 01       	movw	r22, r14
     86a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     86e:	8e 01       	movw	r16, r28
     870:	0f 5e       	subi	r16, 0xEF	; 239
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	ce 01       	movw	r24, r28
     876:	05 96       	adiw	r24, 0x05	; 5
     878:	b8 01       	movw	r22, r16
     87a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     87e:	89 85       	ldd	r24, Y+9	; 0x09
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	40 f0       	brcs	.+16     	; 0x894 <__stack+0x35>
     884:	89 89       	ldd	r24, Y+17	; 0x11
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	28 f0       	brcs	.+10     	; 0x894 <__stack+0x35>
     88a:	c7 01       	movw	r24, r14
     88c:	b8 01       	movw	r22, r16
     88e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fpcmp_parts_f>
     892:	01 c0       	rjmp	.+2      	; 0x896 <__stack+0x37>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	68 96       	adiw	r28, 0x18	; 24
     898:	e6 e0       	ldi	r30, 0x06	; 6
     89a:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__+0x18>

0000089e <__fixsfsi>:
     89e:	ac e0       	ldi	r26, 0x0C	; 12
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	e5 e5       	ldi	r30, 0x55	; 85
     8a4:	f4 e0       	ldi	r31, 0x04	; 4
     8a6:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__prologue_saves__+0x20>
     8aa:	69 83       	std	Y+1, r22	; 0x01
     8ac:	7a 83       	std	Y+2, r23	; 0x02
     8ae:	8b 83       	std	Y+3, r24	; 0x03
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	be 01       	movw	r22, r28
     8b8:	6b 5f       	subi	r22, 0xFB	; 251
     8ba:	7f 4f       	sbci	r23, 0xFF	; 255
     8bc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__unpack_f>
     8c0:	8d 81       	ldd	r24, Y+5	; 0x05
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	61 f1       	breq	.+88     	; 0x91e <__fixsfsi+0x80>
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	50 f1       	brcs	.+84     	; 0x91e <__fixsfsi+0x80>
     8ca:	84 30       	cpi	r24, 0x04	; 4
     8cc:	21 f4       	brne	.+8      	; 0x8d6 <__fixsfsi+0x38>
     8ce:	8e 81       	ldd	r24, Y+6	; 0x06
     8d0:	88 23       	and	r24, r24
     8d2:	51 f1       	breq	.+84     	; 0x928 <__fixsfsi+0x8a>
     8d4:	2e c0       	rjmp	.+92     	; 0x932 <__fixsfsi+0x94>
     8d6:	2f 81       	ldd	r18, Y+7	; 0x07
     8d8:	38 85       	ldd	r19, Y+8	; 0x08
     8da:	37 fd       	sbrc	r19, 7
     8dc:	20 c0       	rjmp	.+64     	; 0x91e <__fixsfsi+0x80>
     8de:	6e 81       	ldd	r22, Y+6	; 0x06
     8e0:	2f 31       	cpi	r18, 0x1F	; 31
     8e2:	31 05       	cpc	r19, r1
     8e4:	1c f0       	brlt	.+6      	; 0x8ec <__fixsfsi+0x4e>
     8e6:	66 23       	and	r22, r22
     8e8:	f9 f0       	breq	.+62     	; 0x928 <__fixsfsi+0x8a>
     8ea:	23 c0       	rjmp	.+70     	; 0x932 <__fixsfsi+0x94>
     8ec:	8e e1       	ldi	r24, 0x1E	; 30
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	82 1b       	sub	r24, r18
     8f2:	93 0b       	sbc	r25, r19
     8f4:	29 85       	ldd	r18, Y+9	; 0x09
     8f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8fa:	5c 85       	ldd	r21, Y+12	; 0x0c
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <__fixsfsi+0x68>
     8fe:	56 95       	lsr	r21
     900:	47 95       	ror	r20
     902:	37 95       	ror	r19
     904:	27 95       	ror	r18
     906:	8a 95       	dec	r24
     908:	d2 f7       	brpl	.-12     	; 0x8fe <__fixsfsi+0x60>
     90a:	66 23       	and	r22, r22
     90c:	b1 f0       	breq	.+44     	; 0x93a <__fixsfsi+0x9c>
     90e:	50 95       	com	r21
     910:	40 95       	com	r20
     912:	30 95       	com	r19
     914:	21 95       	neg	r18
     916:	3f 4f       	sbci	r19, 0xFF	; 255
     918:	4f 4f       	sbci	r20, 0xFF	; 255
     91a:	5f 4f       	sbci	r21, 0xFF	; 255
     91c:	0e c0       	rjmp	.+28     	; 0x93a <__fixsfsi+0x9c>
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	09 c0       	rjmp	.+18     	; 0x93a <__fixsfsi+0x9c>
     928:	2f ef       	ldi	r18, 0xFF	; 255
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	4f ef       	ldi	r20, 0xFF	; 255
     92e:	5f e7       	ldi	r21, 0x7F	; 127
     930:	04 c0       	rjmp	.+8      	; 0x93a <__fixsfsi+0x9c>
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e8       	ldi	r21, 0x80	; 128
     93a:	b9 01       	movw	r22, r18
     93c:	ca 01       	movw	r24, r20
     93e:	2c 96       	adiw	r28, 0x0c	; 12
     940:	e2 e0       	ldi	r30, 0x02	; 2
     942:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__epilogue_restores__+0x20>

00000946 <__pack_f>:
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	fc 01       	movw	r30, r24
     952:	e4 80       	ldd	r14, Z+4	; 0x04
     954:	f5 80       	ldd	r15, Z+5	; 0x05
     956:	06 81       	ldd	r16, Z+6	; 0x06
     958:	17 81       	ldd	r17, Z+7	; 0x07
     95a:	d1 80       	ldd	r13, Z+1	; 0x01
     95c:	80 81       	ld	r24, Z
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	48 f4       	brcc	.+18     	; 0x974 <__pack_f+0x2e>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	a0 e1       	ldi	r26, 0x10	; 16
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e8 2a       	or	r14, r24
     96c:	f9 2a       	or	r15, r25
     96e:	0a 2b       	or	r16, r26
     970:	1b 2b       	or	r17, r27
     972:	a5 c0       	rjmp	.+330    	; 0xabe <__pack_f+0x178>
     974:	84 30       	cpi	r24, 0x04	; 4
     976:	09 f4       	brne	.+2      	; 0x97a <__pack_f+0x34>
     978:	9f c0       	rjmp	.+318    	; 0xab8 <__pack_f+0x172>
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	21 f4       	brne	.+8      	; 0x986 <__pack_f+0x40>
     97e:	ee 24       	eor	r14, r14
     980:	ff 24       	eor	r15, r15
     982:	87 01       	movw	r16, r14
     984:	05 c0       	rjmp	.+10     	; 0x990 <__pack_f+0x4a>
     986:	e1 14       	cp	r14, r1
     988:	f1 04       	cpc	r15, r1
     98a:	01 05       	cpc	r16, r1
     98c:	11 05       	cpc	r17, r1
     98e:	19 f4       	brne	.+6      	; 0x996 <__pack_f+0x50>
     990:	e0 e0       	ldi	r30, 0x00	; 0
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	96 c0       	rjmp	.+300    	; 0xac2 <__pack_f+0x17c>
     996:	62 81       	ldd	r22, Z+2	; 0x02
     998:	73 81       	ldd	r23, Z+3	; 0x03
     99a:	9f ef       	ldi	r25, 0xFF	; 255
     99c:	62 38       	cpi	r22, 0x82	; 130
     99e:	79 07       	cpc	r23, r25
     9a0:	0c f0       	brlt	.+2      	; 0x9a4 <__pack_f+0x5e>
     9a2:	5b c0       	rjmp	.+182    	; 0xa5a <__pack_f+0x114>
     9a4:	22 e8       	ldi	r18, 0x82	; 130
     9a6:	3f ef       	ldi	r19, 0xFF	; 255
     9a8:	26 1b       	sub	r18, r22
     9aa:	37 0b       	sbc	r19, r23
     9ac:	2a 31       	cpi	r18, 0x1A	; 26
     9ae:	31 05       	cpc	r19, r1
     9b0:	2c f0       	brlt	.+10     	; 0x9bc <__pack_f+0x76>
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	2a c0       	rjmp	.+84     	; 0xa10 <__pack_f+0xca>
     9bc:	b8 01       	movw	r22, r16
     9be:	a7 01       	movw	r20, r14
     9c0:	02 2e       	mov	r0, r18
     9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__pack_f+0x86>
     9c4:	76 95       	lsr	r23
     9c6:	67 95       	ror	r22
     9c8:	57 95       	ror	r21
     9ca:	47 95       	ror	r20
     9cc:	0a 94       	dec	r0
     9ce:	d2 f7       	brpl	.-12     	; 0x9c4 <__pack_f+0x7e>
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a0 e0       	ldi	r26, 0x00	; 0
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__pack_f+0x9c>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	aa 1f       	adc	r26, r26
     9e0:	bb 1f       	adc	r27, r27
     9e2:	2a 95       	dec	r18
     9e4:	d2 f7       	brpl	.-12     	; 0x9da <__pack_f+0x94>
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	a1 09       	sbc	r26, r1
     9ea:	b1 09       	sbc	r27, r1
     9ec:	8e 21       	and	r24, r14
     9ee:	9f 21       	and	r25, r15
     9f0:	a0 23       	and	r26, r16
     9f2:	b1 23       	and	r27, r17
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	a1 05       	cpc	r26, r1
     9f8:	b1 05       	cpc	r27, r1
     9fa:	21 f0       	breq	.+8      	; 0xa04 <__pack_f+0xbe>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a0 e0       	ldi	r26, 0x00	; 0
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	9a 01       	movw	r18, r20
     a06:	ab 01       	movw	r20, r22
     a08:	28 2b       	or	r18, r24
     a0a:	39 2b       	or	r19, r25
     a0c:	4a 2b       	or	r20, r26
     a0e:	5b 2b       	or	r21, r27
     a10:	da 01       	movw	r26, r20
     a12:	c9 01       	movw	r24, r18
     a14:	8f 77       	andi	r24, 0x7F	; 127
     a16:	90 70       	andi	r25, 0x00	; 0
     a18:	a0 70       	andi	r26, 0x00	; 0
     a1a:	b0 70       	andi	r27, 0x00	; 0
     a1c:	80 34       	cpi	r24, 0x40	; 64
     a1e:	91 05       	cpc	r25, r1
     a20:	a1 05       	cpc	r26, r1
     a22:	b1 05       	cpc	r27, r1
     a24:	39 f4       	brne	.+14     	; 0xa34 <__pack_f+0xee>
     a26:	27 ff       	sbrs	r18, 7
     a28:	09 c0       	rjmp	.+18     	; 0xa3c <__pack_f+0xf6>
     a2a:	20 5c       	subi	r18, 0xC0	; 192
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	4f 4f       	sbci	r20, 0xFF	; 255
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <__pack_f+0xf6>
     a34:	21 5c       	subi	r18, 0xC1	; 193
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	4f 4f       	sbci	r20, 0xFF	; 255
     a3a:	5f 4f       	sbci	r21, 0xFF	; 255
     a3c:	e0 e0       	ldi	r30, 0x00	; 0
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	20 30       	cpi	r18, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	3a 07       	cpc	r19, r26
     a46:	a0 e0       	ldi	r26, 0x00	; 0
     a48:	4a 07       	cpc	r20, r26
     a4a:	a0 e4       	ldi	r26, 0x40	; 64
     a4c:	5a 07       	cpc	r21, r26
     a4e:	10 f0       	brcs	.+4      	; 0xa54 <__pack_f+0x10e>
     a50:	e1 e0       	ldi	r30, 0x01	; 1
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	79 01       	movw	r14, r18
     a56:	8a 01       	movw	r16, r20
     a58:	27 c0       	rjmp	.+78     	; 0xaa8 <__pack_f+0x162>
     a5a:	60 38       	cpi	r22, 0x80	; 128
     a5c:	71 05       	cpc	r23, r1
     a5e:	64 f5       	brge	.+88     	; 0xab8 <__pack_f+0x172>
     a60:	fb 01       	movw	r30, r22
     a62:	e1 58       	subi	r30, 0x81	; 129
     a64:	ff 4f       	sbci	r31, 0xFF	; 255
     a66:	d8 01       	movw	r26, r16
     a68:	c7 01       	movw	r24, r14
     a6a:	8f 77       	andi	r24, 0x7F	; 127
     a6c:	90 70       	andi	r25, 0x00	; 0
     a6e:	a0 70       	andi	r26, 0x00	; 0
     a70:	b0 70       	andi	r27, 0x00	; 0
     a72:	80 34       	cpi	r24, 0x40	; 64
     a74:	91 05       	cpc	r25, r1
     a76:	a1 05       	cpc	r26, r1
     a78:	b1 05       	cpc	r27, r1
     a7a:	39 f4       	brne	.+14     	; 0xa8a <__pack_f+0x144>
     a7c:	e7 fe       	sbrs	r14, 7
     a7e:	0d c0       	rjmp	.+26     	; 0xa9a <__pack_f+0x154>
     a80:	80 e4       	ldi	r24, 0x40	; 64
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <__pack_f+0x14c>
     a8a:	8f e3       	ldi	r24, 0x3F	; 63
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	e8 0e       	add	r14, r24
     a94:	f9 1e       	adc	r15, r25
     a96:	0a 1f       	adc	r16, r26
     a98:	1b 1f       	adc	r17, r27
     a9a:	17 ff       	sbrs	r17, 7
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <__pack_f+0x162>
     a9e:	16 95       	lsr	r17
     aa0:	07 95       	ror	r16
     aa2:	f7 94       	ror	r15
     aa4:	e7 94       	ror	r14
     aa6:	31 96       	adiw	r30, 0x01	; 1
     aa8:	87 e0       	ldi	r24, 0x07	; 7
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d1 f7       	brne	.-12     	; 0xaaa <__pack_f+0x164>
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__pack_f+0x17c>
     ab8:	ee 24       	eor	r14, r14
     aba:	ff 24       	eor	r15, r15
     abc:	87 01       	movw	r16, r14
     abe:	ef ef       	ldi	r30, 0xFF	; 255
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	6e 2f       	mov	r22, r30
     ac4:	67 95       	ror	r22
     ac6:	66 27       	eor	r22, r22
     ac8:	67 95       	ror	r22
     aca:	90 2f       	mov	r25, r16
     acc:	9f 77       	andi	r25, 0x7F	; 127
     ace:	d7 94       	ror	r13
     ad0:	dd 24       	eor	r13, r13
     ad2:	d7 94       	ror	r13
     ad4:	8e 2f       	mov	r24, r30
     ad6:	86 95       	lsr	r24
     ad8:	49 2f       	mov	r20, r25
     ada:	46 2b       	or	r20, r22
     adc:	58 2f       	mov	r21, r24
     ade:	5d 29       	or	r21, r13
     ae0:	b7 01       	movw	r22, r14
     ae2:	ca 01       	movw	r24, r20
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	08 95       	ret

00000af0 <__unpack_f>:
     af0:	fc 01       	movw	r30, r24
     af2:	db 01       	movw	r26, r22
     af4:	40 81       	ld	r20, Z
     af6:	51 81       	ldd	r21, Z+1	; 0x01
     af8:	22 81       	ldd	r18, Z+2	; 0x02
     afa:	62 2f       	mov	r22, r18
     afc:	6f 77       	andi	r22, 0x7F	; 127
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	22 1f       	adc	r18, r18
     b02:	22 27       	eor	r18, r18
     b04:	22 1f       	adc	r18, r18
     b06:	93 81       	ldd	r25, Z+3	; 0x03
     b08:	89 2f       	mov	r24, r25
     b0a:	88 0f       	add	r24, r24
     b0c:	82 2b       	or	r24, r18
     b0e:	28 2f       	mov	r18, r24
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	99 1f       	adc	r25, r25
     b14:	99 27       	eor	r25, r25
     b16:	99 1f       	adc	r25, r25
     b18:	11 96       	adiw	r26, 0x01	; 1
     b1a:	9c 93       	st	X, r25
     b1c:	11 97       	sbiw	r26, 0x01	; 1
     b1e:	21 15       	cp	r18, r1
     b20:	31 05       	cpc	r19, r1
     b22:	a9 f5       	brne	.+106    	; 0xb8e <__unpack_f+0x9e>
     b24:	41 15       	cp	r20, r1
     b26:	51 05       	cpc	r21, r1
     b28:	61 05       	cpc	r22, r1
     b2a:	71 05       	cpc	r23, r1
     b2c:	11 f4       	brne	.+4      	; 0xb32 <__unpack_f+0x42>
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	37 c0       	rjmp	.+110    	; 0xba0 <__unpack_f+0xb0>
     b32:	82 e8       	ldi	r24, 0x82	; 130
     b34:	9f ef       	ldi	r25, 0xFF	; 255
     b36:	13 96       	adiw	r26, 0x03	; 3
     b38:	9c 93       	st	X, r25
     b3a:	8e 93       	st	-X, r24
     b3c:	12 97       	sbiw	r26, 0x02	; 2
     b3e:	9a 01       	movw	r18, r20
     b40:	ab 01       	movw	r20, r22
     b42:	67 e0       	ldi	r22, 0x07	; 7
     b44:	22 0f       	add	r18, r18
     b46:	33 1f       	adc	r19, r19
     b48:	44 1f       	adc	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	6a 95       	dec	r22
     b4e:	d1 f7       	brne	.-12     	; 0xb44 <__unpack_f+0x54>
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	8c 93       	st	X, r24
     b54:	0d c0       	rjmp	.+26     	; 0xb70 <__unpack_f+0x80>
     b56:	22 0f       	add	r18, r18
     b58:	33 1f       	adc	r19, r19
     b5a:	44 1f       	adc	r20, r20
     b5c:	55 1f       	adc	r21, r21
     b5e:	12 96       	adiw	r26, 0x02	; 2
     b60:	8d 91       	ld	r24, X+
     b62:	9c 91       	ld	r25, X
     b64:	13 97       	sbiw	r26, 0x03	; 3
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	13 96       	adiw	r26, 0x03	; 3
     b6a:	9c 93       	st	X, r25
     b6c:	8e 93       	st	-X, r24
     b6e:	12 97       	sbiw	r26, 0x02	; 2
     b70:	20 30       	cpi	r18, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	38 07       	cpc	r19, r24
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	48 07       	cpc	r20, r24
     b7a:	80 e4       	ldi	r24, 0x40	; 64
     b7c:	58 07       	cpc	r21, r24
     b7e:	58 f3       	brcs	.-42     	; 0xb56 <__unpack_f+0x66>
     b80:	14 96       	adiw	r26, 0x04	; 4
     b82:	2d 93       	st	X+, r18
     b84:	3d 93       	st	X+, r19
     b86:	4d 93       	st	X+, r20
     b88:	5c 93       	st	X, r21
     b8a:	17 97       	sbiw	r26, 0x07	; 7
     b8c:	08 95       	ret
     b8e:	2f 3f       	cpi	r18, 0xFF	; 255
     b90:	31 05       	cpc	r19, r1
     b92:	79 f4       	brne	.+30     	; 0xbb2 <__unpack_f+0xc2>
     b94:	41 15       	cp	r20, r1
     b96:	51 05       	cpc	r21, r1
     b98:	61 05       	cpc	r22, r1
     b9a:	71 05       	cpc	r23, r1
     b9c:	19 f4       	brne	.+6      	; 0xba4 <__unpack_f+0xb4>
     b9e:	84 e0       	ldi	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24
     ba2:	08 95       	ret
     ba4:	64 ff       	sbrs	r22, 4
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <__unpack_f+0xbe>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	8c 93       	st	X, r24
     bac:	12 c0       	rjmp	.+36     	; 0xbd2 <__unpack_f+0xe2>
     bae:	1c 92       	st	X, r1
     bb0:	10 c0       	rjmp	.+32     	; 0xbd2 <__unpack_f+0xe2>
     bb2:	2f 57       	subi	r18, 0x7F	; 127
     bb4:	30 40       	sbci	r19, 0x00	; 0
     bb6:	13 96       	adiw	r26, 0x03	; 3
     bb8:	3c 93       	st	X, r19
     bba:	2e 93       	st	-X, r18
     bbc:	12 97       	sbiw	r26, 0x02	; 2
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	8c 93       	st	X, r24
     bc2:	87 e0       	ldi	r24, 0x07	; 7
     bc4:	44 0f       	add	r20, r20
     bc6:	55 1f       	adc	r21, r21
     bc8:	66 1f       	adc	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	8a 95       	dec	r24
     bce:	d1 f7       	brne	.-12     	; 0xbc4 <__unpack_f+0xd4>
     bd0:	70 64       	ori	r23, 0x40	; 64
     bd2:	14 96       	adiw	r26, 0x04	; 4
     bd4:	4d 93       	st	X+, r20
     bd6:	5d 93       	st	X+, r21
     bd8:	6d 93       	st	X+, r22
     bda:	7c 93       	st	X, r23
     bdc:	17 97       	sbiw	r26, 0x07	; 7
     bde:	08 95       	ret

00000be0 <__fpcmp_parts_f>:
     be0:	1f 93       	push	r17
     be2:	dc 01       	movw	r26, r24
     be4:	fb 01       	movw	r30, r22
     be6:	9c 91       	ld	r25, X
     be8:	92 30       	cpi	r25, 0x02	; 2
     bea:	08 f4       	brcc	.+2      	; 0xbee <__fpcmp_parts_f+0xe>
     bec:	47 c0       	rjmp	.+142    	; 0xc7c <__fpcmp_parts_f+0x9c>
     bee:	80 81       	ld	r24, Z
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	08 f4       	brcc	.+2      	; 0xbf6 <__fpcmp_parts_f+0x16>
     bf4:	43 c0       	rjmp	.+134    	; 0xc7c <__fpcmp_parts_f+0x9c>
     bf6:	94 30       	cpi	r25, 0x04	; 4
     bf8:	51 f4       	brne	.+20     	; 0xc0e <__fpcmp_parts_f+0x2e>
     bfa:	11 96       	adiw	r26, 0x01	; 1
     bfc:	1c 91       	ld	r17, X
     bfe:	84 30       	cpi	r24, 0x04	; 4
     c00:	99 f5       	brne	.+102    	; 0xc68 <__fpcmp_parts_f+0x88>
     c02:	81 81       	ldd	r24, Z+1	; 0x01
     c04:	68 2f       	mov	r22, r24
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	61 1b       	sub	r22, r17
     c0a:	71 09       	sbc	r23, r1
     c0c:	3f c0       	rjmp	.+126    	; 0xc8c <__fpcmp_parts_f+0xac>
     c0e:	84 30       	cpi	r24, 0x04	; 4
     c10:	21 f0       	breq	.+8      	; 0xc1a <__fpcmp_parts_f+0x3a>
     c12:	92 30       	cpi	r25, 0x02	; 2
     c14:	31 f4       	brne	.+12     	; 0xc22 <__fpcmp_parts_f+0x42>
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	b9 f1       	breq	.+110    	; 0xc88 <__fpcmp_parts_f+0xa8>
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	88 23       	and	r24, r24
     c1e:	89 f1       	breq	.+98     	; 0xc82 <__fpcmp_parts_f+0xa2>
     c20:	2d c0       	rjmp	.+90     	; 0xc7c <__fpcmp_parts_f+0x9c>
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	1c 91       	ld	r17, X
     c26:	11 97       	sbiw	r26, 0x01	; 1
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	f1 f0       	breq	.+60     	; 0xc68 <__fpcmp_parts_f+0x88>
     c2c:	81 81       	ldd	r24, Z+1	; 0x01
     c2e:	18 17       	cp	r17, r24
     c30:	d9 f4       	brne	.+54     	; 0xc68 <__fpcmp_parts_f+0x88>
     c32:	12 96       	adiw	r26, 0x02	; 2
     c34:	2d 91       	ld	r18, X+
     c36:	3c 91       	ld	r19, X
     c38:	13 97       	sbiw	r26, 0x03	; 3
     c3a:	82 81       	ldd	r24, Z+2	; 0x02
     c3c:	93 81       	ldd	r25, Z+3	; 0x03
     c3e:	82 17       	cp	r24, r18
     c40:	93 07       	cpc	r25, r19
     c42:	94 f0       	brlt	.+36     	; 0xc68 <__fpcmp_parts_f+0x88>
     c44:	28 17       	cp	r18, r24
     c46:	39 07       	cpc	r19, r25
     c48:	bc f0       	brlt	.+46     	; 0xc78 <__fpcmp_parts_f+0x98>
     c4a:	14 96       	adiw	r26, 0x04	; 4
     c4c:	8d 91       	ld	r24, X+
     c4e:	9d 91       	ld	r25, X+
     c50:	0d 90       	ld	r0, X+
     c52:	bc 91       	ld	r27, X
     c54:	a0 2d       	mov	r26, r0
     c56:	24 81       	ldd	r18, Z+4	; 0x04
     c58:	35 81       	ldd	r19, Z+5	; 0x05
     c5a:	46 81       	ldd	r20, Z+6	; 0x06
     c5c:	57 81       	ldd	r21, Z+7	; 0x07
     c5e:	28 17       	cp	r18, r24
     c60:	39 07       	cpc	r19, r25
     c62:	4a 07       	cpc	r20, r26
     c64:	5b 07       	cpc	r21, r27
     c66:	18 f4       	brcc	.+6      	; 0xc6e <__fpcmp_parts_f+0x8e>
     c68:	11 23       	and	r17, r17
     c6a:	41 f0       	breq	.+16     	; 0xc7c <__fpcmp_parts_f+0x9c>
     c6c:	0a c0       	rjmp	.+20     	; 0xc82 <__fpcmp_parts_f+0xa2>
     c6e:	82 17       	cp	r24, r18
     c70:	93 07       	cpc	r25, r19
     c72:	a4 07       	cpc	r26, r20
     c74:	b5 07       	cpc	r27, r21
     c76:	40 f4       	brcc	.+16     	; 0xc88 <__fpcmp_parts_f+0xa8>
     c78:	11 23       	and	r17, r17
     c7a:	19 f0       	breq	.+6      	; 0xc82 <__fpcmp_parts_f+0xa2>
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <__fpcmp_parts_f+0xac>
     c82:	6f ef       	ldi	r22, 0xFF	; 255
     c84:	7f ef       	ldi	r23, 0xFF	; 255
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <__fpcmp_parts_f+0xac>
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	cb 01       	movw	r24, r22
     c8e:	1f 91       	pop	r17
     c90:	08 95       	ret

00000c92 <DIO_voidSetupPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetupPinDirection (u8 copy_u8PortID,u8 copy_u8PinID,u8 copy_u8Directoin){
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	29 97       	sbiw	r28, 0x09	; 9
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	6a 83       	std	Y+2, r22	; 0x02
     caa:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Directoin > 2){
		// Do nothing
	}

	switch (copy_u8Directoin){
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	39 87       	std	Y+9, r19	; 0x09
     cb4:	28 87       	std	Y+8, r18	; 0x08
     cb6:	88 85       	ldd	r24, Y+8	; 0x08
     cb8:	99 85       	ldd	r25, Y+9	; 0x09
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <DIO_voidSetupPinDirection+0x2e>
     cbe:	75 c0       	rjmp	.+234    	; 0xdaa <DIO_voidSetupPinDirection+0x118>
     cc0:	28 85       	ldd	r18, Y+8	; 0x08
     cc2:	39 85       	ldd	r19, Y+9	; 0x09
     cc4:	21 30       	cpi	r18, 0x01	; 1
     cc6:	31 05       	cpc	r19, r1
     cc8:	09 f0       	breq	.+2      	; 0xccc <DIO_voidSetupPinDirection+0x3a>
     cca:	e2 c0       	rjmp	.+452    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
	case DIO_OUTPUT :
		switch(copy_u8PortID)
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3f 83       	std	Y+7, r19	; 0x07
     cd4:	2e 83       	std	Y+6, r18	; 0x06
     cd6:	8e 81       	ldd	r24, Y+6	; 0x06
     cd8:	9f 81       	ldd	r25, Y+7	; 0x07
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	91 05       	cpc	r25, r1
     cde:	49 f1       	breq	.+82     	; 0xd32 <DIO_voidSetupPinDirection+0xa0>
     ce0:	2e 81       	ldd	r18, Y+6	; 0x06
     ce2:	3f 81       	ldd	r19, Y+7	; 0x07
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	31 05       	cpc	r19, r1
     ce8:	2c f4       	brge	.+10     	; 0xcf4 <DIO_voidSetupPinDirection+0x62>
     cea:	8e 81       	ldd	r24, Y+6	; 0x06
     cec:	9f 81       	ldd	r25, Y+7	; 0x07
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	61 f0       	breq	.+24     	; 0xd0a <DIO_voidSetupPinDirection+0x78>
     cf2:	ce c0       	rjmp	.+412    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
     cf4:	2e 81       	ldd	r18, Y+6	; 0x06
     cf6:	3f 81       	ldd	r19, Y+7	; 0x07
     cf8:	22 30       	cpi	r18, 0x02	; 2
     cfa:	31 05       	cpc	r19, r1
     cfc:	71 f1       	breq	.+92     	; 0xd5a <DIO_voidSetupPinDirection+0xc8>
     cfe:	8e 81       	ldd	r24, Y+6	; 0x06
     d00:	9f 81       	ldd	r25, Y+7	; 0x07
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	91 05       	cpc	r25, r1
     d06:	e9 f1       	breq	.+122    	; 0xd82 <DIO_voidSetupPinDirection+0xf0>
     d08:	c3 c0       	rjmp	.+390    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
		{
		case DIO_PORTA :
			SET_BIT(DDRA_REG,copy_u8PinID);
     d0a:	aa e3       	ldi	r26, 0x3A	; 58
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ea e3       	ldi	r30, 0x3A	; 58
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_voidSetupPinDirection+0x96>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_voidSetupPinDirection+0x92>
     d2c:	84 2b       	or	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	af c0       	rjmp	.+350    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTB :
			SET_BIT(DDRB_REG,copy_u8PinID);
     d32:	a7 e3       	ldi	r26, 0x37	; 55
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e7 e3       	ldi	r30, 0x37	; 55
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_voidSetupPinDirection+0xbe>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_voidSetupPinDirection+0xba>
     d54:	84 2b       	or	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	9b c0       	rjmp	.+310    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTC :
			SET_BIT(DDRC_REG,copy_u8PinID);
     d5a:	a4 e3       	ldi	r26, 0x34	; 52
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e4 e3       	ldi	r30, 0x34	; 52
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_voidSetupPinDirection+0xe6>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_voidSetupPinDirection+0xe2>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	87 c0       	rjmp	.+270    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTD :
			SET_BIT(DDRD_REG,copy_u8PinID);
     d82:	a1 e3       	ldi	r26, 0x31	; 49
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e1 e3       	ldi	r30, 0x31	; 49
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_voidSetupPinDirection+0x10e>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_voidSetupPinDirection+0x10a>
     da4:	84 2b       	or	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	73 c0       	rjmp	.+230    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
		}
		break;


		case DIO_INPUT :
			switch(copy_u8PortID){
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3d 83       	std	Y+5, r19	; 0x05
     db2:	2c 83       	std	Y+4, r18	; 0x04
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	59 f1       	breq	.+86     	; 0xe14 <DIO_voidSetupPinDirection+0x182>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	2c f4       	brge	.+10     	; 0xdd2 <DIO_voidSetupPinDirection+0x140>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	69 f0       	breq	.+26     	; 0xdea <DIO_voidSetupPinDirection+0x158>
     dd0:	5f c0       	rjmp	.+190    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
     dd2:	2c 81       	ldd	r18, Y+4	; 0x04
     dd4:	3d 81       	ldd	r19, Y+5	; 0x05
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	89 f1       	breq	.+98     	; 0xe3e <DIO_voidSetupPinDirection+0x1ac>
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	91 05       	cpc	r25, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <DIO_voidSetupPinDirection+0x156>
     de6:	40 c0       	rjmp	.+128    	; 0xe68 <DIO_voidSetupPinDirection+0x1d6>
     de8:	53 c0       	rjmp	.+166    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
			case DIO_PORTA :
				CLR_BIT(DDRA_REG,copy_u8PinID);
     dea:	aa e3       	ldi	r26, 0x3A	; 58
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ea e3       	ldi	r30, 0x3A	; 58
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_voidSetupPinDirection+0x176>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_voidSetupPinDirection+0x172>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	3e c0       	rjmp	.+124    	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTB :
				CLR_BIT(DDRB_REG,copy_u8PinID);
     e14:	a7 e3       	ldi	r26, 0x37	; 55
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e3       	ldi	r30, 0x37	; 55
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_voidSetupPinDirection+0x1a0>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_voidSetupPinDirection+0x19c>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	29 c0       	rjmp	.+82     	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTC :
				CLR_BIT(DDRC_REG,copy_u8PinID);
     e3e:	a4 e3       	ldi	r26, 0x34	; 52
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e4 e3       	ldi	r30, 0x34	; 52
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_voidSetupPinDirection+0x1ca>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_voidSetupPinDirection+0x1c6>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	14 c0       	rjmp	.+40     	; 0xe90 <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTD :
				CLR_BIT(DDRD_REG,copy_u8PinID);
     e68:	a1 e3       	ldi	r26, 0x31	; 49
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e1 e3       	ldi	r30, 0x31	; 49
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_voidSetupPinDirection+0x1f4>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_voidSetupPinDirection+0x1f0>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
				break;
			}
			break;
	}
}
     e90:	29 96       	adiw	r28, 0x09	; 9
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value){
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	29 97       	sbiw	r28, 0x09	; 9
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	6a 83       	std	Y+2, r22	; 0x02
     eba:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Value)
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	39 87       	std	Y+9, r19	; 0x09
     ec4:	28 87       	std	Y+8, r18	; 0x08
     ec6:	88 85       	ldd	r24, Y+8	; 0x08
     ec8:	99 85       	ldd	r25, Y+9	; 0x09
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	09 f4       	brne	.+2      	; 0xed0 <DIO_voidSetPinValue+0x2e>
     ece:	75 c0       	rjmp	.+234    	; 0xfba <DIO_voidSetPinValue+0x118>
     ed0:	28 85       	ldd	r18, Y+8	; 0x08
     ed2:	39 85       	ldd	r19, Y+9	; 0x09
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	31 05       	cpc	r19, r1
     ed8:	09 f0       	breq	.+2      	; 0xedc <DIO_voidSetPinValue+0x3a>
     eda:	e2 c0       	rjmp	.+452    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
	{
	case DIO_HIGH :
		switch(Copy_u8PortID)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	3f 83       	std	Y+7, r19	; 0x07
     ee4:	2e 83       	std	Y+6, r18	; 0x06
     ee6:	8e 81       	ldd	r24, Y+6	; 0x06
     ee8:	9f 81       	ldd	r25, Y+7	; 0x07
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	91 05       	cpc	r25, r1
     eee:	49 f1       	breq	.+82     	; 0xf42 <DIO_voidSetPinValue+0xa0>
     ef0:	2e 81       	ldd	r18, Y+6	; 0x06
     ef2:	3f 81       	ldd	r19, Y+7	; 0x07
     ef4:	22 30       	cpi	r18, 0x02	; 2
     ef6:	31 05       	cpc	r19, r1
     ef8:	2c f4       	brge	.+10     	; 0xf04 <DIO_voidSetPinValue+0x62>
     efa:	8e 81       	ldd	r24, Y+6	; 0x06
     efc:	9f 81       	ldd	r25, Y+7	; 0x07
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	61 f0       	breq	.+24     	; 0xf1a <DIO_voidSetPinValue+0x78>
     f02:	ce c0       	rjmp	.+412    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
     f04:	2e 81       	ldd	r18, Y+6	; 0x06
     f06:	3f 81       	ldd	r19, Y+7	; 0x07
     f08:	22 30       	cpi	r18, 0x02	; 2
     f0a:	31 05       	cpc	r19, r1
     f0c:	71 f1       	breq	.+92     	; 0xf6a <DIO_voidSetPinValue+0xc8>
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	9f 81       	ldd	r25, Y+7	; 0x07
     f12:	83 30       	cpi	r24, 0x03	; 3
     f14:	91 05       	cpc	r25, r1
     f16:	e9 f1       	breq	.+122    	; 0xf92 <DIO_voidSetPinValue+0xf0>
     f18:	c3 c0       	rjmp	.+390    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
		{
		case DIO_PORTA :
			SET_BIT(PORTA_REG , Copy_u8PinID);
     f1a:	ab e3       	ldi	r26, 0x3B	; 59
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	eb e3       	ldi	r30, 0x3B	; 59
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_voidSetPinValue+0x96>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_voidSetPinValue+0x92>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	af c0       	rjmp	.+350    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
			break ;
		case DIO_PORTB :
			SET_BIT(PORTB_REG , Copy_u8PinID);
     f42:	a8 e3       	ldi	r26, 0x38	; 56
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e3       	ldi	r30, 0x38	; 56
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_voidSetPinValue+0xbe>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_voidSetPinValue+0xba>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	9b c0       	rjmp	.+310    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
			break;
		case DIO_PORTC :
			SET_BIT(PORTC_REG , Copy_u8PinID);
     f6a:	a5 e3       	ldi	r26, 0x35	; 53
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e3       	ldi	r30, 0x35	; 53
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_voidSetPinValue+0xe6>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_voidSetPinValue+0xe2>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	87 c0       	rjmp	.+270    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
			break ;
		case DIO_PORTD :
			SET_BIT(PORTD_REG , Copy_u8PinID);
     f92:	a2 e3       	ldi	r26, 0x32	; 50
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e2 e3       	ldi	r30, 0x32	; 50
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_voidSetPinValue+0x10e>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_voidSetPinValue+0x10a>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	73 c0       	rjmp	.+230    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
			break;
		}
		break;
		case DIO_LOW :
			switch(Copy_u8PortID)
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	3d 83       	std	Y+5, r19	; 0x05
     fc2:	2c 83       	std	Y+4, r18	; 0x04
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	9d 81       	ldd	r25, Y+5	; 0x05
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	91 05       	cpc	r25, r1
     fcc:	59 f1       	breq	.+86     	; 0x1024 <DIO_voidSetPinValue+0x182>
     fce:	2c 81       	ldd	r18, Y+4	; 0x04
     fd0:	3d 81       	ldd	r19, Y+5	; 0x05
     fd2:	22 30       	cpi	r18, 0x02	; 2
     fd4:	31 05       	cpc	r19, r1
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <DIO_voidSetPinValue+0x140>
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f0       	breq	.+26     	; 0xffa <DIO_voidSetPinValue+0x158>
     fe0:	5f c0       	rjmp	.+190    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
     fe2:	2c 81       	ldd	r18, Y+4	; 0x04
     fe4:	3d 81       	ldd	r19, Y+5	; 0x05
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	31 05       	cpc	r19, r1
     fea:	89 f1       	breq	.+98     	; 0x104e <DIO_voidSetPinValue+0x1ac>
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	83 30       	cpi	r24, 0x03	; 3
     ff2:	91 05       	cpc	r25, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <DIO_voidSetPinValue+0x156>
     ff6:	40 c0       	rjmp	.+128    	; 0x1078 <DIO_voidSetPinValue+0x1d6>
     ff8:	53 c0       	rjmp	.+166    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA :
				CLR_BIT(PORTA_REG , Copy_u8PinID);
     ffa:	ab e3       	ldi	r26, 0x3B	; 59
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	eb e3       	ldi	r30, 0x3B	; 59
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_voidSetPinValue+0x176>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_voidSetPinValue+0x172>
    101c:	80 95       	com	r24
    101e:	84 23       	and	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	3e c0       	rjmp	.+124    	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
				break ;
			case DIO_PORTB :
				CLR_BIT(PORTB_REG , Copy_u8PinID);
    1024:	a8 e3       	ldi	r26, 0x38	; 56
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e3       	ldi	r30, 0x38	; 56
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_voidSetPinValue+0x1a0>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_voidSetPinValue+0x19c>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	29 c0       	rjmp	.+82     	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
				break;
			case DIO_PORTC :
				CLR_BIT(PORTC_REG , Copy_u8PinID);
    104e:	a5 e3       	ldi	r26, 0x35	; 53
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e3       	ldi	r30, 0x35	; 53
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_voidSetPinValue+0x1ca>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_voidSetPinValue+0x1c6>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	14 c0       	rjmp	.+40     	; 0x10a0 <DIO_voidSetPinValue+0x1fe>
				break ;
			case DIO_PORTD :
				CLR_BIT(PORTD_REG , Copy_u8PinID);
    1078:	a2 e3       	ldi	r26, 0x32	; 50
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e2 e3       	ldi	r30, 0x32	; 50
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_voidSetPinValue+0x1f4>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_voidSetPinValue+0x1f0>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
			}
			break ;
	}


}
    10a0:	29 96       	adiw	r28, 0x09	; 9
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortID, u8 Copy_u8PinID){
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <DIO_u8GetPinValue+0x6>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <DIO_u8GetPinValue+0x8>
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnedValue = 255; // check error state
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3d 83       	std	Y+5, r19	; 0x05
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	4c 81       	ldd	r20, Y+4	; 0x04
    10d4:	5d 81       	ldd	r21, Y+5	; 0x05
    10d6:	41 30       	cpi	r20, 0x01	; 1
    10d8:	51 05       	cpc	r21, r1
    10da:	41 f1       	breq	.+80     	; 0x112c <DIO_u8GetPinValue+0x7a>
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	91 05       	cpc	r25, r1
    10e4:	34 f4       	brge	.+12     	; 0x10f2 <DIO_u8GetPinValue+0x40>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	21 15       	cp	r18, r1
    10ec:	31 05       	cpc	r19, r1
    10ee:	61 f0       	breq	.+24     	; 0x1108 <DIO_u8GetPinValue+0x56>
    10f0:	52 c0       	rjmp	.+164    	; 0x1196 <DIO_u8GetPinValue+0xe4>
    10f2:	4c 81       	ldd	r20, Y+4	; 0x04
    10f4:	5d 81       	ldd	r21, Y+5	; 0x05
    10f6:	42 30       	cpi	r20, 0x02	; 2
    10f8:	51 05       	cpc	r21, r1
    10fa:	51 f1       	breq	.+84     	; 0x1150 <DIO_u8GetPinValue+0x9e>
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	b9 f1       	breq	.+110    	; 0x1174 <DIO_u8GetPinValue+0xc2>
    1106:	47 c0       	rjmp	.+142    	; 0x1196 <DIO_u8GetPinValue+0xe4>
	{
	case DIO_PORTA:
		Local_u8ReturnedValue = GET_BIT(PINA_REG, Copy_u8PinID);
    1108:	e9 e3       	ldi	r30, 0x39	; 57
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a9 01       	movw	r20, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_u8GetPinValue+0x6e>
    111c:	55 95       	asr	r21
    111e:	47 95       	ror	r20
    1120:	8a 95       	dec	r24
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_u8GetPinValue+0x6a>
    1124:	ca 01       	movw	r24, r20
    1126:	81 70       	andi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	35 c0       	rjmp	.+106    	; 0x1196 <DIO_u8GetPinValue+0xe4>
		break;
	case DIO_PORTB:
		Local_u8ReturnedValue = GET_BIT(PINB_REG, Copy_u8PinID);
    112c:	e6 e3       	ldi	r30, 0x36	; 54
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a9 01       	movw	r20, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_u8GetPinValue+0x92>
    1140:	55 95       	asr	r21
    1142:	47 95       	ror	r20
    1144:	8a 95       	dec	r24
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_u8GetPinValue+0x8e>
    1148:	ca 01       	movw	r24, r20
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	23 c0       	rjmp	.+70     	; 0x1196 <DIO_u8GetPinValue+0xe4>
		break;
	case DIO_PORTC:
		Local_u8ReturnedValue = GET_BIT(PINC_REG, Copy_u8PinID);
    1150:	e3 e3       	ldi	r30, 0x33	; 51
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_u8GetPinValue+0xb6>
    1164:	55 95       	asr	r21
    1166:	47 95       	ror	r20
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_u8GetPinValue+0xb2>
    116c:	ca 01       	movw	r24, r20
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	11 c0       	rjmp	.+34     	; 0x1196 <DIO_u8GetPinValue+0xe4>
		break;
	case DIO_PORTD:
		Local_u8ReturnedValue = GET_BIT(PIND_REG, Copy_u8PinID);
    1174:	e0 e3       	ldi	r30, 0x30	; 48
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a9 01       	movw	r20, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_u8GetPinValue+0xda>
    1188:	55 95       	asr	r21
    118a:	47 95       	ror	r20
    118c:	8a 95       	dec	r24
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_u8GetPinValue+0xd6>
    1190:	ca 01       	movw	r24, r20
    1192:	81 70       	andi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
		break;

	default:
		break;
	}
	return Local_u8ReturnedValue;
    1196:	89 81       	ldd	r24, Y+1	; 0x01


}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection    (u8 Copy_u8PortID , u8 Copy_u8Direction ){
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	28 97       	sbiw	r28, 0x08	; 8
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Direction)
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	38 87       	std	Y+8, r19	; 0x08
    11c8:	2f 83       	std	Y+7, r18	; 0x07
    11ca:	8f 81       	ldd	r24, Y+7	; 0x07
    11cc:	98 85       	ldd	r25, Y+8	; 0x08
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	c9 f1       	breq	.+114    	; 0x1244 <DIO_voidSetPortDirection+0x9c>
    11d2:	2f 81       	ldd	r18, Y+7	; 0x07
    11d4:	38 85       	ldd	r19, Y+8	; 0x08
    11d6:	21 30       	cpi	r18, 0x01	; 1
    11d8:	31 05       	cpc	r19, r1
    11da:	09 f0       	breq	.+2      	; 0x11de <DIO_voidSetPortDirection+0x36>
    11dc:	61 c0       	rjmp	.+194    	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
	{
	case DIO_OUTPUT :
		switch(Copy_u8PortID)
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3e 83       	std	Y+6, r19	; 0x06
    11e6:	2d 83       	std	Y+5, r18	; 0x05
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	d1 f0       	breq	.+52     	; 0x1226 <DIO_voidSetPortDirection+0x7e>
    11f2:	2d 81       	ldd	r18, Y+5	; 0x05
    11f4:	3e 81       	ldd	r19, Y+6	; 0x06
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	2c f4       	brge	.+10     	; 0x1206 <DIO_voidSetPortDirection+0x5e>
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	61 f0       	breq	.+24     	; 0x121c <DIO_voidSetPortDirection+0x74>
    1204:	4d c0       	rjmp	.+154    	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
    1206:	2d 81       	ldd	r18, Y+5	; 0x05
    1208:	3e 81       	ldd	r19, Y+6	; 0x06
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	81 f0       	breq	.+32     	; 0x1230 <DIO_voidSetPortDirection+0x88>
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	81 f0       	breq	.+32     	; 0x123a <DIO_voidSetPortDirection+0x92>
    121a:	42 c0       	rjmp	.+132    	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
		{
		case DIO_PORTA :
			DDRA_REG = 0xff ; // 255 0b11111111
    121c:	ea e3       	ldi	r30, 0x3A	; 58
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	80 83       	st	Z, r24
    1224:	3d c0       	rjmp	.+122    	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
			break;
		case DIO_PORTB :
			DDRB_REG = 0xff;
    1226:	e7 e3       	ldi	r30, 0x37	; 55
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	80 83       	st	Z, r24
    122e:	38 c0       	rjmp	.+112    	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
			break;
		case DIO_PORTC :
			DDRC_REG = 0xff;
    1230:	e4 e3       	ldi	r30, 0x34	; 52
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	80 83       	st	Z, r24
    1238:	33 c0       	rjmp	.+102    	; 0x12a0 <DIO_voidSetPortDirection+0xf8>

			break;
		case DIO_PORTD :
			DDRD_REG = 0xff;
    123a:	e1 e3       	ldi	r30, 0x31	; 49
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	80 83       	st	Z, r24
    1242:	2e c0       	rjmp	.+92     	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
		default:
			break;
		}
		break ;
		case DIO_INPUT :
			switch(Copy_u8PortID)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3c 83       	std	Y+4, r19	; 0x04
    124c:	2b 83       	std	Y+3, r18	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	c9 f0       	breq	.+50     	; 0x128a <DIO_voidSetPortDirection+0xe2>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <DIO_voidSetPortDirection+0xc4>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_voidSetPortDirection+0xda>
    126a:	1a c0       	rjmp	.+52     	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	71 f0       	breq	.+28     	; 0x1292 <DIO_voidSetPortDirection+0xea>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	69 f0       	breq	.+26     	; 0x129a <DIO_voidSetPortDirection+0xf2>
    1280:	0f c0       	rjmp	.+30     	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
			{
			case DIO_PORTA :
				DDRA_REG = 0x00 ; // 255 0b11111111
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	10 82       	st	Z, r1
    1288:	0b c0       	rjmp	.+22     	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
				break;
			case DIO_PORTB :
				DDRB_REG = 0;
    128a:	e7 e3       	ldi	r30, 0x37	; 55
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	10 82       	st	Z, r1
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <DIO_voidSetPortDirection+0xf8>
				break;
			case DIO_PORTC :
				DDRC_REG = 0x00;
    1292:	e4 e3       	ldi	r30, 0x34	; 52
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	10 82       	st	Z, r1
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <DIO_voidSetPortDirection+0xf8>

				break;
			case DIO_PORTD :
				DDRD_REG = 0x00;
    129a:	e1 e3       	ldi	r30, 0x31	; 49
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	10 82       	st	Z, r1
			}
			break;
	}


}
    12a0:	28 96       	adiw	r28, 0x08	; 8
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue    (u8 Copy_u8PortID , u8 Copy_u8Value )
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <DIO_voidSetPortValue+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <DIO_voidSetPortValue+0x8>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	3c 83       	std	Y+4, r19	; 0x04
    12ca:	2b 83       	std	Y+3, r18	; 0x03
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	d1 f0       	breq	.+52     	; 0x130a <DIO_voidSetPortValue+0x58>
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	3c 81       	ldd	r19, Y+4	; 0x04
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	2c f4       	brge	.+10     	; 0x12ea <DIO_voidSetPortValue+0x38>
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	61 f0       	breq	.+24     	; 0x1300 <DIO_voidSetPortValue+0x4e>
    12e8:	1e c0       	rjmp	.+60     	; 0x1326 <DIO_voidSetPortValue+0x74>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	81 f0       	breq	.+32     	; 0x1314 <DIO_voidSetPortValue+0x62>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	91 05       	cpc	r25, r1
    12fc:	81 f0       	breq	.+32     	; 0x131e <DIO_voidSetPortValue+0x6c>
    12fe:	13 c0       	rjmp	.+38     	; 0x1326 <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA :
		PORTA_REG = Copy_u8Value ;
    1300:	eb e3       	ldi	r30, 0x3B	; 59
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 83       	st	Z, r24
    1308:	0e c0       	rjmp	.+28     	; 0x1326 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTB :
		PORTB_REG = Copy_u8Value ;
    130a:	e8 e3       	ldi	r30, 0x38	; 56
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 83       	st	Z, r24
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTC :
		PORTC_REG = Copy_u8Value ;
    1314:	e5 e3       	ldi	r30, 0x35	; 53
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <DIO_voidSetPortValue+0x74>

		break;
	case DIO_PORTD :
		PORTD_REG = Copy_u8Value ;
    131e:	e2 e3       	ldi	r30, 0x32	; 50
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
		break;
	default:
		break;
	}

}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue(u8 Copy_u8PortID){
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <DIO_u8GetPortValue+0x6>
    133a:	00 d0       	rcall	.+0      	; 0x133c <DIO_u8GetPortValue+0x8>
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReturnedValue = 255; // check error state
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3c 83       	std	Y+4, r19	; 0x04
    134e:	2b 83       	std	Y+3, r18	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	d1 f0       	breq	.+52     	; 0x138e <DIO_u8GetPortValue+0x5a>
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	2c f4       	brge	.+10     	; 0x136e <DIO_u8GetPortValue+0x3a>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	61 f0       	breq	.+24     	; 0x1384 <DIO_u8GetPortValue+0x50>
    136c:	1e c0       	rjmp	.+60     	; 0x13aa <DIO_u8GetPortValue+0x76>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	3c 81       	ldd	r19, Y+4	; 0x04
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	81 f0       	breq	.+32     	; 0x1398 <DIO_u8GetPortValue+0x64>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	81 f0       	breq	.+32     	; 0x13a2 <DIO_u8GetPortValue+0x6e>
    1382:	13 c0       	rjmp	.+38     	; 0x13aa <DIO_u8GetPortValue+0x76>
	{
	case DIO_PORTA:
		Local_u8ReturnedValue = PINA_REG;
    1384:	e9 e3       	ldi	r30, 0x39	; 57
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	0e c0       	rjmp	.+28     	; 0x13aa <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTB:
		Local_u8ReturnedValue = PINB_REG;
    138e:	e6 e3       	ldi	r30, 0x36	; 54
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTC:
		Local_u8ReturnedValue = PINC_REG;
    1398:	e3 e3       	ldi	r30, 0x33	; 51
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTD:
		Local_u8ReturnedValue = PIND_REG;
    13a2:	e0 e3       	ldi	r30, 0x30	; 48
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	89 83       	std	Y+1, r24	; 0x01
		break;

	default:
		break;
	}
	return Local_u8ReturnedValue;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01


}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <SSD_voidInit>:

#include "SSD_interface.h"



void SSD_voidInit(SSD_t * SSDPtr){
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <SSD_voidInit+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <SSD_voidInit+0x8>
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPortDirection(SSDPtr->Port, DIO_OUTPUT);
    13ca:	e9 81       	ldd	r30, Y+1	; 0x01
    13cc:	fa 81       	ldd	r31, Y+2	; 0x02
    13ce:	80 81       	ld	r24, Z
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_voidSetPortDirection>
	switch (SSDPtr->CommonState ){
    13d6:	e9 81       	ldd	r30, Y+1	; 0x01
    13d8:	fa 81       	ldd	r31, Y+2	; 0x02
    13da:	81 81       	ldd	r24, Z+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3c 83       	std	Y+4, r19	; 0x04
    13e2:	2b 83       	std	Y+3, r18	; 0x03
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <SSD_voidInit+0x3e>
    13ec:	2b 81       	ldd	r18, Y+3	; 0x03
    13ee:	3c 81       	ldd	r19, Y+4	; 0x04
    13f0:	21 30       	cpi	r18, 0x01	; 1
    13f2:	31 05       	cpc	r19, r1
    13f4:	41 f0       	breq	.+16     	; 0x1406 <SSD_voidInit+0x4c>
    13f6:	0d c0       	rjmp	.+26     	; 0x1412 <SSD_voidInit+0x58>

	case SSD_COMMON_CATHODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0xff);
    13f8:	e9 81       	ldd	r30, Y+1	; 0x01
    13fa:	fa 81       	ldd	r31, Y+2	; 0x02
    13fc:	80 81       	ld	r24, Z
    13fe:	6f ef       	ldi	r22, 0xFF	; 255
    1400:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_voidSetPortValue>
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <SSD_voidInit+0x58>
		break;
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0x00);
    1406:	e9 81       	ldd	r30, Y+1	; 0x01
    1408:	fa 81       	ldd	r31, Y+2	; 0x02
    140a:	80 81       	ld	r24, Z
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_voidSetPortValue>
		break;
	}

}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <SSD_voidEnable>:

void SSD_voidEnable(SSD_t * SSDPtr, u8 Copy_u8Number){
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <SSD_voidEnable+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <SSD_voidEnable+0x8>
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	6b 83       	std	Y+3, r22	; 0x03
	switch(SSDPtr -> CommonState){
    1434:	e9 81       	ldd	r30, Y+1	; 0x01
    1436:	fa 81       	ldd	r31, Y+2	; 0x02
    1438:	81 81       	ldd	r24, Z+1	; 0x01
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3d 83       	std	Y+5, r19	; 0x05
    1440:	2c 83       	std	Y+4, r18	; 0x04
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	31 f0       	breq	.+12     	; 0x1456 <SSD_voidEnable+0x36>
    144a:	2c 81       	ldd	r18, Y+4	; 0x04
    144c:	3d 81       	ldd	r19, Y+5	; 0x05
    144e:	21 30       	cpi	r18, 0x01	; 1
    1450:	31 05       	cpc	r19, r1
    1452:	81 f0       	breq	.+32     	; 0x1474 <SSD_voidEnable+0x54>
    1454:	1f c0       	rjmp	.+62     	; 0x1494 <SSD_voidEnable+0x74>
	case SSD_COMMON_CATHODE:
		DIO_voidSetPortValue(SSDPtr->Port, array[Copy_u8Number]);
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	20 81       	ld	r18, Z
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	fc 01       	movw	r30, r24
    1464:	ee 53       	subi	r30, 0x3E	; 62
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	90 81       	ld	r25, Z
    146a:	82 2f       	mov	r24, r18
    146c:	69 2f       	mov	r22, r25
    146e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_voidSetPortValue>
    1472:	10 c0       	rjmp	.+32     	; 0x1494 <SSD_voidEnable+0x74>
		break;
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(SSDPtr->Port, ~array[Copy_u8Number]);
    1474:	e9 81       	ldd	r30, Y+1	; 0x01
    1476:	fa 81       	ldd	r31, Y+2	; 0x02
    1478:	20 81       	ld	r18, Z
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	fc 01       	movw	r30, r24
    1482:	ee 53       	subi	r30, 0x3E	; 62
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	80 81       	ld	r24, Z
    1488:	98 2f       	mov	r25, r24
    148a:	90 95       	com	r25
    148c:	82 2f       	mov	r24, r18
    148e:	69 2f       	mov	r22, r25
    1490:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_voidSetPortValue>
		break;
	}

}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <SSD_voidDisable>:



void SSD_voidDisable(SSD_t * SSDPtr){
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <SSD_voidDisable+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <SSD_voidDisable+0x8>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01

	switch (SSDPtr->CommonState ){
    14b4:	e9 81       	ldd	r30, Y+1	; 0x01
    14b6:	fa 81       	ldd	r31, Y+2	; 0x02
    14b8:	81 81       	ldd	r24, Z+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3c 83       	std	Y+4, r19	; 0x04
    14c0:	2b 83       	std	Y+3, r18	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	31 f0       	breq	.+12     	; 0x14d6 <SSD_voidDisable+0x32>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	21 30       	cpi	r18, 0x01	; 1
    14d0:	31 05       	cpc	r19, r1
    14d2:	41 f0       	breq	.+16     	; 0x14e4 <SSD_voidDisable+0x40>
    14d4:	0d c0       	rjmp	.+26     	; 0x14f0 <SSD_voidDisable+0x4c>

	case SSD_COMMON_CATHODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0xff);
    14d6:	e9 81       	ldd	r30, Y+1	; 0x01
    14d8:	fa 81       	ldd	r31, Y+2	; 0x02
    14da:	80 81       	ld	r24, Z
    14dc:	6f ef       	ldi	r22, 0xFF	; 255
    14de:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_voidSetPortValue>
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <SSD_voidDisable+0x4c>
		break;
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(SSDPtr -> Port, 0x00);
    14e4:	e9 81       	ldd	r30, Y+1	; 0x01
    14e6:	fa 81       	ldd	r31, Y+2	; 0x02
    14e8:	80 81       	ld	r24, Z
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_voidSetPortValue>
		break;
	}
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <LED_voidInit>:

#include "..\..\MCAL\DIO\DIO_interface.h"

#include "LED_interface.h"

void LED_voidInit(LED_t * ptrLED){
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <LED_voidInit+0x6>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <LED_voidInit+0x8>
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetupPinDirection( ptrLED->Port,ptrLED->Pin,DIO_OUTPUT);
    150e:	e9 81       	ldd	r30, Y+1	; 0x01
    1510:	fa 81       	ldd	r31, Y+2	; 0x02
    1512:	80 81       	ld	r24, Z
    1514:	e9 81       	ldd	r30, Y+1	; 0x01
    1516:	fa 81       	ldd	r31, Y+2	; 0x02
    1518:	91 81       	ldd	r25, Z+1	; 0x01
    151a:	69 2f       	mov	r22, r25
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>

	switch( ptrLED -> ActiveState){
    1522:	e9 81       	ldd	r30, Y+1	; 0x01
    1524:	fa 81       	ldd	r31, Y+2	; 0x02
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3c 83       	std	Y+4, r19	; 0x04
    152e:	2b 83       	std	Y+3, r18	; 0x03
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	81 f0       	breq	.+32     	; 0x1558 <LED_voidInit+0x5a>
    1538:	2b 81       	ldd	r18, Y+3	; 0x03
    153a:	3c 81       	ldd	r19, Y+4	; 0x04
    153c:	21 30       	cpi	r18, 0x01	; 1
    153e:	31 05       	cpc	r19, r1
    1540:	a9 f4       	brne	.+42     	; 0x156c <LED_voidInit+0x6e>
	case LED_ACTIVE_HIGH:
		DIO_voidSetPinValue(ptrLED->Port, ptrLED->Pin, DIO_LOW);
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	80 81       	ld	r24, Z
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	69 2f       	mov	r22, r25
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    1556:	0a c0       	rjmp	.+20     	; 0x156c <LED_voidInit+0x6e>
		break;
	case LED_ACTIVE_LOW:
		DIO_voidSetPinValue(ptrLED->Port, ptrLED->Pin, DIO_HIGH);
    1558:	e9 81       	ldd	r30, Y+1	; 0x01
    155a:	fa 81       	ldd	r31, Y+2	; 0x02
    155c:	80 81       	ld	r24, Z
    155e:	e9 81       	ldd	r30, Y+1	; 0x01
    1560:	fa 81       	ldd	r31, Y+2	; 0x02
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	69 2f       	mov	r22, r25
    1566:	41 e0       	ldi	r20, 0x01	; 1
    1568:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
		break;

	}
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <LED_voidON>:
void LED_voidON(LED_t * ptrLED){
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <LED_voidON+0x6>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <LED_voidON+0x8>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
	switch( ptrLED -> ActiveState){
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3c 83       	std	Y+4, r19	; 0x04
    1596:	2b 83       	std	Y+3, r18	; 0x03
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	81 f0       	breq	.+32     	; 0x15c0 <LED_voidON+0x46>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	21 30       	cpi	r18, 0x01	; 1
    15a6:	31 05       	cpc	r19, r1
    15a8:	a9 f4       	brne	.+42     	; 0x15d4 <LED_voidON+0x5a>
	case LED_ACTIVE_HIGH:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_HIGH);
    15aa:	e9 81       	ldd	r30, Y+1	; 0x01
    15ac:	fa 81       	ldd	r31, Y+2	; 0x02
    15ae:	80 81       	ld	r24, Z
    15b0:	e9 81       	ldd	r30, Y+1	; 0x01
    15b2:	fa 81       	ldd	r31, Y+2	; 0x02
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	69 2f       	mov	r22, r25
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    15be:	0a c0       	rjmp	.+20     	; 0x15d4 <LED_voidON+0x5a>
		break;
	case LED_ACTIVE_LOW:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_LOW);
    15c0:	e9 81       	ldd	r30, Y+1	; 0x01
    15c2:	fa 81       	ldd	r31, Y+2	; 0x02
    15c4:	80 81       	ld	r24, Z
    15c6:	e9 81       	ldd	r30, Y+1	; 0x01
    15c8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	69 2f       	mov	r22, r25
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
		break;
	}

}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <LED_voidOFF>:
void LED_voidOFF(LED_t * ptrLED){
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <LED_voidOFF+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <LED_voidOFF+0x8>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	89 83       	std	Y+1, r24	; 0x01
	switch( ptrLED -> ActiveState){
    15f2:	e9 81       	ldd	r30, Y+1	; 0x01
    15f4:	fa 81       	ldd	r31, Y+2	; 0x02
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3c 83       	std	Y+4, r19	; 0x04
    15fe:	2b 83       	std	Y+3, r18	; 0x03
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	81 f0       	breq	.+32     	; 0x1628 <LED_voidOFF+0x46>
    1608:	2b 81       	ldd	r18, Y+3	; 0x03
    160a:	3c 81       	ldd	r19, Y+4	; 0x04
    160c:	21 30       	cpi	r18, 0x01	; 1
    160e:	31 05       	cpc	r19, r1
    1610:	a9 f4       	brne	.+42     	; 0x163c <LED_voidOFF+0x5a>
	case LED_ACTIVE_HIGH:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_LOW);
    1612:	e9 81       	ldd	r30, Y+1	; 0x01
    1614:	fa 81       	ldd	r31, Y+2	; 0x02
    1616:	80 81       	ld	r24, Z
    1618:	e9 81       	ldd	r30, Y+1	; 0x01
    161a:	fa 81       	ldd	r31, Y+2	; 0x02
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	69 2f       	mov	r22, r25
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    1626:	0a c0       	rjmp	.+20     	; 0x163c <LED_voidOFF+0x5a>
		break;
	case LED_ACTIVE_LOW:
		DIO_voidSetPinValue(ptrLED -> Port, ptrLED -> Pin, DIO_HIGH);
    1628:	e9 81       	ldd	r30, Y+1	; 0x01
    162a:	fa 81       	ldd	r31, Y+2	; 0x02
    162c:	80 81       	ld	r24, Z
    162e:	e9 81       	ldd	r30, Y+1	; 0x01
    1630:	fa 81       	ldd	r31, Y+2	; 0x02
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	69 2f       	mov	r22, r25
    1636:	41 e0       	ldi	r20, 0x01	; 1
    1638:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
		break;


	}
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <KPAD_voidInit>:
#include "KPAD_config.h"
#include "KPAD_private.h"


void KPAD_voidInit      (void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    /* Set Rows To Input*/
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R0 , DIO_INPUT);
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R1 , DIO_INPUT);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R2 , DIO_INPUT);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R3 , DIO_INPUT);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	63 e0       	ldi	r22, 0x03	; 3
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
    /* Set Rows as PULL UP*/
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R0 , DIO_HIGH);
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R1 , DIO_HIGH);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R2 , DIO_HIGH);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	62 e0       	ldi	r22, 0x02	; 2
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R3 , DIO_HIGH);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	63 e0       	ldi	r22, 0x03	; 3
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>

    /*Set Cols to OUTPUT*/
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C0 , DIO_OUTPUT);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	64 e0       	ldi	r22, 0x04	; 4
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C1 , DIO_OUTPUT);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	65 e0       	ldi	r22, 0x05	; 5
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C2 , DIO_OUTPUT);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	66 e0       	ldi	r22, 0x06	; 6
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C3 , DIO_OUTPUT);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	67 e0       	ldi	r22, 0x07	; 7
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
//
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C0 , DIO_HIGH);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	64 e0       	ldi	r22, 0x04	; 4
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C1 , DIO_HIGH);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	65 e0       	ldi	r22, 0x05	; 5
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C2 , DIO_HIGH);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	66 e0       	ldi	r22, 0x06	; 6
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C3 , DIO_HIGH);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	67 e0       	ldi	r22, 0x07	; 7
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
}
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <KPAD_u8GetPressed>:

u8 KPAD_u8GetPressed    (void)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	62 97       	sbiw	r28, 0x12	; 18
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8RetrunedValue = 255 ;
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8GetPressed   ;
    u8 Local_u8Col            ;
    u8 Local_u8Row          ;

    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	88 8b       	std	Y+16, r24	; 0x10
    1714:	b7 c0       	rjmp	.+366    	; 0x1884 <KPAD_u8GetPressed+0x18c>
    {
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_LOW);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	68 89       	ldd	r22, Y+16	; 0x10
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
        for(Local_u8Row = 0 + KPAD_ROW_INIT ; Local_u8Row < KPAD_ROW_END + 1 ; Local_u8Row++)
    1720:	1f 86       	std	Y+15, r1	; 0x0f
    1722:	a4 c0       	rjmp	.+328    	; 0x186c <KPAD_u8GetPressed+0x174>
        {

           Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	6f 85       	ldd	r22, Y+15	; 0x0f
    1728:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_u8GetPinValue>
    172c:	89 8b       	std	Y+17, r24	; 0x11
           if(Local_u8GetPressed == 0)
    172e:	89 89       	ldd	r24, Y+17	; 0x11
    1730:	88 23       	and	r24, r24
    1732:	09 f0       	breq	.+2      	; 0x1736 <KPAD_u8GetPressed+0x3e>
    1734:	98 c0       	rjmp	.+304    	; 0x1866 <KPAD_u8GetPressed+0x16e>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a8 e4       	ldi	r26, 0x48	; 72
    173c:	b2 e4       	ldi	r27, 0x42	; 66
    173e:	8b 87       	std	Y+11, r24	; 0x0b
    1740:	9c 87       	std	Y+12, r25	; 0x0c
    1742:	ad 87       	std	Y+13, r26	; 0x0d
    1744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1746:	6b 85       	ldd	r22, Y+11	; 0x0b
    1748:	7c 85       	ldd	r23, Y+12	; 0x0c
    174a:	8d 85       	ldd	r24, Y+13	; 0x0d
    174c:	9e 85       	ldd	r25, Y+14	; 0x0e
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	4a ef       	ldi	r20, 0xFA	; 250
    1754:	54 e4       	ldi	r21, 0x44	; 68
    1756:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	8f 83       	std	Y+7, r24	; 0x07
    1760:	98 87       	std	Y+8, r25	; 0x08
    1762:	a9 87       	std	Y+9, r26	; 0x09
    1764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e8       	ldi	r20, 0x80	; 128
    1774:	5f e3       	ldi	r21, 0x3F	; 63
    1776:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    177a:	88 23       	and	r24, r24
    177c:	2c f4       	brge	.+10     	; 0x1788 <KPAD_u8GetPressed+0x90>
		__ticks = 1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9e 83       	std	Y+6, r25	; 0x06
    1784:	8d 83       	std	Y+5, r24	; 0x05
    1786:	3f c0       	rjmp	.+126    	; 0x1806 <KPAD_u8GetPressed+0x10e>
	else if (__tmp > 65535)
    1788:	6f 81       	ldd	r22, Y+7	; 0x07
    178a:	78 85       	ldd	r23, Y+8	; 0x08
    178c:	89 85       	ldd	r24, Y+9	; 0x09
    178e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	3f ef       	ldi	r19, 0xFF	; 255
    1794:	4f e7       	ldi	r20, 0x7F	; 127
    1796:	57 e4       	ldi	r21, 0x47	; 71
    1798:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    179c:	18 16       	cp	r1, r24
    179e:	4c f5       	brge	.+82     	; 0x17f2 <KPAD_u8GetPressed+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e2       	ldi	r20, 0x20	; 32
    17ae:	51 e4       	ldi	r21, 0x41	; 65
    17b0:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	bc 01       	movw	r22, r24
    17ba:	cd 01       	movw	r24, r26
    17bc:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	0f c0       	rjmp	.+30     	; 0x17e8 <KPAD_u8GetPressed+0xf0>
    17ca:	88 ec       	ldi	r24, 0xC8	; 200
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <KPAD_u8GetPressed+0xde>
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	69 f7       	brne	.-38     	; 0x17ca <KPAD_u8GetPressed+0xd2>
    17f0:	14 c0       	rjmp	.+40     	; 0x181a <KPAD_u8GetPressed+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f2:	6f 81       	ldd	r22, Y+7	; 0x07
    17f4:	78 85       	ldd	r23, Y+8	; 0x08
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fa:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9e 83       	std	Y+6, r25	; 0x06
    1804:	8d 83       	std	Y+5, r24	; 0x05
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <KPAD_u8GetPressed+0x11a>
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
           {
            /*  Debouncing */
            _delay_ms(50);
            Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	6f 85       	ldd	r22, Y+15	; 0x0f
    181e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_u8GetPinValue>
    1822:	89 8b       	std	Y+17, r24	; 0x11
            if(Local_u8GetPressed == 0)
    1824:	89 89       	ldd	r24, Y+17	; 0x11
    1826:	88 23       	and	r24, r24
    1828:	d9 f4       	brne	.+54     	; 0x1860 <KPAD_u8GetPressed+0x168>
            {
                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
    182a:	8f 85       	ldd	r24, Y+15	; 0x0f
    182c:	48 2f       	mov	r20, r24
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	88 89       	ldd	r24, Y+16	; 0x10
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9c 01       	movw	r18, r24
    1838:	24 50       	subi	r18, 0x04	; 4
    183a:	30 40       	sbci	r19, 0x00	; 0
    183c:	ca 01       	movw	r24, r20
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	82 0f       	add	r24, r18
    1848:	93 1f       	adc	r25, r19
    184a:	fc 01       	movw	r30, r24
    184c:	ee 54       	subi	r30, 0x4E	; 78
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	8a 8b       	std	Y+18, r24	; 0x12
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <KPAD_u8GetPressed+0x168>
            }
            while(Local_u8GetPressed ==0 )
            {
                Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	6f 85       	ldd	r22, Y+15	; 0x0f
    185a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <DIO_u8GetPinValue>
    185e:	89 8b       	std	Y+17, r24	; 0x11
            Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
            if(Local_u8GetPressed == 0)
            {
                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
            }
            while(Local_u8GetPressed ==0 )
    1860:	89 89       	ldd	r24, Y+17	; 0x11
    1862:	88 23       	and	r24, r24
    1864:	c1 f3       	breq	.-16     	; 0x1856 <KPAD_u8GetPressed+0x15e>
    u8 Local_u8Row          ;

    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    {
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_LOW);
        for(Local_u8Row = 0 + KPAD_ROW_INIT ; Local_u8Row < KPAD_ROW_END + 1 ; Local_u8Row++)
    1866:	8f 85       	ldd	r24, Y+15	; 0x0f
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	8f 87       	std	Y+15, r24	; 0x0f
    186c:	8f 85       	ldd	r24, Y+15	; 0x0f
    186e:	84 30       	cpi	r24, 0x04	; 4
    1870:	08 f4       	brcc	.+2      	; 0x1874 <KPAD_u8GetPressed+0x17c>
    1872:	58 cf       	rjmp	.-336    	; 0x1724 <KPAD_u8GetPressed+0x2c>

           }

        }

        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_HIGH);
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	68 89       	ldd	r22, Y+16	; 0x10
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    u8 Local_u8RetrunedValue = 255 ;
    u8 Local_u8GetPressed   ;
    u8 Local_u8Col            ;
    u8 Local_u8Row          ;

    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    187e:	88 89       	ldd	r24, Y+16	; 0x10
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	88 8b       	std	Y+16, r24	; 0x10
    1884:	88 89       	ldd	r24, Y+16	; 0x10
    1886:	88 30       	cpi	r24, 0x08	; 8
    1888:	08 f4       	brcc	.+2      	; 0x188c <KPAD_u8GetPressed+0x194>
    188a:	45 cf       	rjmp	.-374    	; 0x1716 <KPAD_u8GetPressed+0x1e>

        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_HIGH);
    }


    return Local_u8RetrunedValue ;
    188c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    188e:	62 96       	adiw	r28, 0x12	; 18
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "CLCD_private.h"
#include "CLCD_config.h"

void CLCD_voidInit		(	void	)
{
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	cc 54       	subi	r28, 0x4C	; 76
    18ae:	d0 40       	sbci	r29, 0x00	; 0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
	// Data Port --> OUTPUT
	DIO_voidSetPortDirection(CLCD_DATA_PORT , DIO_OUTPUT);
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_voidSetPortDirection>
	// RS , RW , EN --> OUTPUT
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_OUTPUT);
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	67 e0       	ldi	r22, 0x07	; 7
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_OUTPUT);
    18cc:	82 e0       	ldi	r24, 0x02	; 2
    18ce:	66 e0       	ldi	r22, 0x06	; 6
    18d0:	41 e0       	ldi	r20, 0x01	; 1
    18d2:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_OUTPUT);
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	65 e0       	ldi	r22, 0x05	; 5
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidSetupPinDirection>
    18e0:	fe 01       	movw	r30, r28
    18e2:	e7 5b       	subi	r30, 0xB7	; 183
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a8 e4       	ldi	r26, 0x48	; 72
    18ec:	b2 e4       	ldi	r27, 0x42	; 66
    18ee:	80 83       	st	Z, r24
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	a2 83       	std	Z+2, r26	; 0x02
    18f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f6:	8e 01       	movw	r16, r28
    18f8:	0b 5b       	subi	r16, 0xBB	; 187
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	fe 01       	movw	r30, r28
    18fe:	e7 5b       	subi	r30, 0xB7	; 183
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a ef       	ldi	r20, 0xFA	; 250
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	f8 01       	movw	r30, r16
    191c:	80 83       	st	Z, r24
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	a2 83       	std	Z+2, r26	; 0x02
    1922:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1924:	fe 01       	movw	r30, r28
    1926:	eb 5b       	subi	r30, 0xBB	; 187
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    193e:	88 23       	and	r24, r24
    1940:	44 f4       	brge	.+16     	; 0x1952 <CLCD_voidInit+0xb2>
		__ticks = 1;
    1942:	fe 01       	movw	r30, r28
    1944:	ed 5b       	subi	r30, 0xBD	; 189
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
    1950:	64 c0       	rjmp	.+200    	; 0x1a1a <CLCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1952:	fe 01       	movw	r30, r28
    1954:	eb 5b       	subi	r30, 0xBB	; 187
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	60 81       	ld	r22, Z
    195a:	71 81       	ldd	r23, Z+1	; 0x01
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	4f e7       	ldi	r20, 0x7F	; 127
    1966:	57 e4       	ldi	r21, 0x47	; 71
    1968:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    196c:	18 16       	cp	r1, r24
    196e:	0c f0       	brlt	.+2      	; 0x1972 <CLCD_voidInit+0xd2>
    1970:	43 c0       	rjmp	.+134    	; 0x19f8 <CLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	fe 01       	movw	r30, r28
    1974:	e7 5b       	subi	r30, 0xB7	; 183
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e2       	ldi	r20, 0x20	; 32
    1986:	51 e4       	ldi	r21, 0x41	; 65
    1988:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8e 01       	movw	r16, r28
    1992:	0d 5b       	subi	r16, 0xBD	; 189
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	f8 01       	movw	r30, r16
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
    19a8:	1f c0       	rjmp	.+62     	; 0x19e8 <CLCD_voidInit+0x148>
    19aa:	fe 01       	movw	r30, r28
    19ac:	ef 5b       	subi	r30, 0xBF	; 191
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	88 ec       	ldi	r24, 0xC8	; 200
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24
    19b8:	fe 01       	movw	r30, r28
    19ba:	ef 5b       	subi	r30, 0xBF	; 191
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <CLCD_voidInit+0x122>
    19c6:	fe 01       	movw	r30, r28
    19c8:	ef 5b       	subi	r30, 0xBF	; 191
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d0:	de 01       	movw	r26, r28
    19d2:	ad 5b       	subi	r26, 0xBD	; 189
    19d4:	bf 4f       	sbci	r27, 0xFF	; 255
    19d6:	fe 01       	movw	r30, r28
    19d8:	ed 5b       	subi	r30, 0xBD	; 189
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	11 96       	adiw	r26, 0x01	; 1
    19e4:	9c 93       	st	X, r25
    19e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	fe 01       	movw	r30, r28
    19ea:	ed 5b       	subi	r30, 0xBD	; 189
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	d1 f6       	brne	.-76     	; 0x19aa <CLCD_voidInit+0x10a>
    19f6:	24 c0       	rjmp	.+72     	; 0x1a40 <CLCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	8e 01       	movw	r16, r28
    19fa:	0d 5b       	subi	r16, 0xBD	; 189
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
    19fe:	fe 01       	movw	r30, r28
    1a00:	eb 5b       	subi	r30, 0xBB	; 187
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	f8 01       	movw	r30, r16
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ed 5b       	subi	r30, 0xBD	; 189
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	fe 01       	movw	r30, r28
    1a26:	ff 96       	adiw	r30, 0x3f	; 63
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	80 83       	st	Z, r24
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ff 96       	adiw	r30, 0x3f	; 63
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <CLCD_voidInit+0x194>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	ff 96       	adiw	r30, 0x3f	; 63
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24

	/* Initialization Sequence */
	_delay_ms(50);
	/*Function Set */
	CLCD_voidSendCommand(CLCD_FUNCTIONSET8bit);
    1a40:	88 e3       	ldi	r24, 0x38	; 56
    1a42:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendCommand>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a8 e4       	ldi	r26, 0x48	; 72
    1a4c:	b2 e4       	ldi	r27, 0x42	; 66
    1a4e:	8b af       	std	Y+59, r24	; 0x3b
    1a50:	9c af       	std	Y+60, r25	; 0x3c
    1a52:	ad af       	std	Y+61, r26	; 0x3d
    1a54:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a56:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a58:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5e:	2b ea       	ldi	r18, 0xAB	; 171
    1a60:	3a ea       	ldi	r19, 0xAA	; 170
    1a62:	4a e2       	ldi	r20, 0x2A	; 42
    1a64:	50 e4       	ldi	r21, 0x40	; 64
    1a66:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8f ab       	std	Y+55, r24	; 0x37
    1a70:	98 af       	std	Y+56, r25	; 0x38
    1a72:	a9 af       	std	Y+57, r26	; 0x39
    1a74:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a76:	6f a9       	ldd	r22, Y+55	; 0x37
    1a78:	78 ad       	ldd	r23, Y+56	; 0x38
    1a7a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	1c f4       	brge	.+6      	; 0x1a94 <CLCD_voidInit+0x1f4>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	8e ab       	std	Y+54, r24	; 0x36
    1a92:	91 c0       	rjmp	.+290    	; 0x1bb6 <CLCD_voidInit+0x316>
	else if (__tmp > 255)
    1a94:	6f a9       	ldd	r22, Y+55	; 0x37
    1a96:	78 ad       	ldd	r23, Y+56	; 0x38
    1a98:	89 ad       	ldd	r24, Y+57	; 0x39
    1a9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	53 e4       	ldi	r21, 0x43	; 67
    1aa4:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	0c f0       	brlt	.+2      	; 0x1aae <CLCD_voidInit+0x20e>
    1aac:	7b c0       	rjmp	.+246    	; 0x1ba4 <CLCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1aae:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ab0:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ab2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ab4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	54 e4       	ldi	r21, 0x44	; 68
    1abe:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8a ab       	std	Y+50, r24	; 0x32
    1ac8:	9b ab       	std	Y+51, r25	; 0x33
    1aca:	ac ab       	std	Y+52, r26	; 0x34
    1acc:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ace:	6a a9       	ldd	r22, Y+50	; 0x32
    1ad0:	7b a9       	ldd	r23, Y+51	; 0x33
    1ad2:	8c a9       	ldd	r24, Y+52	; 0x34
    1ad4:	9d a9       	ldd	r25, Y+53	; 0x35
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	4a ef       	ldi	r20, 0xFA	; 250
    1adc:	54 e4       	ldi	r21, 0x44	; 68
    1ade:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8e a7       	std	Y+46, r24	; 0x2e
    1ae8:	9f a7       	std	Y+47, r25	; 0x2f
    1aea:	a8 ab       	std	Y+48, r26	; 0x30
    1aec:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1aee:	6e a5       	ldd	r22, Y+46	; 0x2e
    1af0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1af2:	88 a9       	ldd	r24, Y+48	; 0x30
    1af4:	99 a9       	ldd	r25, Y+49	; 0x31
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e8       	ldi	r20, 0x80	; 128
    1afc:	5f e3       	ldi	r21, 0x3F	; 63
    1afe:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    1b02:	88 23       	and	r24, r24
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <CLCD_voidInit+0x270>
		__ticks = 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9d a7       	std	Y+45, r25	; 0x2d
    1b0c:	8c a7       	std	Y+44, r24	; 0x2c
    1b0e:	3f c0       	rjmp	.+126    	; 0x1b8e <CLCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    1b10:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b12:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b14:	88 a9       	ldd	r24, Y+48	; 0x30
    1b16:	99 a9       	ldd	r25, Y+49	; 0x31
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	4c f5       	brge	.+82     	; 0x1b7a <CLCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b28:	6a a9       	ldd	r22, Y+50	; 0x32
    1b2a:	7b a9       	ldd	r23, Y+51	; 0x33
    1b2c:	8c a9       	ldd	r24, Y+52	; 0x34
    1b2e:	9d a9       	ldd	r25, Y+53	; 0x35
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9d a7       	std	Y+45, r25	; 0x2d
    1b4e:	8c a7       	std	Y+44, r24	; 0x2c
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <CLCD_voidInit+0x2d0>
    1b52:	88 ec       	ldi	r24, 0xC8	; 200
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9b a7       	std	Y+43, r25	; 0x2b
    1b58:	8a a7       	std	Y+42, r24	; 0x2a
    1b5a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b5c:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <CLCD_voidInit+0x2be>
    1b62:	9b a7       	std	Y+43, r25	; 0x2b
    1b64:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b68:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	9d a7       	std	Y+45, r25	; 0x2d
    1b6e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b70:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b72:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	69 f7       	brne	.-38     	; 0x1b52 <CLCD_voidInit+0x2b2>
    1b78:	24 c0       	rjmp	.+72     	; 0x1bc2 <CLCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b7c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b7e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b80:	99 a9       	ldd	r25, Y+49	; 0x31
    1b82:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9d a7       	std	Y+45, r25	; 0x2d
    1b8c:	8c a7       	std	Y+44, r24	; 0x2c
    1b8e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b90:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b92:	99 a7       	std	Y+41, r25	; 0x29
    1b94:	88 a7       	std	Y+40, r24	; 0x28
    1b96:	88 a5       	ldd	r24, Y+40	; 0x28
    1b98:	99 a5       	ldd	r25, Y+41	; 0x29
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <CLCD_voidInit+0x2fa>
    1b9e:	99 a7       	std	Y+41, r25	; 0x29
    1ba0:	88 a7       	std	Y+40, r24	; 0x28
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <CLCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ba4:	6f a9       	ldd	r22, Y+55	; 0x37
    1ba6:	78 ad       	ldd	r23, Y+56	; 0x38
    1ba8:	89 ad       	ldd	r24, Y+57	; 0x39
    1baa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bac:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8e ab       	std	Y+54, r24	; 0x36
    1bb6:	8e a9       	ldd	r24, Y+54	; 0x36
    1bb8:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bba:	8f a1       	ldd	r24, Y+39	; 0x27
    1bbc:	8a 95       	dec	r24
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <CLCD_voidInit+0x31c>
    1bc0:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	/*Display ON/OFF*/
	CLCD_voidSendCommand(CLCD_DISPLAYON_OFF);
    1bc2:	8c e0       	ldi	r24, 0x0C	; 12
    1bc4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendCommand>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a8 e4       	ldi	r26, 0x48	; 72
    1bce:	b2 e4       	ldi	r27, 0x42	; 66
    1bd0:	8b a3       	std	Y+35, r24	; 0x23
    1bd2:	9c a3       	std	Y+36, r25	; 0x24
    1bd4:	ad a3       	std	Y+37, r26	; 0x25
    1bd6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bda:	7c a1       	ldd	r23, Y+36	; 0x24
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	9e a1       	ldd	r25, Y+38	; 0x26
    1be0:	2b ea       	ldi	r18, 0xAB	; 171
    1be2:	3a ea       	ldi	r19, 0xAA	; 170
    1be4:	4a e2       	ldi	r20, 0x2A	; 42
    1be6:	50 e4       	ldi	r21, 0x40	; 64
    1be8:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8f 8f       	std	Y+31, r24	; 0x1f
    1bf2:	98 a3       	std	Y+32, r25	; 0x20
    1bf4:	a9 a3       	std	Y+33, r26	; 0x21
    1bf6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bf8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bfa:	78 a1       	ldd	r23, Y+32	; 0x20
    1bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	1c f4       	brge	.+6      	; 0x1c16 <CLCD_voidInit+0x376>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	8e 8f       	std	Y+30, r24	; 0x1e
    1c14:	91 c0       	rjmp	.+290    	; 0x1d38 <CLCD_voidInit+0x498>
	else if (__tmp > 255)
    1c16:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c18:	78 a1       	ldd	r23, Y+32	; 0x20
    1c1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	4f e7       	ldi	r20, 0x7F	; 127
    1c24:	53 e4       	ldi	r21, 0x43	; 67
    1c26:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    1c2a:	18 16       	cp	r1, r24
    1c2c:	0c f0       	brlt	.+2      	; 0x1c30 <CLCD_voidInit+0x390>
    1c2e:	7b c0       	rjmp	.+246    	; 0x1d26 <CLCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1c30:	6b a1       	ldd	r22, Y+35	; 0x23
    1c32:	7c a1       	ldd	r23, Y+36	; 0x24
    1c34:	8d a1       	ldd	r24, Y+37	; 0x25
    1c36:	9e a1       	ldd	r25, Y+38	; 0x26
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a e7       	ldi	r20, 0x7A	; 122
    1c3e:	54 e4       	ldi	r21, 0x44	; 68
    1c40:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8a 8f       	std	Y+26, r24	; 0x1a
    1c4a:	9b 8f       	std	Y+27, r25	; 0x1b
    1c4c:	ac 8f       	std	Y+28, r26	; 0x1c
    1c4e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c50:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c52:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a ef       	ldi	r20, 0xFA	; 250
    1c5e:	54 e4       	ldi	r21, 0x44	; 68
    1c60:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8e 8b       	std	Y+22, r24	; 0x16
    1c6a:	9f 8b       	std	Y+23, r25	; 0x17
    1c6c:	a8 8f       	std	Y+24, r26	; 0x18
    1c6e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c70:	6e 89       	ldd	r22, Y+22	; 0x16
    1c72:	7f 89       	ldd	r23, Y+23	; 0x17
    1c74:	88 8d       	ldd	r24, Y+24	; 0x18
    1c76:	99 8d       	ldd	r25, Y+25	; 0x19
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	2c f4       	brge	.+10     	; 0x1c92 <CLCD_voidInit+0x3f2>
		__ticks = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9d 8b       	std	Y+21, r25	; 0x15
    1c8e:	8c 8b       	std	Y+20, r24	; 0x14
    1c90:	3f c0       	rjmp	.+126    	; 0x1d10 <CLCD_voidInit+0x470>
	else if (__tmp > 65535)
    1c92:	6e 89       	ldd	r22, Y+22	; 0x16
    1c94:	7f 89       	ldd	r23, Y+23	; 0x17
    1c96:	88 8d       	ldd	r24, Y+24	; 0x18
    1c98:	99 8d       	ldd	r25, Y+25	; 0x19
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	57 e4       	ldi	r21, 0x47	; 71
    1ca2:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	4c f5       	brge	.+82     	; 0x1cfc <CLCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1cac:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cb0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9d 8b       	std	Y+21, r25	; 0x15
    1cd0:	8c 8b       	std	Y+20, r24	; 0x14
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <CLCD_voidInit+0x452>
    1cd4:	88 ec       	ldi	r24, 0xC8	; 200
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9b 8b       	std	Y+19, r25	; 0x13
    1cda:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cdc:	8a 89       	ldd	r24, Y+18	; 0x12
    1cde:	9b 89       	ldd	r25, Y+19	; 0x13
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <CLCD_voidInit+0x440>
    1ce4:	9b 8b       	std	Y+19, r25	; 0x13
    1ce6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cea:	9d 89       	ldd	r25, Y+21	; 0x15
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9d 8b       	std	Y+21, r25	; 0x15
    1cf0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf4:	9d 89       	ldd	r25, Y+21	; 0x15
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <CLCD_voidInit+0x434>
    1cfa:	24 c0       	rjmp	.+72     	; 0x1d44 <CLCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfc:	6e 89       	ldd	r22, Y+22	; 0x16
    1cfe:	7f 89       	ldd	r23, Y+23	; 0x17
    1d00:	88 8d       	ldd	r24, Y+24	; 0x18
    1d02:	99 8d       	ldd	r25, Y+25	; 0x19
    1d04:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9d 8b       	std	Y+21, r25	; 0x15
    1d0e:	8c 8b       	std	Y+20, r24	; 0x14
    1d10:	8c 89       	ldd	r24, Y+20	; 0x14
    1d12:	9d 89       	ldd	r25, Y+21	; 0x15
    1d14:	99 8b       	std	Y+17, r25	; 0x11
    1d16:	88 8b       	std	Y+16, r24	; 0x10
    1d18:	88 89       	ldd	r24, Y+16	; 0x10
    1d1a:	99 89       	ldd	r25, Y+17	; 0x11
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <CLCD_voidInit+0x47c>
    1d20:	99 8b       	std	Y+17, r25	; 0x11
    1d22:	88 8b       	std	Y+16, r24	; 0x10
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <CLCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d26:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d28:	78 a1       	ldd	r23, Y+32	; 0x20
    1d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2e:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8e 8f       	std	Y+30, r24	; 0x1e
    1d38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3e:	8a 95       	dec	r24
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <CLCD_voidInit+0x49e>
    1d42:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	/*Display Clear */
	CLCD_voidSendCommand(CLCD_CLR_DISPLAY);
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendCommand>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	b0 e4       	ldi	r27, 0x40	; 64
    1d52:	8b 87       	std	Y+11, r24	; 0x0b
    1d54:	9c 87       	std	Y+12, r25	; 0x0c
    1d56:	ad 87       	std	Y+13, r26	; 0x0d
    1d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a ef       	ldi	r20, 0xFA	; 250
    1d68:	54 e4       	ldi	r21, 0x44	; 68
    1d6a:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8f 83       	std	Y+7, r24	; 0x07
    1d74:	98 87       	std	Y+8, r25	; 0x08
    1d76:	a9 87       	std	Y+9, r26	; 0x09
    1d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <CLCD_voidInit+0x4fc>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <CLCD_voidInit+0x57a>
	else if (__tmp > 65535)
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <CLCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <CLCD_voidInit+0x55c>
    1dde:	88 ec       	ldi	r24, 0xC8	; 200
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <CLCD_voidInit+0x54a>
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <CLCD_voidInit+0x53e>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <CLCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <CLCD_voidInit+0x586>
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Entry Mode Set */
	CLCD_voidSendCommand(CLCD_ENTRYMODE);
    1e2e:	86 e0       	ldi	r24, 0x06	; 6
    1e30:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendCommand>

}
    1e34:	c4 5b       	subi	r28, 0xB4	; 180
    1e36:	df 4f       	sbci	r29, 0xFF	; 255
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	08 95       	ret

00001e4c <CLCD_voidSendCommand>:

void CLCD_voidSendCommand	(u8 Copy_u8Command	)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	e1 97       	sbiw	r28, 0x31	; 49
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	89 ab       	std	Y+49, r24	; 0x31
	/*RS -> Low (To Send Command )*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_LOW);
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	67 e0       	ldi	r22, 0x07	; 7
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
	/*RW -> Low	(To Write)*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	66 e0       	ldi	r22, 0x06	; 6
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
	/*	Send Command */
	DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Command);
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	69 a9       	ldd	r22, Y+49	; 0x31
    1e7a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_voidSetPortValue>
	/*Enable Sequence */
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_HIGH);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	65 e0       	ldi	r22, 0x05	; 5
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a0 e8       	ldi	r26, 0x80	; 128
    1e8e:	bf e3       	ldi	r27, 0x3F	; 63
    1e90:	8d a7       	std	Y+45, r24	; 0x2d
    1e92:	9e a7       	std	Y+46, r25	; 0x2e
    1e94:	af a7       	std	Y+47, r26	; 0x2f
    1e96:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e98:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e9a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea0:	2b ea       	ldi	r18, 0xAB	; 171
    1ea2:	3a ea       	ldi	r19, 0xAA	; 170
    1ea4:	4a e2       	ldi	r20, 0x2A	; 42
    1ea6:	50 e4       	ldi	r21, 0x40	; 64
    1ea8:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	89 a7       	std	Y+41, r24	; 0x29
    1eb2:	9a a7       	std	Y+42, r25	; 0x2a
    1eb4:	ab a7       	std	Y+43, r26	; 0x2b
    1eb6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1eb8:	69 a5       	ldd	r22, Y+41	; 0x29
    1eba:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ebc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ebe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e8       	ldi	r20, 0x80	; 128
    1ec6:	5f e3       	ldi	r21, 0x3F	; 63
    1ec8:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    1ecc:	88 23       	and	r24, r24
    1ece:	1c f4       	brge	.+6      	; 0x1ed6 <CLCD_voidSendCommand+0x8a>
		__ticks = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	88 a7       	std	Y+40, r24	; 0x28
    1ed4:	91 c0       	rjmp	.+290    	; 0x1ff8 <CLCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    1ed6:	69 a5       	ldd	r22, Y+41	; 0x29
    1ed8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1edc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	53 e4       	ldi	r21, 0x43	; 67
    1ee6:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	0c f0       	brlt	.+2      	; 0x1ef0 <CLCD_voidSendCommand+0xa4>
    1eee:	7b c0       	rjmp	.+246    	; 0x1fe6 <CLCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ef0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ef2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8c a3       	std	Y+36, r24	; 0x24
    1f0a:	9d a3       	std	Y+37, r25	; 0x25
    1f0c:	ae a3       	std	Y+38, r26	; 0x26
    1f0e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	6c a1       	ldd	r22, Y+36	; 0x24
    1f12:	7d a1       	ldd	r23, Y+37	; 0x25
    1f14:	8e a1       	ldd	r24, Y+38	; 0x26
    1f16:	9f a1       	ldd	r25, Y+39	; 0x27
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a ef       	ldi	r20, 0xFA	; 250
    1f1e:	54 e4       	ldi	r21, 0x44	; 68
    1f20:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	88 a3       	std	Y+32, r24	; 0x20
    1f2a:	99 a3       	std	Y+33, r25	; 0x21
    1f2c:	aa a3       	std	Y+34, r26	; 0x22
    1f2e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f30:	68 a1       	ldd	r22, Y+32	; 0x20
    1f32:	79 a1       	ldd	r23, Y+33	; 0x21
    1f34:	8a a1       	ldd	r24, Y+34	; 0x22
    1f36:	9b a1       	ldd	r25, Y+35	; 0x23
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <CLCD_voidSendCommand+0x106>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f4e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <CLCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1f52:	68 a1       	ldd	r22, Y+32	; 0x20
    1f54:	79 a1       	ldd	r23, Y+33	; 0x21
    1f56:	8a a1       	ldd	r24, Y+34	; 0x22
    1f58:	9b a1       	ldd	r25, Y+35	; 0x23
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <CLCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f6c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f6e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f70:	9f a1       	ldd	r25, Y+39	; 0x27
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f90:	8e 8f       	std	Y+30, r24	; 0x1e
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <CLCD_voidSendCommand+0x166>
    1f94:	88 ec       	ldi	r24, 0xC8	; 200
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9d 8f       	std	Y+29, r25	; 0x1d
    1f9a:	8c 8f       	std	Y+28, r24	; 0x1c
    1f9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <CLCD_voidSendCommand+0x154>
    1fa4:	9d 8f       	std	Y+29, r25	; 0x1d
    1fa6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1faa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9f 8f       	std	Y+31, r25	; 0x1f
    1fb0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <CLCD_voidSendCommand+0x148>
    1fba:	24 c0       	rjmp	.+72     	; 0x2004 <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	68 a1       	ldd	r22, Y+32	; 0x20
    1fbe:	79 a1       	ldd	r23, Y+33	; 0x21
    1fc0:	8a a1       	ldd	r24, Y+34	; 0x22
    1fc2:	9b a1       	ldd	r25, Y+35	; 0x23
    1fc4:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9f 8f       	std	Y+31, r25	; 0x1f
    1fce:	8e 8f       	std	Y+30, r24	; 0x1e
    1fd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fd4:	9b 8f       	std	Y+27, r25	; 0x1b
    1fd6:	8a 8f       	std	Y+26, r24	; 0x1a
    1fd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fda:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <CLCD_voidSendCommand+0x190>
    1fe0:	9b 8f       	std	Y+27, r25	; 0x1b
    1fe2:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <CLCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe6:	69 a5       	ldd	r22, Y+41	; 0x29
    1fe8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fea:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fec:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fee:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	88 a7       	std	Y+40, r24	; 0x28
    1ff8:	88 a5       	ldd	r24, Y+40	; 0x28
    1ffa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ffc:	89 8d       	ldd	r24, Y+25	; 0x19
    1ffe:	8a 95       	dec	r24
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <CLCD_voidSendCommand+0x1b2>
    2002:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_LOW);
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	65 e0       	ldi	r22, 0x05	; 5
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a8 e4       	ldi	r26, 0x48	; 72
    2014:	b2 e4       	ldi	r27, 0x42	; 66
    2016:	8d 8b       	std	Y+21, r24	; 0x15
    2018:	9e 8b       	std	Y+22, r25	; 0x16
    201a:	af 8b       	std	Y+23, r26	; 0x17
    201c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    201e:	6d 89       	ldd	r22, Y+21	; 0x15
    2020:	7e 89       	ldd	r23, Y+22	; 0x16
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	98 8d       	ldd	r25, Y+24	; 0x18
    2026:	2b ea       	ldi	r18, 0xAB	; 171
    2028:	3a ea       	ldi	r19, 0xAA	; 170
    202a:	4a e2       	ldi	r20, 0x2A	; 42
    202c:	50 e4       	ldi	r21, 0x40	; 64
    202e:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	89 8b       	std	Y+17, r24	; 0x11
    2038:	9a 8b       	std	Y+18, r25	; 0x12
    203a:	ab 8b       	std	Y+19, r26	; 0x13
    203c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    203e:	69 89       	ldd	r22, Y+17	; 0x11
    2040:	7a 89       	ldd	r23, Y+18	; 0x12
    2042:	8b 89       	ldd	r24, Y+19	; 0x13
    2044:	9c 89       	ldd	r25, Y+20	; 0x14
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e8       	ldi	r20, 0x80	; 128
    204c:	5f e3       	ldi	r21, 0x3F	; 63
    204e:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    2052:	88 23       	and	r24, r24
    2054:	1c f4       	brge	.+6      	; 0x205c <CLCD_voidSendCommand+0x210>
		__ticks = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	88 8b       	std	Y+16, r24	; 0x10
    205a:	91 c0       	rjmp	.+290    	; 0x217e <CLCD_voidSendCommand+0x332>
	else if (__tmp > 255)
    205c:	69 89       	ldd	r22, Y+17	; 0x11
    205e:	7a 89       	ldd	r23, Y+18	; 0x12
    2060:	8b 89       	ldd	r24, Y+19	; 0x13
    2062:	9c 89       	ldd	r25, Y+20	; 0x14
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4f e7       	ldi	r20, 0x7F	; 127
    206a:	53 e4       	ldi	r21, 0x43	; 67
    206c:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    2070:	18 16       	cp	r1, r24
    2072:	0c f0       	brlt	.+2      	; 0x2076 <CLCD_voidSendCommand+0x22a>
    2074:	7b c0       	rjmp	.+246    	; 0x216c <CLCD_voidSendCommand+0x320>
	{
		_delay_ms(__us / 1000.0);
    2076:	6d 89       	ldd	r22, Y+21	; 0x15
    2078:	7e 89       	ldd	r23, Y+22	; 0x16
    207a:	8f 89       	ldd	r24, Y+23	; 0x17
    207c:	98 8d       	ldd	r25, Y+24	; 0x18
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4a e7       	ldi	r20, 0x7A	; 122
    2084:	54 e4       	ldi	r21, 0x44	; 68
    2086:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	8c 87       	std	Y+12, r24	; 0x0c
    2090:	9d 87       	std	Y+13, r25	; 0x0d
    2092:	ae 87       	std	Y+14, r26	; 0x0e
    2094:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2096:	6c 85       	ldd	r22, Y+12	; 0x0c
    2098:	7d 85       	ldd	r23, Y+13	; 0x0d
    209a:	8e 85       	ldd	r24, Y+14	; 0x0e
    209c:	9f 85       	ldd	r25, Y+15	; 0x0f
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	4a ef       	ldi	r20, 0xFA	; 250
    20a4:	54 e4       	ldi	r21, 0x44	; 68
    20a6:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	88 87       	std	Y+8, r24	; 0x08
    20b0:	99 87       	std	Y+9, r25	; 0x09
    20b2:	aa 87       	std	Y+10, r26	; 0x0a
    20b4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20b6:	68 85       	ldd	r22, Y+8	; 0x08
    20b8:	79 85       	ldd	r23, Y+9	; 0x09
    20ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    20bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e8       	ldi	r20, 0x80	; 128
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    20ca:	88 23       	and	r24, r24
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <CLCD_voidSendCommand+0x28c>
		__ticks = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9f 83       	std	Y+7, r25	; 0x07
    20d4:	8e 83       	std	Y+6, r24	; 0x06
    20d6:	3f c0       	rjmp	.+126    	; 0x2156 <CLCD_voidSendCommand+0x30a>
	else if (__tmp > 65535)
    20d8:	68 85       	ldd	r22, Y+8	; 0x08
    20da:	79 85       	ldd	r23, Y+9	; 0x09
    20dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20de:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	4c f5       	brge	.+82     	; 0x2142 <CLCD_voidSendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    20f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    20f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e2       	ldi	r20, 0x20	; 32
    20fe:	51 e4       	ldi	r21, 0x41	; 65
    2100:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	9f 83       	std	Y+7, r25	; 0x07
    2116:	8e 83       	std	Y+6, r24	; 0x06
    2118:	0f c0       	rjmp	.+30     	; 0x2138 <CLCD_voidSendCommand+0x2ec>
    211a:	88 ec       	ldi	r24, 0xC8	; 200
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9d 83       	std	Y+5, r25	; 0x05
    2120:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2122:	8c 81       	ldd	r24, Y+4	; 0x04
    2124:	9d 81       	ldd	r25, Y+5	; 0x05
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <CLCD_voidSendCommand+0x2da>
    212a:	9d 83       	std	Y+5, r25	; 0x05
    212c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212e:	8e 81       	ldd	r24, Y+6	; 0x06
    2130:	9f 81       	ldd	r25, Y+7	; 0x07
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	9f 83       	std	Y+7, r25	; 0x07
    2136:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2138:	8e 81       	ldd	r24, Y+6	; 0x06
    213a:	9f 81       	ldd	r25, Y+7	; 0x07
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f7       	brne	.-38     	; 0x211a <CLCD_voidSendCommand+0x2ce>
    2140:	24 c0       	rjmp	.+72     	; 0x218a <CLCD_voidSendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	68 85       	ldd	r22, Y+8	; 0x08
    2144:	79 85       	ldd	r23, Y+9	; 0x09
    2146:	8a 85       	ldd	r24, Y+10	; 0x0a
    2148:	9b 85       	ldd	r25, Y+11	; 0x0b
    214a:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9f 83       	std	Y+7, r25	; 0x07
    2154:	8e 83       	std	Y+6, r24	; 0x06
    2156:	8e 81       	ldd	r24, Y+6	; 0x06
    2158:	9f 81       	ldd	r25, Y+7	; 0x07
    215a:	9b 83       	std	Y+3, r25	; 0x03
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <CLCD_voidSendCommand+0x316>
    2166:	9b 83       	std	Y+3, r25	; 0x03
    2168:	8a 83       	std	Y+2, r24	; 0x02
    216a:	0f c0       	rjmp	.+30     	; 0x218a <CLCD_voidSendCommand+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    216c:	69 89       	ldd	r22, Y+17	; 0x11
    216e:	7a 89       	ldd	r23, Y+18	; 0x12
    2170:	8b 89       	ldd	r24, Y+19	; 0x13
    2172:	9c 89       	ldd	r25, Y+20	; 0x14
    2174:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	88 8b       	std	Y+16, r24	; 0x10
    217e:	88 89       	ldd	r24, Y+16	; 0x10
    2180:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	8a 95       	dec	r24
    2186:	f1 f7       	brne	.-4      	; 0x2184 <CLCD_voidSendCommand+0x338>
    2188:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

}
    218a:	e1 96       	adiw	r28, 0x31	; 49
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <CLCD_voidSendData>:
void CLCD_voidSendData		(u8 Copy_u8Data		)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	e1 97       	sbiw	r28, 0x31	; 49
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	89 ab       	std	Y+49, r24	; 0x31
	/*RS -> High (To Send Data )*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_HIGH);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	67 e0       	ldi	r22, 0x07	; 7
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
		/*RW -> Low	(To Write)*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	66 e0       	ldi	r22, 0x06	; 6
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
		/*	Send Command */
		DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Data);
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	69 a9       	ldd	r22, Y+49	; 0x31
    21ca:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_voidSetPortValue>
		/*Enable Sequence */
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_HIGH);
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	65 e0       	ldi	r22, 0x05	; 5
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e8       	ldi	r26, 0x80	; 128
    21de:	bf e3       	ldi	r27, 0x3F	; 63
    21e0:	8d a7       	std	Y+45, r24	; 0x2d
    21e2:	9e a7       	std	Y+46, r25	; 0x2e
    21e4:	af a7       	std	Y+47, r26	; 0x2f
    21e6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    21ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    21ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ee:	98 a9       	ldd	r25, Y+48	; 0x30
    21f0:	2b ea       	ldi	r18, 0xAB	; 171
    21f2:	3a ea       	ldi	r19, 0xAA	; 170
    21f4:	4a e2       	ldi	r20, 0x2A	; 42
    21f6:	50 e4       	ldi	r21, 0x40	; 64
    21f8:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	89 a7       	std	Y+41, r24	; 0x29
    2202:	9a a7       	std	Y+42, r25	; 0x2a
    2204:	ab a7       	std	Y+43, r26	; 0x2b
    2206:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2208:	69 a5       	ldd	r22, Y+41	; 0x29
    220a:	7a a5       	ldd	r23, Y+42	; 0x2a
    220c:	8b a5       	ldd	r24, Y+43	; 0x2b
    220e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	1c f4       	brge	.+6      	; 0x2226 <CLCD_voidSendData+0x8a>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	88 a7       	std	Y+40, r24	; 0x28
    2224:	91 c0       	rjmp	.+290    	; 0x2348 <CLCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    2226:	69 a5       	ldd	r22, Y+41	; 0x29
    2228:	7a a5       	ldd	r23, Y+42	; 0x2a
    222a:	8b a5       	ldd	r24, Y+43	; 0x2b
    222c:	9c a5       	ldd	r25, Y+44	; 0x2c
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	53 e4       	ldi	r21, 0x43	; 67
    2236:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	0c f0       	brlt	.+2      	; 0x2240 <CLCD_voidSendData+0xa4>
    223e:	7b c0       	rjmp	.+246    	; 0x2336 <CLCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2240:	6d a5       	ldd	r22, Y+45	; 0x2d
    2242:	7e a5       	ldd	r23, Y+46	; 0x2e
    2244:	8f a5       	ldd	r24, Y+47	; 0x2f
    2246:	98 a9       	ldd	r25, Y+48	; 0x30
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4a e7       	ldi	r20, 0x7A	; 122
    224e:	54 e4       	ldi	r21, 0x44	; 68
    2250:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8c a3       	std	Y+36, r24	; 0x24
    225a:	9d a3       	std	Y+37, r25	; 0x25
    225c:	ae a3       	std	Y+38, r26	; 0x26
    225e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2260:	6c a1       	ldd	r22, Y+36	; 0x24
    2262:	7d a1       	ldd	r23, Y+37	; 0x25
    2264:	8e a1       	ldd	r24, Y+38	; 0x26
    2266:	9f a1       	ldd	r25, Y+39	; 0x27
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a ef       	ldi	r20, 0xFA	; 250
    226e:	54 e4       	ldi	r21, 0x44	; 68
    2270:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	88 a3       	std	Y+32, r24	; 0x20
    227a:	99 a3       	std	Y+33, r25	; 0x21
    227c:	aa a3       	std	Y+34, r26	; 0x22
    227e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2280:	68 a1       	ldd	r22, Y+32	; 0x20
    2282:	79 a1       	ldd	r23, Y+33	; 0x21
    2284:	8a a1       	ldd	r24, Y+34	; 0x22
    2286:	9b a1       	ldd	r25, Y+35	; 0x23
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    2294:	88 23       	and	r24, r24
    2296:	2c f4       	brge	.+10     	; 0x22a2 <CLCD_voidSendData+0x106>
		__ticks = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9f 8f       	std	Y+31, r25	; 0x1f
    229e:	8e 8f       	std	Y+30, r24	; 0x1e
    22a0:	3f c0       	rjmp	.+126    	; 0x2320 <CLCD_voidSendData+0x184>
	else if (__tmp > 65535)
    22a2:	68 a1       	ldd	r22, Y+32	; 0x20
    22a4:	79 a1       	ldd	r23, Y+33	; 0x21
    22a6:	8a a1       	ldd	r24, Y+34	; 0x22
    22a8:	9b a1       	ldd	r25, Y+35	; 0x23
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    22b6:	18 16       	cp	r1, r24
    22b8:	4c f5       	brge	.+82     	; 0x230c <CLCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ba:	6c a1       	ldd	r22, Y+36	; 0x24
    22bc:	7d a1       	ldd	r23, Y+37	; 0x25
    22be:	8e a1       	ldd	r24, Y+38	; 0x26
    22c0:	9f a1       	ldd	r25, Y+39	; 0x27
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e2       	ldi	r20, 0x20	; 32
    22c8:	51 e4       	ldi	r21, 0x41	; 65
    22ca:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9f 8f       	std	Y+31, r25	; 0x1f
    22e0:	8e 8f       	std	Y+30, r24	; 0x1e
    22e2:	0f c0       	rjmp	.+30     	; 0x2302 <CLCD_voidSendData+0x166>
    22e4:	88 ec       	ldi	r24, 0xC8	; 200
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9d 8f       	std	Y+29, r25	; 0x1d
    22ea:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <CLCD_voidSendData+0x154>
    22f4:	9d 8f       	std	Y+29, r25	; 0x1d
    22f6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	9f 8f       	std	Y+31, r25	; 0x1f
    2300:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2304:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	69 f7       	brne	.-38     	; 0x22e4 <CLCD_voidSendData+0x148>
    230a:	24 c0       	rjmp	.+72     	; 0x2354 <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230c:	68 a1       	ldd	r22, Y+32	; 0x20
    230e:	79 a1       	ldd	r23, Y+33	; 0x21
    2310:	8a a1       	ldd	r24, Y+34	; 0x22
    2312:	9b a1       	ldd	r25, Y+35	; 0x23
    2314:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9f 8f       	std	Y+31, r25	; 0x1f
    231e:	8e 8f       	std	Y+30, r24	; 0x1e
    2320:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2322:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2324:	9b 8f       	std	Y+27, r25	; 0x1b
    2326:	8a 8f       	std	Y+26, r24	; 0x1a
    2328:	8a 8d       	ldd	r24, Y+26	; 0x1a
    232a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <CLCD_voidSendData+0x190>
    2330:	9b 8f       	std	Y+27, r25	; 0x1b
    2332:	8a 8f       	std	Y+26, r24	; 0x1a
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <CLCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2336:	69 a5       	ldd	r22, Y+41	; 0x29
    2338:	7a a5       	ldd	r23, Y+42	; 0x2a
    233a:	8b a5       	ldd	r24, Y+43	; 0x2b
    233c:	9c a5       	ldd	r25, Y+44	; 0x2c
    233e:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	88 a7       	std	Y+40, r24	; 0x28
    2348:	88 a5       	ldd	r24, Y+40	; 0x28
    234a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    234c:	89 8d       	ldd	r24, Y+25	; 0x19
    234e:	8a 95       	dec	r24
    2350:	f1 f7       	brne	.-4      	; 0x234e <CLCD_voidSendData+0x1b2>
    2352:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_LOW);
    2354:	82 e0       	ldi	r24, 0x02	; 2
    2356:	65 e0       	ldi	r22, 0x05	; 5
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_voidSetPinValue>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a8 e4       	ldi	r26, 0x48	; 72
    2364:	b2 e4       	ldi	r27, 0x42	; 66
    2366:	8d 8b       	std	Y+21, r24	; 0x15
    2368:	9e 8b       	std	Y+22, r25	; 0x16
    236a:	af 8b       	std	Y+23, r26	; 0x17
    236c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    236e:	6d 89       	ldd	r22, Y+21	; 0x15
    2370:	7e 89       	ldd	r23, Y+22	; 0x16
    2372:	8f 89       	ldd	r24, Y+23	; 0x17
    2374:	98 8d       	ldd	r25, Y+24	; 0x18
    2376:	2b ea       	ldi	r18, 0xAB	; 171
    2378:	3a ea       	ldi	r19, 0xAA	; 170
    237a:	4a e2       	ldi	r20, 0x2A	; 42
    237c:	50 e4       	ldi	r21, 0x40	; 64
    237e:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	89 8b       	std	Y+17, r24	; 0x11
    2388:	9a 8b       	std	Y+18, r25	; 0x12
    238a:	ab 8b       	std	Y+19, r26	; 0x13
    238c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    238e:	69 89       	ldd	r22, Y+17	; 0x11
    2390:	7a 89       	ldd	r23, Y+18	; 0x12
    2392:	8b 89       	ldd	r24, Y+19	; 0x13
    2394:	9c 89       	ldd	r25, Y+20	; 0x14
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e8       	ldi	r20, 0x80	; 128
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	1c f4       	brge	.+6      	; 0x23ac <CLCD_voidSendData+0x210>
		__ticks = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	88 8b       	std	Y+16, r24	; 0x10
    23aa:	91 c0       	rjmp	.+290    	; 0x24ce <CLCD_voidSendData+0x332>
	else if (__tmp > 255)
    23ac:	69 89       	ldd	r22, Y+17	; 0x11
    23ae:	7a 89       	ldd	r23, Y+18	; 0x12
    23b0:	8b 89       	ldd	r24, Y+19	; 0x13
    23b2:	9c 89       	ldd	r25, Y+20	; 0x14
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	53 e4       	ldi	r21, 0x43	; 67
    23bc:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	0c f0       	brlt	.+2      	; 0x23c6 <CLCD_voidSendData+0x22a>
    23c4:	7b c0       	rjmp	.+246    	; 0x24bc <CLCD_voidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
    23c6:	6d 89       	ldd	r22, Y+21	; 0x15
    23c8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ca:	8f 89       	ldd	r24, Y+23	; 0x17
    23cc:	98 8d       	ldd	r25, Y+24	; 0x18
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a e7       	ldi	r20, 0x7A	; 122
    23d4:	54 e4       	ldi	r21, 0x44	; 68
    23d6:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	8c 87       	std	Y+12, r24	; 0x0c
    23e0:	9d 87       	std	Y+13, r25	; 0x0d
    23e2:	ae 87       	std	Y+14, r26	; 0x0e
    23e4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    23e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    23ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	4a ef       	ldi	r20, 0xFA	; 250
    23f4:	54 e4       	ldi	r21, 0x44	; 68
    23f6:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	88 87       	std	Y+8, r24	; 0x08
    2400:	99 87       	std	Y+9, r25	; 0x09
    2402:	aa 87       	std	Y+10, r26	; 0x0a
    2404:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2406:	68 85       	ldd	r22, Y+8	; 0x08
    2408:	79 85       	ldd	r23, Y+9	; 0x09
    240a:	8a 85       	ldd	r24, Y+10	; 0x0a
    240c:	9b 85       	ldd	r25, Y+11	; 0x0b
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    241a:	88 23       	and	r24, r24
    241c:	2c f4       	brge	.+10     	; 0x2428 <CLCD_voidSendData+0x28c>
		__ticks = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9f 83       	std	Y+7, r25	; 0x07
    2424:	8e 83       	std	Y+6, r24	; 0x06
    2426:	3f c0       	rjmp	.+126    	; 0x24a6 <CLCD_voidSendData+0x30a>
	else if (__tmp > 65535)
    2428:	68 85       	ldd	r22, Y+8	; 0x08
    242a:	79 85       	ldd	r23, Y+9	; 0x09
    242c:	8a 85       	ldd	r24, Y+10	; 0x0a
    242e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	3f ef       	ldi	r19, 0xFF	; 255
    2434:	4f e7       	ldi	r20, 0x7F	; 127
    2436:	57 e4       	ldi	r21, 0x47	; 71
    2438:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    243c:	18 16       	cp	r1, r24
    243e:	4c f5       	brge	.+82     	; 0x2492 <CLCD_voidSendData+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2440:	6c 85       	ldd	r22, Y+12	; 0x0c
    2442:	7d 85       	ldd	r23, Y+13	; 0x0d
    2444:	8e 85       	ldd	r24, Y+14	; 0x0e
    2446:	9f 85       	ldd	r25, Y+15	; 0x0f
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e2       	ldi	r20, 0x20	; 32
    244e:	51 e4       	ldi	r21, 0x41	; 65
    2450:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	9f 83       	std	Y+7, r25	; 0x07
    2466:	8e 83       	std	Y+6, r24	; 0x06
    2468:	0f c0       	rjmp	.+30     	; 0x2488 <CLCD_voidSendData+0x2ec>
    246a:	88 ec       	ldi	r24, 0xC8	; 200
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9d 83       	std	Y+5, r25	; 0x05
    2470:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	9d 81       	ldd	r25, Y+5	; 0x05
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <CLCD_voidSendData+0x2da>
    247a:	9d 83       	std	Y+5, r25	; 0x05
    247c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247e:	8e 81       	ldd	r24, Y+6	; 0x06
    2480:	9f 81       	ldd	r25, Y+7	; 0x07
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	9f 83       	std	Y+7, r25	; 0x07
    2486:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2488:	8e 81       	ldd	r24, Y+6	; 0x06
    248a:	9f 81       	ldd	r25, Y+7	; 0x07
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	69 f7       	brne	.-38     	; 0x246a <CLCD_voidSendData+0x2ce>
    2490:	24 c0       	rjmp	.+72     	; 0x24da <CLCD_voidSendData+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2492:	68 85       	ldd	r22, Y+8	; 0x08
    2494:	79 85       	ldd	r23, Y+9	; 0x09
    2496:	8a 85       	ldd	r24, Y+10	; 0x0a
    2498:	9b 85       	ldd	r25, Y+11	; 0x0b
    249a:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9f 83       	std	Y+7, r25	; 0x07
    24a4:	8e 83       	std	Y+6, r24	; 0x06
    24a6:	8e 81       	ldd	r24, Y+6	; 0x06
    24a8:	9f 81       	ldd	r25, Y+7	; 0x07
    24aa:	9b 83       	std	Y+3, r25	; 0x03
    24ac:	8a 83       	std	Y+2, r24	; 0x02
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	9b 81       	ldd	r25, Y+3	; 0x03
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <CLCD_voidSendData+0x316>
    24b6:	9b 83       	std	Y+3, r25	; 0x03
    24b8:	8a 83       	std	Y+2, r24	; 0x02
    24ba:	0f c0       	rjmp	.+30     	; 0x24da <CLCD_voidSendData+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24bc:	69 89       	ldd	r22, Y+17	; 0x11
    24be:	7a 89       	ldd	r23, Y+18	; 0x12
    24c0:	8b 89       	ldd	r24, Y+19	; 0x13
    24c2:	9c 89       	ldd	r25, Y+20	; 0x14
    24c4:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	88 8b       	std	Y+16, r24	; 0x10
    24ce:	88 89       	ldd	r24, Y+16	; 0x10
    24d0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	8a 95       	dec	r24
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <CLCD_voidSendData+0x338>
    24d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(50);

}
    24da:	e1 96       	adiw	r28, 0x31	; 49
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <CLCD_voidSetPosition>:

void CLCD_voidSetPosition	(u8 Copy_u8Row , u8 Copy_u8Col)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <CLCD_voidSetPosition+0x6>
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <CLCD_voidSetPosition+0x8>
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Row)
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	3c 83       	std	Y+4, r19	; 0x04
    2504:	2b 83       	std	Y+3, r18	; 0x03
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	91 05       	cpc	r25, r1
    250e:	31 f0       	breq	.+12     	; 0x251c <CLCD_voidSetPosition+0x30>
    2510:	2b 81       	ldd	r18, Y+3	; 0x03
    2512:	3c 81       	ldd	r19, Y+4	; 0x04
    2514:	22 30       	cpi	r18, 0x02	; 2
    2516:	31 05       	cpc	r19, r1
    2518:	31 f0       	breq	.+12     	; 0x2526 <CLCD_voidSetPosition+0x3a>
    251a:	09 c0       	rjmp	.+18     	; 0x252e <CLCD_voidSetPosition+0x42>
	{
	case CLCD_ROW_1:	CLCD_voidSendCommand(	FIRST_PLACE_IN_ROW1 + Copy_u8Col - 1);
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	81 58       	subi	r24, 0x81	; 129
    2520:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendCommand>
    2524:	04 c0       	rjmp	.+8      	; 0x252e <CLCD_voidSetPosition+0x42>
		break;
	case CLCD_ROW_2 :	CLCD_voidSendCommand(	FIRST_PLACE_IN_ROW2 + Copy_u8Col - 1);
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	81 54       	subi	r24, 0x41	; 65
    252a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendCommand>
		break ;
	default :
		break;
	}
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <CLCD_voidSendExtraChar>:

void CLCD_voidSendExtraChar	(u8 Copy_u8PatternLocation , u8 * Copy_pu8ExtraChar , u8 Copy_u8Row , u8 Copy_u8Col )
{
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	27 97       	sbiw	r28, 0x07	; 7
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	8b 83       	std	Y+3, r24	; 0x03
    2552:	7d 83       	std	Y+5, r23	; 0x05
    2554:	6c 83       	std	Y+4, r22	; 0x04
    2556:	4e 83       	std	Y+6, r20	; 0x06
    2558:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address_INCREMENT = 0 ;
    255a:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	88 2f       	mov	r24, r24
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	8a 83       	std	Y+2, r24	; 0x02
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	80 5c       	subi	r24, 0xC0	; 192
    2574:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendCommand>
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++)
    2578:	19 82       	std	Y+1, r1	; 0x01
    257a:	0e c0       	rjmp	.+28     	; 0x2598 <CLCD_voidSendExtraChar+0x5c>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	8c 81       	ldd	r24, Y+4	; 0x04
    2584:	9d 81       	ldd	r25, Y+5	; 0x05
    2586:	fc 01       	movw	r30, r24
    2588:	e2 0f       	add	r30, r18
    258a:	f3 1f       	adc	r31, r19
    258c:	80 81       	ld	r24, Z
    258e:	0e 94 ce 10 	call	0x219c	; 0x219c <CLCD_voidSendData>
	u8 Local_u8Address_INCREMENT = 0 ;
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++)
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	8f 5f       	subi	r24, 0xFF	; 255
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	88 30       	cpi	r24, 0x08	; 8
    259c:	78 f3       	brcs	.-34     	; 0x257c <CLCD_voidSendExtraChar+0x40>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}
	/*Back to DDRAM */
	CLCD_voidSetPosition(Copy_u8Row , Copy_u8Col);
    259e:	8e 81       	ldd	r24, Y+6	; 0x06
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
	/*Draw Character on display */
	CLCD_voidSendData(Copy_u8PatternLocation);
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	0e 94 ce 10 	call	0x219c	; 0x219c <CLCD_voidSendData>
}
    25ac:	27 96       	adiw	r28, 0x07	; 7
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <CLCD_voidStoreExtraChar>:
void CLCD_voidStoreExtraChar(u8 Copy_u8PatternLocation , u8 * Copy_pu8ExtraChar )
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <CLCD_voidStoreExtraChar+0x6>
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <CLCD_voidStoreExtraChar+0x8>
    25c6:	0f 92       	push	r0
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	8b 83       	std	Y+3, r24	; 0x03
    25ce:	7d 83       	std	Y+5, r23	; 0x05
    25d0:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Address_INCREMENT = 0 ;
    25d2:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	88 2f       	mov	r24, r24
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	8a 83       	std	Y+2, r24	; 0x02
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	80 5c       	subi	r24, 0xC0	; 192
    25ec:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendCommand>
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++){
    25f0:	19 82       	std	Y+1, r1	; 0x01
    25f2:	0e c0       	rjmp	.+28     	; 0x2610 <CLCD_voidStoreExtraChar+0x52>
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	9d 81       	ldd	r25, Y+5	; 0x05
    25fe:	fc 01       	movw	r30, r24
    2600:	e2 0f       	add	r30, r18
    2602:	f3 1f       	adc	r31, r19
    2604:	80 81       	ld	r24, Z
    2606:	0e 94 ce 10 	call	0x219c	; 0x219c <CLCD_voidSendData>
	u8 Local_u8Address_INCREMENT = 0 ;
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++){
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	8f 5f       	subi	r24, 0xFF	; 255
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	88 30       	cpi	r24, 0x08	; 8
    2614:	78 f3       	brcs	.-34     	; 0x25f4 <CLCD_voidStoreExtraChar+0x36>
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}


}
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <CLCD_voidSendString>:
void CLCD_voidSendString	(u8 *Copy_pu8String )
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	61 97       	sbiw	r28, 0x11	; 17
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	99 8b       	std	Y+17, r25	; 0x11
    263c:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Iterator = 0 ;
    263e:	1f 86       	std	Y+15, r1	; 0x0f
    2640:	80 c0       	rjmp	.+256    	; 0x2742 <CLCD_voidSendString+0x11c>
	while(Copy_pu8String[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
    2642:	8f 85       	ldd	r24, Y+15	; 0x0f
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	88 89       	ldd	r24, Y+16	; 0x10
    264a:	99 89       	ldd	r25, Y+17	; 0x11
    264c:	fc 01       	movw	r30, r24
    264e:	e2 0f       	add	r30, r18
    2650:	f3 1f       	adc	r31, r19
    2652:	80 81       	ld	r24, Z
    2654:	0e 94 ce 10 	call	0x219c	; 0x219c <CLCD_voidSendData>
		Local_u8Iterator ++ ;
    2658:	8f 85       	ldd	r24, Y+15	; 0x0f
    265a:	8f 5f       	subi	r24, 0xFF	; 255
    265c:	8f 87       	std	Y+15, r24	; 0x0f
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	b0 e4       	ldi	r27, 0x40	; 64
    2666:	8b 87       	std	Y+11, r24	; 0x0b
    2668:	9c 87       	std	Y+12, r25	; 0x0c
    266a:	ad 87       	std	Y+13, r26	; 0x0d
    266c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2670:	7c 85       	ldd	r23, Y+12	; 0x0c
    2672:	8d 85       	ldd	r24, Y+13	; 0x0d
    2674:	9e 85       	ldd	r25, Y+14	; 0x0e
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4a ef       	ldi	r20, 0xFA	; 250
    267c:	54 e4       	ldi	r21, 0x44	; 68
    267e:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	8f 83       	std	Y+7, r24	; 0x07
    2688:	98 87       	std	Y+8, r25	; 0x08
    268a:	a9 87       	std	Y+9, r26	; 0x09
    268c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e8       	ldi	r20, 0x80	; 128
    269c:	5f e3       	ldi	r21, 0x3F	; 63
    269e:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    26a2:	88 23       	and	r24, r24
    26a4:	2c f4       	brge	.+10     	; 0x26b0 <CLCD_voidSendString+0x8a>
		__ticks = 1;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9e 83       	std	Y+6, r25	; 0x06
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    26ae:	3f c0       	rjmp	.+126    	; 0x272e <CLCD_voidSendString+0x108>
	else if (__tmp > 65535)
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	3f ef       	ldi	r19, 0xFF	; 255
    26bc:	4f e7       	ldi	r20, 0x7F	; 127
    26be:	57 e4       	ldi	r21, 0x47	; 71
    26c0:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    26c4:	18 16       	cp	r1, r24
    26c6:	4c f5       	brge	.+82     	; 0x271a <CLCD_voidSendString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    26cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e2       	ldi	r20, 0x20	; 32
    26d6:	51 e4       	ldi	r21, 0x41	; 65
    26d8:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	bc 01       	movw	r22, r24
    26e2:	cd 01       	movw	r24, r26
    26e4:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	0f c0       	rjmp	.+30     	; 0x2710 <CLCD_voidSendString+0xea>
    26f2:	88 ec       	ldi	r24, 0xC8	; 200
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <CLCD_voidSendString+0xd8>
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	69 f7       	brne	.-38     	; 0x26f2 <CLCD_voidSendString+0xcc>
    2718:	14 c0       	rjmp	.+40     	; 0x2742 <CLCD_voidSendString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271a:	6f 81       	ldd	r22, Y+7	; 0x07
    271c:	78 85       	ldd	r23, Y+8	; 0x08
    271e:	89 85       	ldd	r24, Y+9	; 0x09
    2720:	9a 85       	ldd	r25, Y+10	; 0x0a
    2722:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	8d 81       	ldd	r24, Y+5	; 0x05
    2730:	9e 81       	ldd	r25, Y+6	; 0x06
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	9a 81       	ldd	r25, Y+2	; 0x02
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <CLCD_voidSendString+0x114>
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01

}
void CLCD_voidSendString	(u8 *Copy_pu8String )
{
	u8 Local_u8Iterator = 0 ;
	while(Copy_pu8String[Local_u8Iterator] != '\0')
    2742:	8f 85       	ldd	r24, Y+15	; 0x0f
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	88 89       	ldd	r24, Y+16	; 0x10
    274a:	99 89       	ldd	r25, Y+17	; 0x11
    274c:	fc 01       	movw	r30, r24
    274e:	e2 0f       	add	r30, r18
    2750:	f3 1f       	adc	r31, r19
    2752:	80 81       	ld	r24, Z
    2754:	88 23       	and	r24, r24
    2756:	09 f0       	breq	.+2      	; 0x275a <CLCD_voidSendString+0x134>
    2758:	74 cf       	rjmp	.-280    	; 0x2642 <CLCD_voidSendString+0x1c>
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
		Local_u8Iterator ++ ;
		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}
}
    275a:	61 96       	adiw	r28, 0x11	; 17
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <CLCD_voidSendu32Number>:

void CLCD_voidSendu32Number (u32 Copy_u32Number){
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	66 97       	sbiw	r28, 0x16	; 22
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	6b 8b       	std	Y+19, r22	; 0x13
    2782:	7c 8b       	std	Y+20, r23	; 0x14
    2784:	8d 8b       	std	Y+21, r24	; 0x15
    2786:	9e 8b       	std	Y+22, r25	; 0x16
	if(Copy_u32Number!=0)
    2788:	8b 89       	ldd	r24, Y+19	; 0x13
    278a:	9c 89       	ldd	r25, Y+20	; 0x14
    278c:	ad 89       	ldd	r26, Y+21	; 0x15
    278e:	be 89       	ldd	r27, Y+22	; 0x16
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	a1 05       	cpc	r26, r1
    2794:	b1 05       	cpc	r27, r1
    2796:	09 f4       	brne	.+2      	; 0x279a <CLCD_voidSendu32Number+0x2e>
    2798:	9e c0       	rjmp	.+316    	; 0x28d6 <CLCD_voidSendu32Number+0x16a>
	{
		u8 arr[11];
		u32 temp;
		u8 Local_u8Iterator=0,Itr1=0,Itr2=0;
    279a:	1b 82       	std	Y+3, r1	; 0x03
    279c:	1a 82       	std	Y+2, r1	; 0x02
    279e:	19 82       	std	Y+1, r1	; 0x01
    27a0:	31 c0       	rjmp	.+98     	; 0x2804 <CLCD_voidSendu32Number+0x98>
		// filling array with number reversed in order
		while(Copy_u32Number!=0)
		{
			temp=Copy_u32Number%10;
    27a2:	8b 89       	ldd	r24, Y+19	; 0x13
    27a4:	9c 89       	ldd	r25, Y+20	; 0x14
    27a6:	ad 89       	ldd	r26, Y+21	; 0x15
    27a8:	be 89       	ldd	r27, Y+22	; 0x16
    27aa:	2a e0       	ldi	r18, 0x0A	; 10
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__udivmodsi4>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	8c 83       	std	Y+4, r24	; 0x04
    27c0:	9d 83       	std	Y+5, r25	; 0x05
    27c2:	ae 83       	std	Y+6, r26	; 0x06
    27c4:	bf 83       	std	Y+7, r27	; 0x07
			arr[Local_u8Iterator]=temp;
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4c 81       	ldd	r20, Y+4	; 0x04
    27ce:	ce 01       	movw	r24, r28
    27d0:	08 96       	adiw	r24, 0x08	; 8
    27d2:	fc 01       	movw	r30, r24
    27d4:	e2 0f       	add	r30, r18
    27d6:	f3 1f       	adc	r31, r19
    27d8:	40 83       	st	Z, r20
			Local_u8Iterator++;
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32Number/=10;
    27e0:	8b 89       	ldd	r24, Y+19	; 0x13
    27e2:	9c 89       	ldd	r25, Y+20	; 0x14
    27e4:	ad 89       	ldd	r26, Y+21	; 0x15
    27e6:	be 89       	ldd	r27, Y+22	; 0x16
    27e8:	2a e0       	ldi	r18, 0x0A	; 10
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__udivmodsi4>
    27f8:	da 01       	movw	r26, r20
    27fa:	c9 01       	movw	r24, r18
    27fc:	8b 8b       	std	Y+19, r24	; 0x13
    27fe:	9c 8b       	std	Y+20, r25	; 0x14
    2800:	ad 8b       	std	Y+21, r26	; 0x15
    2802:	be 8b       	std	Y+22, r27	; 0x16
	{
		u8 arr[11];
		u32 temp;
		u8 Local_u8Iterator=0,Itr1=0,Itr2=0;
		// filling array with number reversed in order
		while(Copy_u32Number!=0)
    2804:	8b 89       	ldd	r24, Y+19	; 0x13
    2806:	9c 89       	ldd	r25, Y+20	; 0x14
    2808:	ad 89       	ldd	r26, Y+21	; 0x15
    280a:	be 89       	ldd	r27, Y+22	; 0x16
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	a1 05       	cpc	r26, r1
    2810:	b1 05       	cpc	r27, r1
    2812:	39 f6       	brne	.-114    	; 0x27a2 <CLCD_voidSendu32Number+0x36>
			temp=Copy_u32Number%10;
			arr[Local_u8Iterator]=temp;
			Local_u8Iterator++;
			Copy_u32Number/=10;
		}
		arr[Local_u8Iterator]='x'; // null char
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	ce 01       	movw	r24, r28
    281c:	08 96       	adiw	r24, 0x08	; 8
    281e:	fc 01       	movw	r30, r24
    2820:	e2 0f       	add	r30, r18
    2822:	f3 1f       	adc	r31, r19
    2824:	88 e7       	ldi	r24, 0x78	; 120
    2826:	80 83       	st	Z, r24
		Local_u8Iterator--;
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	81 50       	subi	r24, 0x01	; 1
    282c:	8b 83       	std	Y+3, r24	; 0x03
    282e:	33 c0       	rjmp	.+102    	; 0x2896 <CLCD_voidSendu32Number+0x12a>
		// re arrange the array
		while(Itr1<Local_u8Iterator)
		{
			// swap
			temp=arr[Itr1];
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	28 2f       	mov	r18, r24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	ce 01       	movw	r24, r28
    2838:	08 96       	adiw	r24, 0x08	; 8
    283a:	fc 01       	movw	r30, r24
    283c:	e2 0f       	add	r30, r18
    283e:	f3 1f       	adc	r31, r19
    2840:	80 81       	ld	r24, Z
    2842:	88 2f       	mov	r24, r24
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	a0 e0       	ldi	r26, 0x00	; 0
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	8c 83       	std	Y+4, r24	; 0x04
    284c:	9d 83       	std	Y+5, r25	; 0x05
    284e:	ae 83       	std	Y+6, r26	; 0x06
    2850:	bf 83       	std	Y+7, r27	; 0x07
			arr[Itr1]=arr[Local_u8Iterator];
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	48 2f       	mov	r20, r24
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	ce 01       	movw	r24, r28
    2860:	08 96       	adiw	r24, 0x08	; 8
    2862:	fc 01       	movw	r30, r24
    2864:	e2 0f       	add	r30, r18
    2866:	f3 1f       	adc	r31, r19
    2868:	20 81       	ld	r18, Z
    286a:	ce 01       	movw	r24, r28
    286c:	08 96       	adiw	r24, 0x08	; 8
    286e:	fc 01       	movw	r30, r24
    2870:	e4 0f       	add	r30, r20
    2872:	f5 1f       	adc	r31, r21
    2874:	20 83       	st	Z, r18
			arr[Local_u8Iterator]=temp;
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	28 2f       	mov	r18, r24
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4c 81       	ldd	r20, Y+4	; 0x04
    287e:	ce 01       	movw	r24, r28
    2880:	08 96       	adiw	r24, 0x08	; 8
    2882:	fc 01       	movw	r30, r24
    2884:	e2 0f       	add	r30, r18
    2886:	f3 1f       	adc	r31, r19
    2888:	40 83       	st	Z, r20
			Itr1++;
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8Iterator--;
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	81 50       	subi	r24, 0x01	; 1
    2894:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32Number/=10;
		}
		arr[Local_u8Iterator]='x'; // null char
		Local_u8Iterator--;
		// re arrange the array
		while(Itr1<Local_u8Iterator)
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	98 17       	cp	r25, r24
    289c:	48 f2       	brcs	.-110    	; 0x2830 <CLCD_voidSendu32Number+0xc4>
    289e:	0f c0       	rjmp	.+30     	; 0x28be <CLCD_voidSendu32Number+0x152>
			Itr1++;
			Local_u8Iterator--;
		}
		while(arr[Itr2]!='x')
		{
			CLCD_voidSendData(arr[Itr2]+'0');
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	ce 01       	movw	r24, r28
    28a8:	08 96       	adiw	r24, 0x08	; 8
    28aa:	fc 01       	movw	r30, r24
    28ac:	e2 0f       	add	r30, r18
    28ae:	f3 1f       	adc	r31, r19
    28b0:	80 81       	ld	r24, Z
    28b2:	80 5d       	subi	r24, 0xD0	; 208
    28b4:	0e 94 ce 10 	call	0x219c	; 0x219c <CLCD_voidSendData>
			Itr2++;
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	89 83       	std	Y+1, r24	; 0x01
			arr[Itr1]=arr[Local_u8Iterator];
			arr[Local_u8Iterator]=temp;
			Itr1++;
			Local_u8Iterator--;
		}
		while(arr[Itr2]!='x')
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	28 2f       	mov	r18, r24
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	ce 01       	movw	r24, r28
    28c6:	08 96       	adiw	r24, 0x08	; 8
    28c8:	fc 01       	movw	r30, r24
    28ca:	e2 0f       	add	r30, r18
    28cc:	f3 1f       	adc	r31, r19
    28ce:	80 81       	ld	r24, Z
    28d0:	88 37       	cpi	r24, 0x78	; 120
    28d2:	31 f7       	brne	.-52     	; 0x28a0 <CLCD_voidSendu32Number+0x134>
    28d4:	03 c0       	rjmp	.+6      	; 0x28dc <CLCD_voidSendu32Number+0x170>
			CLCD_voidSendData(arr[Itr2]+'0');
			Itr2++;
		}
	}
	else{
		CLCD_voidSendData('0');
    28d6:	80 e3       	ldi	r24, 0x30	; 48
    28d8:	0e 94 ce 10 	call	0x219c	; 0x219c <CLCD_voidSendData>
	}
}
    28dc:	66 96       	adiw	r28, 0x16	; 22
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <CLCD_voidCLearDisplay>:
void CLCD_voidCLearDisplay(void){
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLR_DISPLAY);
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendCommand>

}
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <main>:
#define F_CPU		8000000UL
#include <util/delay.h>


int main()
{
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	c3 55       	subi	r28, 0x53	; 83
    2914:	d0 40       	sbci	r29, 0x00	; 0
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61

	CLCD_voidInit();
    2920:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <CLCD_voidInit>
	KPAD_voidInit();
    2924:	0e 94 25 0b 	call	0x164a	; 0x164a <KPAD_voidInit>

	u8 Equation[20]={0};
    2928:	84 e1       	ldi	r24, 0x14	; 20
    292a:	fe 01       	movw	r30, r28
    292c:	fe 96       	adiw	r30, 0x3e	; 62
    292e:	df 01       	movw	r26, r30
    2930:	e8 2e       	mov	r14, r24
    2932:	1d 92       	st	X+, r1
    2934:	ea 94       	dec	r14
    2936:	e9 f7       	brne	.-6      	; 0x2932 <main+0x30>
	u8 EquationSize = 0;
    2938:	1d ae       	std	Y+61, r1	; 0x3d
	u32 Result = 0;
    293a:	19 ae       	std	Y+57, r1	; 0x39
    293c:	1a ae       	std	Y+58, r1	; 0x3a
    293e:	1b ae       	std	Y+59, r1	; 0x3b
    2940:	1c ae       	std	Y+60, r1	; 0x3c
	u32 Op1=0;
    2942:	1d aa       	std	Y+53, r1	; 0x35
    2944:	1e aa       	std	Y+54, r1	; 0x36
    2946:	1f aa       	std	Y+55, r1	; 0x37
    2948:	18 ae       	std	Y+56, r1	; 0x38
	u32 Op2=0;
    294a:	19 aa       	std	Y+49, r1	; 0x31
    294c:	1a aa       	std	Y+50, r1	; 0x32
    294e:	1b aa       	std	Y+51, r1	; 0x33
    2950:	1c aa       	std	Y+52, r1	; 0x34
	u8 Operator;
	CLCD_voidSetPosition(1,1);
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	61 e0       	ldi	r22, 0x01	; 1
    2956:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
	CLCD_voidSendString((u8 *)"Welcome!!");
    295a:	80 e6       	ldi	r24, 0x60	; 96
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 13 13 	call	0x2626	; 0x2626 <CLCD_voidSendString>
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	aa ef       	ldi	r26, 0xFA	; 250
    2968:	b3 e4       	ldi	r27, 0x43	; 67
    296a:	8f a3       	std	Y+39, r24	; 0x27
    296c:	98 a7       	std	Y+40, r25	; 0x28
    296e:	a9 a7       	std	Y+41, r26	; 0x29
    2970:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	6f a1       	ldd	r22, Y+39	; 0x27
    2974:	78 a5       	ldd	r23, Y+40	; 0x28
    2976:	89 a5       	ldd	r24, Y+41	; 0x29
    2978:	9a a5       	ldd	r25, Y+42	; 0x2a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4a ef       	ldi	r20, 0xFA	; 250
    2980:	54 e4       	ldi	r21, 0x44	; 68
    2982:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	8b a3       	std	Y+35, r24	; 0x23
    298c:	9c a3       	std	Y+36, r25	; 0x24
    298e:	ad a3       	std	Y+37, r26	; 0x25
    2990:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2992:	6b a1       	ldd	r22, Y+35	; 0x23
    2994:	7c a1       	ldd	r23, Y+36	; 0x24
    2996:	8d a1       	ldd	r24, Y+37	; 0x25
    2998:	9e a1       	ldd	r25, Y+38	; 0x26
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e8       	ldi	r20, 0x80	; 128
    29a0:	5f e3       	ldi	r21, 0x3F	; 63
    29a2:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    29a6:	88 23       	and	r24, r24
    29a8:	2c f4       	brge	.+10     	; 0x29b4 <main+0xb2>
		__ticks = 1;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	9a a3       	std	Y+34, r25	; 0x22
    29b0:	89 a3       	std	Y+33, r24	; 0x21
    29b2:	3f c0       	rjmp	.+126    	; 0x2a32 <main+0x130>
	else if (__tmp > 65535)
    29b4:	6b a1       	ldd	r22, Y+35	; 0x23
    29b6:	7c a1       	ldd	r23, Y+36	; 0x24
    29b8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ba:	9e a1       	ldd	r25, Y+38	; 0x26
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	3f ef       	ldi	r19, 0xFF	; 255
    29c0:	4f e7       	ldi	r20, 0x7F	; 127
    29c2:	57 e4       	ldi	r21, 0x47	; 71
    29c4:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    29c8:	18 16       	cp	r1, r24
    29ca:	4c f5       	brge	.+82     	; 0x2a1e <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29cc:	6f a1       	ldd	r22, Y+39	; 0x27
    29ce:	78 a5       	ldd	r23, Y+40	; 0x28
    29d0:	89 a5       	ldd	r24, Y+41	; 0x29
    29d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9a a3       	std	Y+34, r25	; 0x22
    29f2:	89 a3       	std	Y+33, r24	; 0x21
    29f4:	0f c0       	rjmp	.+30     	; 0x2a14 <main+0x112>
    29f6:	88 ec       	ldi	r24, 0xC8	; 200
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	98 a3       	std	Y+32, r25	; 0x20
    29fc:	8f 8f       	std	Y+31, r24	; 0x1f
    29fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a00:	98 a1       	ldd	r25, Y+32	; 0x20
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <main+0x100>
    2a06:	98 a3       	std	Y+32, r25	; 0x20
    2a08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	9a a3       	std	Y+34, r25	; 0x22
    2a12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a14:	89 a1       	ldd	r24, Y+33	; 0x21
    2a16:	9a a1       	ldd	r25, Y+34	; 0x22
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	69 f7       	brne	.-38     	; 0x29f6 <main+0xf4>
    2a1c:	14 c0       	rjmp	.+40     	; 0x2a46 <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a20:	7c a1       	ldd	r23, Y+36	; 0x24
    2a22:	8d a1       	ldd	r24, Y+37	; 0x25
    2a24:	9e a1       	ldd	r25, Y+38	; 0x26
    2a26:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9a a3       	std	Y+34, r25	; 0x22
    2a30:	89 a3       	std	Y+33, r24	; 0x21
    2a32:	89 a1       	ldd	r24, Y+33	; 0x21
    2a34:	9a a1       	ldd	r25, Y+34	; 0x22
    2a36:	9e 8f       	std	Y+30, r25	; 0x1e
    2a38:	8d 8f       	std	Y+29, r24	; 0x1d
    2a3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <main+0x13c>
    2a42:	9e 8f       	std	Y+30, r25	; 0x1e
    2a44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	while (1)
	{
		u8 key = KPAD_u8GetPressed();
    2a46:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <KPAD_u8GetPressed>
    2a4a:	8f a7       	std	Y+47, r24	; 0x2f

		if (key != 0xff)
    2a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a50:	d1 f3       	breq	.-12     	; 0x2a46 <main+0x144>
		{

			if(key != 'C'){
    2a52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a54:	83 34       	cpi	r24, 0x43	; 67
    2a56:	81 f0       	breq	.+32     	; 0x2a78 <main+0x176>
				Equation[EquationSize] = key;
    2a58:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	ce 01       	movw	r24, r28
    2a60:	ce 96       	adiw	r24, 0x3e	; 62
    2a62:	fc 01       	movw	r30, r24
    2a64:	e2 0f       	add	r30, r18
    2a66:	f3 1f       	adc	r31, r19
    2a68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6a:	80 83       	st	Z, r24
				EquationSize++;
    2a6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a6e:	8f 5f       	subi	r24, 0xFF	; 255
    2a70:	8d af       	std	Y+61, r24	; 0x3d
				CLCD_voidSendData(key);
    2a72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a74:	0e 94 ce 10 	call	0x219c	; 0x219c <CLCD_voidSendData>
			}


			if (key == '=')
    2a78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a7a:	8d 33       	cpi	r24, 0x3D	; 61
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <main+0x17e>
    2a7e:	51 c2       	rjmp	.+1186   	; 0x2f22 <main+0x620>
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	aa ef       	ldi	r26, 0xFA	; 250
    2a86:	b3 e4       	ldi	r27, 0x43	; 67
    2a88:	89 8f       	std	Y+25, r24	; 0x19
    2a8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a90:	69 8d       	ldd	r22, Y+25	; 0x19
    2a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	4a ef       	ldi	r20, 0xFA	; 250
    2a9e:	54 e4       	ldi	r21, 0x44	; 68
    2aa0:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	8d 8b       	std	Y+21, r24	; 0x15
    2aaa:	9e 8b       	std	Y+22, r25	; 0x16
    2aac:	af 8b       	std	Y+23, r26	; 0x17
    2aae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e8       	ldi	r20, 0x80	; 128
    2abe:	5f e3       	ldi	r21, 0x3F	; 63
    2ac0:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    2ac4:	88 23       	and	r24, r24
    2ac6:	2c f4       	brge	.+10     	; 0x2ad2 <main+0x1d0>
		__ticks = 1;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9c 8b       	std	Y+20, r25	; 0x14
    2ace:	8b 8b       	std	Y+19, r24	; 0x13
    2ad0:	3f c0       	rjmp	.+126    	; 0x2b50 <main+0x24e>
	else if (__tmp > 65535)
    2ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	3f ef       	ldi	r19, 0xFF	; 255
    2ade:	4f e7       	ldi	r20, 0x7F	; 127
    2ae0:	57 e4       	ldi	r21, 0x47	; 71
    2ae2:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    2ae6:	18 16       	cp	r1, r24
    2ae8:	4c f5       	brge	.+82     	; 0x2b3c <main+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aea:	69 8d       	ldd	r22, Y+25	; 0x19
    2aec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e2       	ldi	r20, 0x20	; 32
    2af8:	51 e4       	ldi	r21, 0x41	; 65
    2afa:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	bc 01       	movw	r22, r24
    2b04:	cd 01       	movw	r24, r26
    2b06:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	9c 8b       	std	Y+20, r25	; 0x14
    2b10:	8b 8b       	std	Y+19, r24	; 0x13
    2b12:	0f c0       	rjmp	.+30     	; 0x2b32 <main+0x230>
    2b14:	88 ec       	ldi	r24, 0xC8	; 200
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9a 8b       	std	Y+18, r25	; 0x12
    2b1a:	89 8b       	std	Y+17, r24	; 0x11
    2b1c:	89 89       	ldd	r24, Y+17	; 0x11
    2b1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <main+0x21e>
    2b24:	9a 8b       	std	Y+18, r25	; 0x12
    2b26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b28:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	9c 8b       	std	Y+20, r25	; 0x14
    2b30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b32:	8b 89       	ldd	r24, Y+19	; 0x13
    2b34:	9c 89       	ldd	r25, Y+20	; 0x14
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	69 f7       	brne	.-38     	; 0x2b14 <main+0x212>
    2b3a:	14 c0       	rjmp	.+40     	; 0x2b64 <main+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b40:	8f 89       	ldd	r24, Y+23	; 0x17
    2b42:	98 8d       	ldd	r25, Y+24	; 0x18
    2b44:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	9c 8b       	std	Y+20, r25	; 0x14
    2b4e:	8b 8b       	std	Y+19, r24	; 0x13
    2b50:	8b 89       	ldd	r24, Y+19	; 0x13
    2b52:	9c 89       	ldd	r25, Y+20	; 0x14
    2b54:	98 8b       	std	Y+16, r25	; 0x10
    2b56:	8f 87       	std	Y+15, r24	; 0x0f
    2b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b5a:	98 89       	ldd	r25, Y+16	; 0x10
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <main+0x25a>
    2b60:	98 8b       	std	Y+16, r25	; 0x10
    2b62:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(500);
				if(EquationSize == 1){
    2b64:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	c1 f4       	brne	.+48     	; 0x2b9a <main+0x298>
					CLCD_voidSetPosition(2,1);
    2b6a:	82 e0       	ldi	r24, 0x02	; 2
    2b6c:	61 e0       	ldi	r22, 0x01	; 1
    2b6e:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
					CLCD_voidSendString((u8 *)"Invalid Equ!!");
    2b72:	8a e6       	ldi	r24, 0x6A	; 106
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 13 13 	call	0x2626	; 0x2626 <CLCD_voidSendString>
					return 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0

			}
		}
	}
	return 0;
}
    2b7e:	cd 5a       	subi	r28, 0xAD	; 173
    2b80:	df 4f       	sbci	r29, 0xFF	; 255
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	08 95       	ret
				if(EquationSize == 1){
					CLCD_voidSetPosition(2,1);
					CLCD_voidSendString((u8 *)"Invalid Equ!!");
					return 1;
				}
				for (u8 OperatorSize = 0; OperatorSize < EquationSize; OperatorSize++){
    2b9a:	1e a6       	std	Y+46, r1	; 0x2e
    2b9c:	bc c1       	rjmp	.+888    	; 0x2f16 <main+0x614>
					if(Equation[OperatorSize]=='+' || Equation[OperatorSize]=='-'|| Equation[OperatorSize]=='*' || Equation[OperatorSize]=='/'){
    2b9e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	ce 96       	adiw	r24, 0x3e	; 62
    2ba8:	fc 01       	movw	r30, r24
    2baa:	e2 0f       	add	r30, r18
    2bac:	f3 1f       	adc	r31, r19
    2bae:	80 81       	ld	r24, Z
    2bb0:	8b 32       	cpi	r24, 0x2B	; 43
    2bb2:	11 f1       	breq	.+68     	; 0x2bf8 <main+0x2f6>
    2bb4:	8e a5       	ldd	r24, Y+46	; 0x2e
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	ce 01       	movw	r24, r28
    2bbc:	ce 96       	adiw	r24, 0x3e	; 62
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e2 0f       	add	r30, r18
    2bc2:	f3 1f       	adc	r31, r19
    2bc4:	80 81       	ld	r24, Z
    2bc6:	8d 32       	cpi	r24, 0x2D	; 45
    2bc8:	b9 f0       	breq	.+46     	; 0x2bf8 <main+0x2f6>
    2bca:	8e a5       	ldd	r24, Y+46	; 0x2e
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	ce 96       	adiw	r24, 0x3e	; 62
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	e2 0f       	add	r30, r18
    2bd8:	f3 1f       	adc	r31, r19
    2bda:	80 81       	ld	r24, Z
    2bdc:	8a 32       	cpi	r24, 0x2A	; 42
    2bde:	61 f0       	breq	.+24     	; 0x2bf8 <main+0x2f6>
    2be0:	8e a5       	ldd	r24, Y+46	; 0x2e
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	ce 01       	movw	r24, r28
    2be8:	ce 96       	adiw	r24, 0x3e	; 62
    2bea:	fc 01       	movw	r30, r24
    2bec:	e2 0f       	add	r30, r18
    2bee:	f3 1f       	adc	r31, r19
    2bf0:	80 81       	ld	r24, Z
    2bf2:	8f 32       	cpi	r24, 0x2F	; 47
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <main+0x2f6>
    2bf6:	8c c1       	rjmp	.+792    	; 0x2f10 <main+0x60e>
						Operator = Equation[OperatorSize];
    2bf8:	8e a5       	ldd	r24, Y+46	; 0x2e
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	ce 01       	movw	r24, r28
    2c00:	ce 96       	adiw	r24, 0x3e	; 62
    2c02:	fc 01       	movw	r30, r24
    2c04:	e2 0f       	add	r30, r18
    2c06:	f3 1f       	adc	r31, r19
    2c08:	80 81       	ld	r24, Z
    2c0a:	88 ab       	std	Y+48, r24	; 0x30
						for(u8 Digits=0; Digits<OperatorSize; Digits++){
    2c0c:	1d a6       	std	Y+45, r1	; 0x2d
    2c0e:	29 c0       	rjmp	.+82     	; 0x2c62 <main+0x360>
							Op1 = (Op1 * 10) + ( Equation[Digits] - 48 );
    2c10:	8d a9       	ldd	r24, Y+53	; 0x35
    2c12:	9e a9       	ldd	r25, Y+54	; 0x36
    2c14:	af a9       	ldd	r26, Y+55	; 0x37
    2c16:	b8 ad       	ldd	r27, Y+56	; 0x38
    2c18:	2a e0       	ldi	r18, 0x0A	; 10
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	bc 01       	movw	r22, r24
    2c22:	cd 01       	movw	r24, r26
    2c24:	0e 94 32 18 	call	0x3064	; 0x3064 <__mulsi3>
    2c28:	ab 01       	movw	r20, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	ce 01       	movw	r24, r28
    2c34:	ce 96       	adiw	r24, 0x3e	; 62
    2c36:	fc 01       	movw	r30, r24
    2c38:	e2 0f       	add	r30, r18
    2c3a:	f3 1f       	adc	r31, r19
    2c3c:	80 81       	ld	r24, Z
    2c3e:	88 2f       	mov	r24, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	c0 97       	sbiw	r24, 0x30	; 48
    2c44:	aa 27       	eor	r26, r26
    2c46:	97 fd       	sbrc	r25, 7
    2c48:	a0 95       	com	r26
    2c4a:	ba 2f       	mov	r27, r26
    2c4c:	84 0f       	add	r24, r20
    2c4e:	95 1f       	adc	r25, r21
    2c50:	a6 1f       	adc	r26, r22
    2c52:	b7 1f       	adc	r27, r23
    2c54:	8d ab       	std	Y+53, r24	; 0x35
    2c56:	9e ab       	std	Y+54, r25	; 0x36
    2c58:	af ab       	std	Y+55, r26	; 0x37
    2c5a:	b8 af       	std	Y+56, r27	; 0x38
					return 1;
				}
				for (u8 OperatorSize = 0; OperatorSize < EquationSize; OperatorSize++){
					if(Equation[OperatorSize]=='+' || Equation[OperatorSize]=='-'|| Equation[OperatorSize]=='*' || Equation[OperatorSize]=='/'){
						Operator = Equation[OperatorSize];
						for(u8 Digits=0; Digits<OperatorSize; Digits++){
    2c5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	8d a7       	std	Y+45, r24	; 0x2d
    2c62:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c64:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c66:	98 17       	cp	r25, r24
    2c68:	98 f2       	brcs	.-90     	; 0x2c10 <main+0x30e>
							Op1 = (Op1 * 10) + ( Equation[Digits] - 48 );
						}

						for(u8 Ind2=OperatorSize+1; Ind2<EquationSize-1; Ind2++){
    2c6a:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c6c:	8f 5f       	subi	r24, 0xFF	; 255
    2c6e:	8c a7       	std	Y+44, r24	; 0x2c
    2c70:	29 c0       	rjmp	.+82     	; 0x2cc4 <main+0x3c2>
							Op2 = (Op2 * 10) + ( Equation[Ind2] - 48);
    2c72:	89 a9       	ldd	r24, Y+49	; 0x31
    2c74:	9a a9       	ldd	r25, Y+50	; 0x32
    2c76:	ab a9       	ldd	r26, Y+51	; 0x33
    2c78:	bc a9       	ldd	r27, Y+52	; 0x34
    2c7a:	2a e0       	ldi	r18, 0x0A	; 10
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	bc 01       	movw	r22, r24
    2c84:	cd 01       	movw	r24, r26
    2c86:	0e 94 32 18 	call	0x3064	; 0x3064 <__mulsi3>
    2c8a:	ab 01       	movw	r20, r22
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c90:	28 2f       	mov	r18, r24
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	ce 01       	movw	r24, r28
    2c96:	ce 96       	adiw	r24, 0x3e	; 62
    2c98:	fc 01       	movw	r30, r24
    2c9a:	e2 0f       	add	r30, r18
    2c9c:	f3 1f       	adc	r31, r19
    2c9e:	80 81       	ld	r24, Z
    2ca0:	88 2f       	mov	r24, r24
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	c0 97       	sbiw	r24, 0x30	; 48
    2ca6:	aa 27       	eor	r26, r26
    2ca8:	97 fd       	sbrc	r25, 7
    2caa:	a0 95       	com	r26
    2cac:	ba 2f       	mov	r27, r26
    2cae:	84 0f       	add	r24, r20
    2cb0:	95 1f       	adc	r25, r21
    2cb2:	a6 1f       	adc	r26, r22
    2cb4:	b7 1f       	adc	r27, r23
    2cb6:	89 ab       	std	Y+49, r24	; 0x31
    2cb8:	9a ab       	std	Y+50, r25	; 0x32
    2cba:	ab ab       	std	Y+51, r26	; 0x33
    2cbc:	bc ab       	std	Y+52, r27	; 0x34
						Operator = Equation[OperatorSize];
						for(u8 Digits=0; Digits<OperatorSize; Digits++){
							Op1 = (Op1 * 10) + ( Equation[Digits] - 48 );
						}

						for(u8 Ind2=OperatorSize+1; Ind2<EquationSize-1; Ind2++){
    2cbe:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cc0:	8f 5f       	subi	r24, 0xFF	; 255
    2cc2:	8c a7       	std	Y+44, r24	; 0x2c
    2cc4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	28 17       	cp	r18, r24
    2cd4:	39 07       	cpc	r19, r25
    2cd6:	6c f2       	brlt	.-102    	; 0x2c72 <main+0x370>
							Op2 = (Op2 * 10) + ( Equation[Ind2] - 48);
						}


						CLCD_voidCLearDisplay();
    2cd8:	0e 94 77 14 	call	0x28ee	; 0x28ee <CLCD_voidCLearDisplay>

						switch(Operator){
    2cdc:	88 a9       	ldd	r24, Y+48	; 0x30
    2cde:	08 2f       	mov	r16, r24
    2ce0:	10 e0       	ldi	r17, 0x00	; 0
    2ce2:	64 96       	adiw	r28, 0x14	; 20
    2ce4:	1f af       	std	Y+63, r17	; 0x3f
    2ce6:	0e af       	std	Y+62, r16	; 0x3e
    2ce8:	64 97       	sbiw	r28, 0x14	; 20
    2cea:	64 96       	adiw	r28, 0x14	; 20
    2cec:	2e ad       	ldd	r18, Y+62	; 0x3e
    2cee:	3f ad       	ldd	r19, Y+63	; 0x3f
    2cf0:	64 97       	sbiw	r28, 0x14	; 20
    2cf2:	2b 32       	cpi	r18, 0x2B	; 43
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	01 f1       	breq	.+64     	; 0x2d38 <main+0x436>
    2cf8:	64 96       	adiw	r28, 0x14	; 20
    2cfa:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cfe:	64 97       	sbiw	r28, 0x14	; 20
    2d00:	8c 32       	cpi	r24, 0x2C	; 44
    2d02:	91 05       	cpc	r25, r1
    2d04:	4c f4       	brge	.+18     	; 0x2d18 <main+0x416>
    2d06:	64 96       	adiw	r28, 0x14	; 20
    2d08:	ae ad       	ldd	r26, Y+62	; 0x3e
    2d0a:	bf ad       	ldd	r27, Y+63	; 0x3f
    2d0c:	64 97       	sbiw	r28, 0x14	; 20
    2d0e:	aa 32       	cpi	r26, 0x2A	; 42
    2d10:	b1 05       	cpc	r27, r1
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <main+0x414>
    2d14:	7b c0       	rjmp	.+246    	; 0x2e0c <main+0x50a>
    2d16:	f3 c0       	rjmp	.+486    	; 0x2efe <main+0x5fc>
    2d18:	64 96       	adiw	r28, 0x14	; 20
    2d1a:	0e ad       	ldd	r16, Y+62	; 0x3e
    2d1c:	1f ad       	ldd	r17, Y+63	; 0x3f
    2d1e:	64 97       	sbiw	r28, 0x14	; 20
    2d20:	0d 32       	cpi	r16, 0x2D	; 45
    2d22:	11 05       	cpc	r17, r1
    2d24:	e9 f1       	breq	.+122    	; 0x2da0 <main+0x49e>
    2d26:	64 96       	adiw	r28, 0x14	; 20
    2d28:	2e ad       	ldd	r18, Y+62	; 0x3e
    2d2a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2d2c:	64 97       	sbiw	r28, 0x14	; 20
    2d2e:	2f 32       	cpi	r18, 0x2F	; 47
    2d30:	31 05       	cpc	r19, r1
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <main+0x434>
    2d34:	9f c0       	rjmp	.+318    	; 0x2e74 <main+0x572>
    2d36:	e3 c0       	rjmp	.+454    	; 0x2efe <main+0x5fc>
						case '+':
							Result=0;
    2d38:	19 ae       	std	Y+57, r1	; 0x39
    2d3a:	1a ae       	std	Y+58, r1	; 0x3a
    2d3c:	1b ae       	std	Y+59, r1	; 0x3b
    2d3e:	1c ae       	std	Y+60, r1	; 0x3c
							Result = Op1 + Op2;
    2d40:	2d a9       	ldd	r18, Y+53	; 0x35
    2d42:	3e a9       	ldd	r19, Y+54	; 0x36
    2d44:	4f a9       	ldd	r20, Y+55	; 0x37
    2d46:	58 ad       	ldd	r21, Y+56	; 0x38
    2d48:	89 a9       	ldd	r24, Y+49	; 0x31
    2d4a:	9a a9       	ldd	r25, Y+50	; 0x32
    2d4c:	ab a9       	ldd	r26, Y+51	; 0x33
    2d4e:	bc a9       	ldd	r27, Y+52	; 0x34
    2d50:	82 0f       	add	r24, r18
    2d52:	93 1f       	adc	r25, r19
    2d54:	a4 1f       	adc	r26, r20
    2d56:	b5 1f       	adc	r27, r21
    2d58:	89 af       	std	Y+57, r24	; 0x39
    2d5a:	9a af       	std	Y+58, r25	; 0x3a
    2d5c:	ab af       	std	Y+59, r26	; 0x3b
    2d5e:	bc af       	std	Y+60, r27	; 0x3c
							CLCD_voidCLearDisplay();
    2d60:	0e 94 77 14 	call	0x28ee	; 0x28ee <CLCD_voidCLearDisplay>
							CLCD_voidSetPosition(1,1);
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	61 e0       	ldi	r22, 0x01	; 1
    2d68:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
							CLCD_voidSendString((u8 *)"The Result:");
    2d6c:	88 e7       	ldi	r24, 0x78	; 120
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 13 13 	call	0x2626	; 0x2626 <CLCD_voidSendString>
							CLCD_voidSetPosition(2,1);
    2d74:	82 e0       	ldi	r24, 0x02	; 2
    2d76:	61 e0       	ldi	r22, 0x01	; 1
    2d78:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
							CLCD_voidSendu32Number(Result);
    2d7c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d80:	ab ad       	ldd	r26, Y+59	; 0x3b
    2d82:	bc ad       	ldd	r27, Y+60	; 0x3c
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 b6 13 	call	0x276c	; 0x276c <CLCD_voidSendu32Number>
							EquationSize =0;
    2d8c:	1d ae       	std	Y+61, r1	; 0x3d
							Op1 = 0;
    2d8e:	1d aa       	std	Y+53, r1	; 0x35
    2d90:	1e aa       	std	Y+54, r1	; 0x36
    2d92:	1f aa       	std	Y+55, r1	; 0x37
    2d94:	18 ae       	std	Y+56, r1	; 0x38
							Op2 = 0;
    2d96:	19 aa       	std	Y+49, r1	; 0x31
    2d98:	1a aa       	std	Y+50, r1	; 0x32
    2d9a:	1b aa       	std	Y+51, r1	; 0x33
    2d9c:	1c aa       	std	Y+52, r1	; 0x34
    2d9e:	53 ce       	rjmp	.-858    	; 0x2a46 <main+0x144>
							break;
						case '-':
							Result=0;
    2da0:	19 ae       	std	Y+57, r1	; 0x39
    2da2:	1a ae       	std	Y+58, r1	; 0x3a
    2da4:	1b ae       	std	Y+59, r1	; 0x3b
    2da6:	1c ae       	std	Y+60, r1	; 0x3c
							Result = Op1 - Op2;
    2da8:	2d a9       	ldd	r18, Y+53	; 0x35
    2daa:	3e a9       	ldd	r19, Y+54	; 0x36
    2dac:	4f a9       	ldd	r20, Y+55	; 0x37
    2dae:	58 ad       	ldd	r21, Y+56	; 0x38
    2db0:	89 a9       	ldd	r24, Y+49	; 0x31
    2db2:	9a a9       	ldd	r25, Y+50	; 0x32
    2db4:	ab a9       	ldd	r26, Y+51	; 0x33
    2db6:	bc a9       	ldd	r27, Y+52	; 0x34
    2db8:	79 01       	movw	r14, r18
    2dba:	8a 01       	movw	r16, r20
    2dbc:	e8 1a       	sub	r14, r24
    2dbe:	f9 0a       	sbc	r15, r25
    2dc0:	0a 0b       	sbc	r16, r26
    2dc2:	1b 0b       	sbc	r17, r27
    2dc4:	d8 01       	movw	r26, r16
    2dc6:	c7 01       	movw	r24, r14
    2dc8:	89 af       	std	Y+57, r24	; 0x39
    2dca:	9a af       	std	Y+58, r25	; 0x3a
    2dcc:	ab af       	std	Y+59, r26	; 0x3b
    2dce:	bc af       	std	Y+60, r27	; 0x3c
							CLCD_voidSetPosition(1,1);
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	61 e0       	ldi	r22, 0x01	; 1
    2dd4:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
							CLCD_voidSendString((u8 *)"The Result:");
    2dd8:	88 e7       	ldi	r24, 0x78	; 120
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	0e 94 13 13 	call	0x2626	; 0x2626 <CLCD_voidSendString>
							CLCD_voidSetPosition(2,1);
    2de0:	82 e0       	ldi	r24, 0x02	; 2
    2de2:	61 e0       	ldi	r22, 0x01	; 1
    2de4:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
							CLCD_voidSendu32Number(Result);
    2de8:	89 ad       	ldd	r24, Y+57	; 0x39
    2dea:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dec:	ab ad       	ldd	r26, Y+59	; 0x3b
    2dee:	bc ad       	ldd	r27, Y+60	; 0x3c
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 b6 13 	call	0x276c	; 0x276c <CLCD_voidSendu32Number>
							EquationSize = 0;
    2df8:	1d ae       	std	Y+61, r1	; 0x3d
							Op1 = 0;
    2dfa:	1d aa       	std	Y+53, r1	; 0x35
    2dfc:	1e aa       	std	Y+54, r1	; 0x36
    2dfe:	1f aa       	std	Y+55, r1	; 0x37
    2e00:	18 ae       	std	Y+56, r1	; 0x38
							Op2 = 0;
    2e02:	19 aa       	std	Y+49, r1	; 0x31
    2e04:	1a aa       	std	Y+50, r1	; 0x32
    2e06:	1b aa       	std	Y+51, r1	; 0x33
    2e08:	1c aa       	std	Y+52, r1	; 0x34
    2e0a:	1d ce       	rjmp	.-966    	; 0x2a46 <main+0x144>
							break;
						case '*':
							Result = 0;
    2e0c:	19 ae       	std	Y+57, r1	; 0x39
    2e0e:	1a ae       	std	Y+58, r1	; 0x3a
    2e10:	1b ae       	std	Y+59, r1	; 0x3b
    2e12:	1c ae       	std	Y+60, r1	; 0x3c
							Result = Op1 * Op2;
    2e14:	8d a9       	ldd	r24, Y+53	; 0x35
    2e16:	9e a9       	ldd	r25, Y+54	; 0x36
    2e18:	af a9       	ldd	r26, Y+55	; 0x37
    2e1a:	b8 ad       	ldd	r27, Y+56	; 0x38
    2e1c:	29 a9       	ldd	r18, Y+49	; 0x31
    2e1e:	3a a9       	ldd	r19, Y+50	; 0x32
    2e20:	4b a9       	ldd	r20, Y+51	; 0x33
    2e22:	5c a9       	ldd	r21, Y+52	; 0x34
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 32 18 	call	0x3064	; 0x3064 <__mulsi3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	89 af       	std	Y+57, r24	; 0x39
    2e32:	9a af       	std	Y+58, r25	; 0x3a
    2e34:	ab af       	std	Y+59, r26	; 0x3b
    2e36:	bc af       	std	Y+60, r27	; 0x3c
							CLCD_voidSetPosition(1,1);
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
							CLCD_voidSendString((u8 *)"The Result:");
    2e40:	88 e7       	ldi	r24, 0x78	; 120
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	0e 94 13 13 	call	0x2626	; 0x2626 <CLCD_voidSendString>
							CLCD_voidSetPosition(2,1);
    2e48:	82 e0       	ldi	r24, 0x02	; 2
    2e4a:	61 e0       	ldi	r22, 0x01	; 1
    2e4c:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
							CLCD_voidSendu32Number(Result);
    2e50:	89 ad       	ldd	r24, Y+57	; 0x39
    2e52:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e54:	ab ad       	ldd	r26, Y+59	; 0x3b
    2e56:	bc ad       	ldd	r27, Y+60	; 0x3c
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 b6 13 	call	0x276c	; 0x276c <CLCD_voidSendu32Number>
							EquationSize =0;
    2e60:	1d ae       	std	Y+61, r1	; 0x3d
							Op1 = 0;
    2e62:	1d aa       	std	Y+53, r1	; 0x35
    2e64:	1e aa       	std	Y+54, r1	; 0x36
    2e66:	1f aa       	std	Y+55, r1	; 0x37
    2e68:	18 ae       	std	Y+56, r1	; 0x38
							Op2 = 0;
    2e6a:	19 aa       	std	Y+49, r1	; 0x31
    2e6c:	1a aa       	std	Y+50, r1	; 0x32
    2e6e:	1b aa       	std	Y+51, r1	; 0x33
    2e70:	1c aa       	std	Y+52, r1	; 0x34
    2e72:	e9 cd       	rjmp	.-1070   	; 0x2a46 <main+0x144>
							break;
						case '/':
							Result = 0;
    2e74:	19 ae       	std	Y+57, r1	; 0x39
    2e76:	1a ae       	std	Y+58, r1	; 0x3a
    2e78:	1b ae       	std	Y+59, r1	; 0x3b
    2e7a:	1c ae       	std	Y+60, r1	; 0x3c
							if(Op2 == 0){
    2e7c:	89 a9       	ldd	r24, Y+49	; 0x31
    2e7e:	9a a9       	ldd	r25, Y+50	; 0x32
    2e80:	ab a9       	ldd	r26, Y+51	; 0x33
    2e82:	bc a9       	ldd	r27, Y+52	; 0x34
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	a1 05       	cpc	r26, r1
    2e88:	b1 05       	cpc	r27, r1
    2e8a:	49 f4       	brne	.+18     	; 0x2e9e <main+0x59c>
								CLCD_voidSetPosition(2,1);
    2e8c:	82 e0       	ldi	r24, 0x02	; 2
    2e8e:	61 e0       	ldi	r22, 0x01	; 1
    2e90:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
								CLCD_voidSendString((u8 *)"Undefined!");
    2e94:	84 e8       	ldi	r24, 0x84	; 132
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 13 13 	call	0x2626	; 0x2626 <CLCD_voidSendString>
    2e9c:	26 c0       	rjmp	.+76     	; 0x2eea <main+0x5e8>
							}
							else{
								Result = Op1 / Op2;
    2e9e:	8d a9       	ldd	r24, Y+53	; 0x35
    2ea0:	9e a9       	ldd	r25, Y+54	; 0x36
    2ea2:	af a9       	ldd	r26, Y+55	; 0x37
    2ea4:	b8 ad       	ldd	r27, Y+56	; 0x38
    2ea6:	29 a9       	ldd	r18, Y+49	; 0x31
    2ea8:	3a a9       	ldd	r19, Y+50	; 0x32
    2eaa:	4b a9       	ldd	r20, Y+51	; 0x33
    2eac:	5c a9       	ldd	r21, Y+52	; 0x34
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__udivmodsi4>
    2eb6:	da 01       	movw	r26, r20
    2eb8:	c9 01       	movw	r24, r18
    2eba:	89 af       	std	Y+57, r24	; 0x39
    2ebc:	9a af       	std	Y+58, r25	; 0x3a
    2ebe:	ab af       	std	Y+59, r26	; 0x3b
    2ec0:	bc af       	std	Y+60, r27	; 0x3c
								CLCD_voidSetPosition(1,1);
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	61 e0       	ldi	r22, 0x01	; 1
    2ec6:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
								CLCD_voidSendString((u8 *)"The Result:");
    2eca:	88 e7       	ldi	r24, 0x78	; 120
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0e 94 13 13 	call	0x2626	; 0x2626 <CLCD_voidSendString>
								CLCD_voidSetPosition(2,1);
    2ed2:	82 e0       	ldi	r24, 0x02	; 2
    2ed4:	61 e0       	ldi	r22, 0x01	; 1
    2ed6:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
								CLCD_voidSendu32Number(Result);
    2eda:	89 ad       	ldd	r24, Y+57	; 0x39
    2edc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ede:	ab ad       	ldd	r26, Y+59	; 0x3b
    2ee0:	bc ad       	ldd	r27, Y+60	; 0x3c
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 b6 13 	call	0x276c	; 0x276c <CLCD_voidSendu32Number>
							}
							EquationSize = 0;
    2eea:	1d ae       	std	Y+61, r1	; 0x3d
							Op1 = 0;
    2eec:	1d aa       	std	Y+53, r1	; 0x35
    2eee:	1e aa       	std	Y+54, r1	; 0x36
    2ef0:	1f aa       	std	Y+55, r1	; 0x37
    2ef2:	18 ae       	std	Y+56, r1	; 0x38
							Op2 = 0;
    2ef4:	19 aa       	std	Y+49, r1	; 0x31
    2ef6:	1a aa       	std	Y+50, r1	; 0x32
    2ef8:	1b aa       	std	Y+51, r1	; 0x33
    2efa:	1c aa       	std	Y+52, r1	; 0x34
    2efc:	a4 cd       	rjmp	.-1208   	; 0x2a46 <main+0x144>
							break;
						default:
							CLCD_voidSetPosition(2,1);
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	61 e0       	ldi	r22, 0x01	; 1
    2f02:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
							CLCD_voidSendString((u8 *)"Invalid Op!!");
    2f06:	8f e8       	ldi	r24, 0x8F	; 143
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	0e 94 13 13 	call	0x2626	; 0x2626 <CLCD_voidSendString>
    2f0e:	9b cd       	rjmp	.-1226   	; 0x2a46 <main+0x144>
				if(EquationSize == 1){
					CLCD_voidSetPosition(2,1);
					CLCD_voidSendString((u8 *)"Invalid Equ!!");
					return 1;
				}
				for (u8 OperatorSize = 0; OperatorSize < EquationSize; OperatorSize++){
    2f10:	8e a5       	ldd	r24, Y+46	; 0x2e
    2f12:	8f 5f       	subi	r24, 0xFF	; 255
    2f14:	8e a7       	std	Y+46, r24	; 0x2e
    2f16:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f18:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f1a:	98 17       	cp	r25, r24
    2f1c:	08 f4       	brcc	.+2      	; 0x2f20 <main+0x61e>
    2f1e:	3f ce       	rjmp	.-898    	; 0x2b9e <main+0x29c>
    2f20:	92 cd       	rjmp	.-1244   	; 0x2a46 <main+0x144>
					}
				}


			}
			else if(key == 'C'){
    2f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f24:	83 34       	cpi	r24, 0x43	; 67
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <main+0x628>
    2f28:	8e cd       	rjmp	.-1252   	; 0x2a46 <main+0x144>
				CLCD_voidSetPosition(1,1);
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
    2f2e:	0e 94 76 12 	call	0x24ec	; 0x24ec <CLCD_voidSetPosition>
				CLCD_voidCLearDisplay();
    2f32:	0e 94 77 14 	call	0x28ee	; 0x28ee <CLCD_voidCLearDisplay>

				CLCD_voidSendString((u8 *)"Clear Display");
    2f36:	8c e9       	ldi	r24, 0x9C	; 156
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	0e 94 13 13 	call	0x2626	; 0x2626 <CLCD_voidSendString>
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	aa ef       	ldi	r26, 0xFA	; 250
    2f44:	b3 e4       	ldi	r27, 0x43	; 67
    2f46:	8b 87       	std	Y+11, r24	; 0x0b
    2f48:	9c 87       	std	Y+12, r25	; 0x0c
    2f4a:	ad 87       	std	Y+13, r26	; 0x0d
    2f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	4a ef       	ldi	r20, 0xFA	; 250
    2f5c:	54 e4       	ldi	r21, 0x44	; 68
    2f5e:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	8f 83       	std	Y+7, r24	; 0x07
    2f68:	98 87       	std	Y+8, r25	; 0x08
    2f6a:	a9 87       	std	Y+9, r26	; 0x09
    2f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f70:	78 85       	ldd	r23, Y+8	; 0x08
    2f72:	89 85       	ldd	r24, Y+9	; 0x09
    2f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e8       	ldi	r20, 0x80	; 128
    2f7c:	5f e3       	ldi	r21, 0x3F	; 63
    2f7e:	0e 94 1f 04 	call	0x83e	; 0x83e <__ltsf2>
    2f82:	88 23       	and	r24, r24
    2f84:	2c f4       	brge	.+10     	; 0x2f90 <main+0x68e>
		__ticks = 1;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
    2f8e:	3f c0       	rjmp	.+126    	; 0x300e <main+0x70c>
	else if (__tmp > 65535)
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	3f ef       	ldi	r19, 0xFF	; 255
    2f9c:	4f e7       	ldi	r20, 0x7F	; 127
    2f9e:	57 e4       	ldi	r21, 0x47	; 71
    2fa0:	0e 94 bf 03 	call	0x77e	; 0x77e <__gtsf2>
    2fa4:	18 16       	cp	r1, r24
    2fa6:	4c f5       	brge	.+82     	; 0x2ffa <main+0x6f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e2       	ldi	r20, 0x20	; 32
    2fb6:	51 e4       	ldi	r21, 0x41	; 65
    2fb8:	0e 94 19 02 	call	0x432	; 0x432 <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	bc 01       	movw	r22, r24
    2fc2:	cd 01       	movw	r24, r26
    2fc4:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
    2fd0:	0f c0       	rjmp	.+30     	; 0x2ff0 <main+0x6ee>
    2fd2:	88 ec       	ldi	r24, 0xC8	; 200
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	9c 83       	std	Y+4, r25	; 0x04
    2fd8:	8b 83       	std	Y+3, r24	; 0x03
    2fda:	8b 81       	ldd	r24, Y+3	; 0x03
    2fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	f1 f7       	brne	.-4      	; 0x2fde <main+0x6dc>
    2fe2:	9c 83       	std	Y+4, r25	; 0x04
    2fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	9e 83       	std	Y+6, r25	; 0x06
    2fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	69 f7       	brne	.-38     	; 0x2fd2 <main+0x6d0>
    2ff8:	14 c0       	rjmp	.+40     	; 0x3022 <main+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffc:	78 85       	ldd	r23, Y+8	; 0x08
    2ffe:	89 85       	ldd	r24, Y+9	; 0x09
    3000:	9a 85       	ldd	r25, Y+10	; 0x0a
    3002:	0e 94 43 00 	call	0x86	; 0x86 <__fixunssfsi>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	9e 83       	std	Y+6, r25	; 0x06
    300c:	8d 83       	std	Y+5, r24	; 0x05
    300e:	8d 81       	ldd	r24, Y+5	; 0x05
    3010:	9e 81       	ldd	r25, Y+6	; 0x06
    3012:	9a 83       	std	Y+2, r25	; 0x02
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	9a 81       	ldd	r25, Y+2	; 0x02
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	f1 f7       	brne	.-4      	; 0x301a <main+0x718>
    301e:	9a 83       	std	Y+2, r25	; 0x02
    3020:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				CLCD_voidCLearDisplay();
    3022:	0e 94 77 14 	call	0x28ee	; 0x28ee <CLCD_voidCLearDisplay>
				Result =0;
    3026:	19 ae       	std	Y+57, r1	; 0x39
    3028:	1a ae       	std	Y+58, r1	; 0x3a
    302a:	1b ae       	std	Y+59, r1	; 0x3b
    302c:	1c ae       	std	Y+60, r1	; 0x3c
				Op1 = 0;
    302e:	1d aa       	std	Y+53, r1	; 0x35
    3030:	1e aa       	std	Y+54, r1	; 0x36
    3032:	1f aa       	std	Y+55, r1	; 0x37
    3034:	18 ae       	std	Y+56, r1	; 0x38
				Op2 = 0;
    3036:	19 aa       	std	Y+49, r1	; 0x31
    3038:	1a aa       	std	Y+50, r1	; 0x32
    303a:	1b aa       	std	Y+51, r1	; 0x33
    303c:	1c aa       	std	Y+52, r1	; 0x34
				EquationSize = 0;
    303e:	1d ae       	std	Y+61, r1	; 0x3d
				for(u8 init=0; init<20; init++)
    3040:	1b a6       	std	Y+43, r1	; 0x2b
    3042:	0c c0       	rjmp	.+24     	; 0x305c <main+0x75a>
					Equation[init]=0;
    3044:	8b a5       	ldd	r24, Y+43	; 0x2b
    3046:	28 2f       	mov	r18, r24
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	ce 01       	movw	r24, r28
    304c:	ce 96       	adiw	r24, 0x3e	; 62
    304e:	fc 01       	movw	r30, r24
    3050:	e2 0f       	add	r30, r18
    3052:	f3 1f       	adc	r31, r19
    3054:	10 82       	st	Z, r1
				CLCD_voidCLearDisplay();
				Result =0;
				Op1 = 0;
				Op2 = 0;
				EquationSize = 0;
				for(u8 init=0; init<20; init++)
    3056:	8b a5       	ldd	r24, Y+43	; 0x2b
    3058:	8f 5f       	subi	r24, 0xFF	; 255
    305a:	8b a7       	std	Y+43, r24	; 0x2b
    305c:	8b a5       	ldd	r24, Y+43	; 0x2b
    305e:	84 31       	cpi	r24, 0x14	; 20
    3060:	88 f3       	brcs	.-30     	; 0x3044 <main+0x742>
    3062:	f1 cc       	rjmp	.-1566   	; 0x2a46 <main+0x144>

00003064 <__mulsi3>:
    3064:	62 9f       	mul	r22, r18
    3066:	d0 01       	movw	r26, r0
    3068:	73 9f       	mul	r23, r19
    306a:	f0 01       	movw	r30, r0
    306c:	82 9f       	mul	r24, r18
    306e:	e0 0d       	add	r30, r0
    3070:	f1 1d       	adc	r31, r1
    3072:	64 9f       	mul	r22, r20
    3074:	e0 0d       	add	r30, r0
    3076:	f1 1d       	adc	r31, r1
    3078:	92 9f       	mul	r25, r18
    307a:	f0 0d       	add	r31, r0
    307c:	83 9f       	mul	r24, r19
    307e:	f0 0d       	add	r31, r0
    3080:	74 9f       	mul	r23, r20
    3082:	f0 0d       	add	r31, r0
    3084:	65 9f       	mul	r22, r21
    3086:	f0 0d       	add	r31, r0
    3088:	99 27       	eor	r25, r25
    308a:	72 9f       	mul	r23, r18
    308c:	b0 0d       	add	r27, r0
    308e:	e1 1d       	adc	r30, r1
    3090:	f9 1f       	adc	r31, r25
    3092:	63 9f       	mul	r22, r19
    3094:	b0 0d       	add	r27, r0
    3096:	e1 1d       	adc	r30, r1
    3098:	f9 1f       	adc	r31, r25
    309a:	bd 01       	movw	r22, r26
    309c:	cf 01       	movw	r24, r30
    309e:	11 24       	eor	r1, r1
    30a0:	08 95       	ret

000030a2 <__udivmodsi4>:
    30a2:	a1 e2       	ldi	r26, 0x21	; 33
    30a4:	1a 2e       	mov	r1, r26
    30a6:	aa 1b       	sub	r26, r26
    30a8:	bb 1b       	sub	r27, r27
    30aa:	fd 01       	movw	r30, r26
    30ac:	0d c0       	rjmp	.+26     	; 0x30c8 <__udivmodsi4_ep>

000030ae <__udivmodsi4_loop>:
    30ae:	aa 1f       	adc	r26, r26
    30b0:	bb 1f       	adc	r27, r27
    30b2:	ee 1f       	adc	r30, r30
    30b4:	ff 1f       	adc	r31, r31
    30b6:	a2 17       	cp	r26, r18
    30b8:	b3 07       	cpc	r27, r19
    30ba:	e4 07       	cpc	r30, r20
    30bc:	f5 07       	cpc	r31, r21
    30be:	20 f0       	brcs	.+8      	; 0x30c8 <__udivmodsi4_ep>
    30c0:	a2 1b       	sub	r26, r18
    30c2:	b3 0b       	sbc	r27, r19
    30c4:	e4 0b       	sbc	r30, r20
    30c6:	f5 0b       	sbc	r31, r21

000030c8 <__udivmodsi4_ep>:
    30c8:	66 1f       	adc	r22, r22
    30ca:	77 1f       	adc	r23, r23
    30cc:	88 1f       	adc	r24, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	1a 94       	dec	r1
    30d2:	69 f7       	brne	.-38     	; 0x30ae <__udivmodsi4_loop>
    30d4:	60 95       	com	r22
    30d6:	70 95       	com	r23
    30d8:	80 95       	com	r24
    30da:	90 95       	com	r25
    30dc:	9b 01       	movw	r18, r22
    30de:	ac 01       	movw	r20, r24
    30e0:	bd 01       	movw	r22, r26
    30e2:	cf 01       	movw	r24, r30
    30e4:	08 95       	ret

000030e6 <__prologue_saves__>:
    30e6:	2f 92       	push	r2
    30e8:	3f 92       	push	r3
    30ea:	4f 92       	push	r4
    30ec:	5f 92       	push	r5
    30ee:	6f 92       	push	r6
    30f0:	7f 92       	push	r7
    30f2:	8f 92       	push	r8
    30f4:	9f 92       	push	r9
    30f6:	af 92       	push	r10
    30f8:	bf 92       	push	r11
    30fa:	cf 92       	push	r12
    30fc:	df 92       	push	r13
    30fe:	ef 92       	push	r14
    3100:	ff 92       	push	r15
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	ca 1b       	sub	r28, r26
    3110:	db 0b       	sbc	r29, r27
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	09 94       	ijmp

0000311e <__epilogue_restores__>:
    311e:	2a 88       	ldd	r2, Y+18	; 0x12
    3120:	39 88       	ldd	r3, Y+17	; 0x11
    3122:	48 88       	ldd	r4, Y+16	; 0x10
    3124:	5f 84       	ldd	r5, Y+15	; 0x0f
    3126:	6e 84       	ldd	r6, Y+14	; 0x0e
    3128:	7d 84       	ldd	r7, Y+13	; 0x0d
    312a:	8c 84       	ldd	r8, Y+12	; 0x0c
    312c:	9b 84       	ldd	r9, Y+11	; 0x0b
    312e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3130:	b9 84       	ldd	r11, Y+9	; 0x09
    3132:	c8 84       	ldd	r12, Y+8	; 0x08
    3134:	df 80       	ldd	r13, Y+7	; 0x07
    3136:	ee 80       	ldd	r14, Y+6	; 0x06
    3138:	fd 80       	ldd	r15, Y+5	; 0x05
    313a:	0c 81       	ldd	r16, Y+4	; 0x04
    313c:	1b 81       	ldd	r17, Y+3	; 0x03
    313e:	aa 81       	ldd	r26, Y+2	; 0x02
    3140:	b9 81       	ldd	r27, Y+1	; 0x01
    3142:	ce 0f       	add	r28, r30
    3144:	d1 1d       	adc	r29, r1
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
    3150:	ed 01       	movw	r28, r26
    3152:	08 95       	ret

00003154 <_exit>:
    3154:	f8 94       	cli

00003156 <__stop_program>:
    3156:	ff cf       	rjmp	.-2      	; 0x3156 <__stop_program>
